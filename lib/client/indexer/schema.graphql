schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "candles"
"""
type candles {
  candle_average: bigint!
  candle_duration: Int!
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String!
  open: bigint
  timestamp: timestamp!
  volume: bigint!
}

"""
aggregated selection of "candles"
"""
type candles_aggregate {
  aggregate: candles_aggregate_fields
  nodes: [candles!]!
}

"""
aggregate fields of "candles"
"""
type candles_aggregate_fields {
  avg: candles_avg_fields
  count(columns: [candles_select_column!], distinct: Boolean): Int!
  max: candles_max_fields
  min: candles_min_fields
  stddev: candles_stddev_fields
  stddev_pop: candles_stddev_pop_fields
  stddev_samp: candles_stddev_samp_fields
  sum: candles_sum_fields
  var_pop: candles_var_pop_fields
  var_samp: candles_var_samp_fields
  variance: candles_variance_fields
}

"""aggregate avg on columns"""
type candles_avg_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
Boolean expression to filter rows from the table "candles". All fields are combined with a logical 'AND'.
"""
input candles_bool_exp {
  _and: [candles_bool_exp!]
  _not: candles_bool_exp
  _or: [candles_bool_exp!]
  candle_average: bigint_comparison_exp
  candle_duration: Int_comparison_exp
  close: bigint_comparison_exp
  cond_market_twap: bigint_comparison_exp
  high: bigint_comparison_exp
  low: bigint_comparison_exp
  market_acct: String_comparison_exp
  open: bigint_comparison_exp
  timestamp: timestamp_comparison_exp
  volume: bigint_comparison_exp
}

"""
unique or primary key constraints on table "candles"
"""
enum candles_constraint {
  """
  unique or primary key constraint on columns "market_acct", "timestamp", "candle_duration"
  """
  candles_market_acct_candle_duration_timestamp_pk
}

"""
input type for incrementing numeric columns in table "candles"
"""
input candles_inc_input {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  open: bigint
  volume: bigint
}

"""
input type for inserting data into table "candles"
"""
input candles_insert_input {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamp
  volume: bigint
}

"""aggregate max on columns"""
type candles_max_fields {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamp
  volume: bigint
}

"""aggregate min on columns"""
type candles_min_fields {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamp
  volume: bigint
}

"""
response of any mutation on the table "candles"
"""
type candles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [candles!]!
}

"""
on_conflict condition type for table "candles"
"""
input candles_on_conflict {
  constraint: candles_constraint!
  update_columns: [candles_update_column!]! = []
  where: candles_bool_exp
}

"""Ordering options when selecting data from "candles"."""
input candles_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  market_acct: order_by
  open: order_by
  timestamp: order_by
  volume: order_by
}

"""primary key columns input for table: candles"""
input candles_pk_columns_input {
  candle_duration: Int!
  market_acct: String!
  timestamp: timestamp!
}

"""
select columns of table "candles"
"""
enum candles_select_column {
  """column name"""
  candle_average

  """column name"""
  candle_duration

  """column name"""
  close

  """column name"""
  cond_market_twap

  """column name"""
  high

  """column name"""
  low

  """column name"""
  market_acct

  """column name"""
  open

  """column name"""
  timestamp

  """column name"""
  volume
}

"""
input type for updating data in table "candles"
"""
input candles_set_input {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamp
  volume: bigint
}

"""aggregate stddev on columns"""
type candles_stddev_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""aggregate stddev_pop on columns"""
type candles_stddev_pop_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""aggregate stddev_samp on columns"""
type candles_stddev_samp_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
Streaming cursor of the table "candles"
"""
input candles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: candles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input candles_stream_cursor_value_input {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamp
  volume: bigint
}

"""aggregate sum on columns"""
type candles_sum_fields {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  open: bigint
  volume: bigint
}

"""
update columns of table "candles"
"""
enum candles_update_column {
  """column name"""
  candle_average

  """column name"""
  candle_duration

  """column name"""
  close

  """column name"""
  cond_market_twap

  """column name"""
  high

  """column name"""
  low

  """column name"""
  market_acct

  """column name"""
  open

  """column name"""
  timestamp

  """column name"""
  volume
}

input candles_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: candles_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: candles_set_input

  """filter the rows which have to be updated"""
  where: candles_bool_exp!
}

"""aggregate var_pop on columns"""
type candles_var_pop_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""aggregate var_samp on columns"""
type candles_var_samp_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""aggregate variance on columns"""
type candles_variance_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "dao_details"
"""
type dao_details {
  dao_id: bigint!
  description: String
  github: String
  name: String
  url: String
  x_account: String
}

"""
aggregated selection of "dao_details"
"""
type dao_details_aggregate {
  aggregate: dao_details_aggregate_fields
  nodes: [dao_details!]!
}

"""
aggregate fields of "dao_details"
"""
type dao_details_aggregate_fields {
  avg: dao_details_avg_fields
  count(columns: [dao_details_select_column!], distinct: Boolean): Int!
  max: dao_details_max_fields
  min: dao_details_min_fields
  stddev: dao_details_stddev_fields
  stddev_pop: dao_details_stddev_pop_fields
  stddev_samp: dao_details_stddev_samp_fields
  sum: dao_details_sum_fields
  var_pop: dao_details_var_pop_fields
  var_samp: dao_details_var_samp_fields
  variance: dao_details_variance_fields
}

"""aggregate avg on columns"""
type dao_details_avg_fields {
  dao_id: Float
}

"""
Boolean expression to filter rows from the table "dao_details". All fields are combined with a logical 'AND'.
"""
input dao_details_bool_exp {
  _and: [dao_details_bool_exp!]
  _not: dao_details_bool_exp
  _or: [dao_details_bool_exp!]
  dao_id: bigint_comparison_exp
  description: String_comparison_exp
  github: String_comparison_exp
  name: String_comparison_exp
  url: String_comparison_exp
  x_account: String_comparison_exp
}

"""
unique or primary key constraints on table "dao_details"
"""
enum dao_details_constraint {
  """
  unique or primary key constraint on columns "github"
  """
  dao_details_github_unique

  """
  unique or primary key constraint on columns "name"
  """
  dao_details_name_unique

  """
  unique or primary key constraint on columns "dao_id"
  """
  dao_details_pkey

  """
  unique or primary key constraint on columns "url"
  """
  dao_details_url_unique

  """
  unique or primary key constraint on columns "x_account"
  """
  dao_details_x_account_unique

  """
  unique or primary key constraint on columns "dao_id", "name", "url"
  """
  id_name_url
}

"""
input type for incrementing numeric columns in table "dao_details"
"""
input dao_details_inc_input {
  dao_id: bigint
}

"""
input type for inserting data into table "dao_details"
"""
input dao_details_insert_input {
  dao_id: bigint
  description: String
  github: String
  name: String
  url: String
  x_account: String
}

"""aggregate max on columns"""
type dao_details_max_fields {
  dao_id: bigint
  description: String
  github: String
  name: String
  url: String
  x_account: String
}

"""aggregate min on columns"""
type dao_details_min_fields {
  dao_id: bigint
  description: String
  github: String
  name: String
  url: String
  x_account: String
}

"""
response of any mutation on the table "dao_details"
"""
type dao_details_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [dao_details!]!
}

"""
on_conflict condition type for table "dao_details"
"""
input dao_details_on_conflict {
  constraint: dao_details_constraint!
  update_columns: [dao_details_update_column!]! = []
  where: dao_details_bool_exp
}

"""Ordering options when selecting data from "dao_details"."""
input dao_details_order_by {
  dao_id: order_by
  description: order_by
  github: order_by
  name: order_by
  url: order_by
  x_account: order_by
}

"""primary key columns input for table: dao_details"""
input dao_details_pk_columns_input {
  dao_id: bigint!
}

"""
select columns of table "dao_details"
"""
enum dao_details_select_column {
  """column name"""
  dao_id

  """column name"""
  description

  """column name"""
  github

  """column name"""
  name

  """column name"""
  url

  """column name"""
  x_account
}

"""
input type for updating data in table "dao_details"
"""
input dao_details_set_input {
  dao_id: bigint
  description: String
  github: String
  name: String
  url: String
  x_account: String
}

"""aggregate stddev on columns"""
type dao_details_stddev_fields {
  dao_id: Float
}

"""aggregate stddev_pop on columns"""
type dao_details_stddev_pop_fields {
  dao_id: Float
}

"""aggregate stddev_samp on columns"""
type dao_details_stddev_samp_fields {
  dao_id: Float
}

"""
Streaming cursor of the table "dao_details"
"""
input dao_details_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dao_details_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dao_details_stream_cursor_value_input {
  dao_id: bigint
  description: String
  github: String
  name: String
  url: String
  x_account: String
}

"""aggregate sum on columns"""
type dao_details_sum_fields {
  dao_id: bigint
}

"""
update columns of table "dao_details"
"""
enum dao_details_update_column {
  """column name"""
  dao_id

  """column name"""
  description

  """column name"""
  github

  """column name"""
  name

  """column name"""
  url

  """column name"""
  x_account
}

input dao_details_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: dao_details_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: dao_details_set_input

  """filter the rows which have to be updated"""
  where: dao_details_bool_exp!
}

"""aggregate var_pop on columns"""
type dao_details_var_pop_fields {
  dao_id: Float
}

"""aggregate var_samp on columns"""
type dao_details_var_samp_fields {
  dao_id: Float
}

"""aggregate variance on columns"""
type dao_details_variance_fields {
  dao_id: Float
}

"""
columns and relationships of "daos"
"""
type daos {
  created_at: timestamp!
  dao_acct: String!
  dao_id: bigint
  mint_acct: String!
  program_acct: String!
  updated_at: timestamp!
}

"""
aggregated selection of "daos"
"""
type daos_aggregate {
  aggregate: daos_aggregate_fields
  nodes: [daos!]!
}

"""
aggregate fields of "daos"
"""
type daos_aggregate_fields {
  avg: daos_avg_fields
  count(columns: [daos_select_column!], distinct: Boolean): Int!
  max: daos_max_fields
  min: daos_min_fields
  stddev: daos_stddev_fields
  stddev_pop: daos_stddev_pop_fields
  stddev_samp: daos_stddev_samp_fields
  sum: daos_sum_fields
  var_pop: daos_var_pop_fields
  var_samp: daos_var_samp_fields
  variance: daos_variance_fields
}

"""aggregate avg on columns"""
type daos_avg_fields {
  dao_id: Float
}

"""
Boolean expression to filter rows from the table "daos". All fields are combined with a logical 'AND'.
"""
input daos_bool_exp {
  _and: [daos_bool_exp!]
  _not: daos_bool_exp
  _or: [daos_bool_exp!]
  created_at: timestamp_comparison_exp
  dao_acct: String_comparison_exp
  dao_id: bigint_comparison_exp
  mint_acct: String_comparison_exp
  program_acct: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "daos"
"""
enum daos_constraint {
  """
  unique or primary key constraint on columns "dao_acct", "program_acct"
  """
  dao_acct_program

  """
  unique or primary key constraint on columns "dao_acct"
  """
  daos_pkey
}

"""
input type for incrementing numeric columns in table "daos"
"""
input daos_inc_input {
  dao_id: bigint
}

"""
input type for inserting data into table "daos"
"""
input daos_insert_input {
  created_at: timestamp
  dao_acct: String
  dao_id: bigint
  mint_acct: String
  program_acct: String
  updated_at: timestamp
}

"""aggregate max on columns"""
type daos_max_fields {
  created_at: timestamp
  dao_acct: String
  dao_id: bigint
  mint_acct: String
  program_acct: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type daos_min_fields {
  created_at: timestamp
  dao_acct: String
  dao_id: bigint
  mint_acct: String
  program_acct: String
  updated_at: timestamp
}

"""
response of any mutation on the table "daos"
"""
type daos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [daos!]!
}

"""
on_conflict condition type for table "daos"
"""
input daos_on_conflict {
  constraint: daos_constraint!
  update_columns: [daos_update_column!]! = []
  where: daos_bool_exp
}

"""Ordering options when selecting data from "daos"."""
input daos_order_by {
  created_at: order_by
  dao_acct: order_by
  dao_id: order_by
  mint_acct: order_by
  program_acct: order_by
  updated_at: order_by
}

"""primary key columns input for table: daos"""
input daos_pk_columns_input {
  dao_acct: String!
}

"""
select columns of table "daos"
"""
enum daos_select_column {
  """column name"""
  created_at

  """column name"""
  dao_acct

  """column name"""
  dao_id

  """column name"""
  mint_acct

  """column name"""
  program_acct

  """column name"""
  updated_at
}

"""
input type for updating data in table "daos"
"""
input daos_set_input {
  created_at: timestamp
  dao_acct: String
  dao_id: bigint
  mint_acct: String
  program_acct: String
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type daos_stddev_fields {
  dao_id: Float
}

"""aggregate stddev_pop on columns"""
type daos_stddev_pop_fields {
  dao_id: Float
}

"""aggregate stddev_samp on columns"""
type daos_stddev_samp_fields {
  dao_id: Float
}

"""
Streaming cursor of the table "daos"
"""
input daos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: daos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input daos_stream_cursor_value_input {
  created_at: timestamp
  dao_acct: String
  dao_id: bigint
  mint_acct: String
  program_acct: String
  updated_at: timestamp
}

"""aggregate sum on columns"""
type daos_sum_fields {
  dao_id: bigint
}

"""
update columns of table "daos"
"""
enum daos_update_column {
  """column name"""
  created_at

  """column name"""
  dao_acct

  """column name"""
  dao_id

  """column name"""
  mint_acct

  """column name"""
  program_acct

  """column name"""
  updated_at
}

input daos_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: daos_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: daos_set_input

  """filter the rows which have to be updated"""
  where: daos_bool_exp!
}

"""aggregate var_pop on columns"""
type daos_var_pop_fields {
  dao_id: Float
}

"""aggregate var_samp on columns"""
type daos_var_samp_fields {
  dao_id: Float
}

"""aggregate variance on columns"""
type daos_variance_fields {
  dao_id: Float
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "markets"
"""
type markets {
  active_slot: bigint
  asks_token_acct: String!
  base_lot_size: bigint!
  base_maker_fee: smallint!
  base_mint_acct: String!
  base_taker_fee: smallint!
  bids_token_acct: String!
  create_tx_sig: String!
  inactive_slot: bigint
  market_acct: String!
  market_type: String!
  proposal_acct: String
  quote_lot_size: bigint!
  quote_maker_fee: smallint!
  quote_mint_acct: String!
  quote_taker_fee: smallint!
  quote_tick_size: bigint!
}

"""
aggregated selection of "markets"
"""
type markets_aggregate {
  aggregate: markets_aggregate_fields
  nodes: [markets!]!
}

"""
aggregate fields of "markets"
"""
type markets_aggregate_fields {
  avg: markets_avg_fields
  count(columns: [markets_select_column!], distinct: Boolean): Int!
  max: markets_max_fields
  min: markets_min_fields
  stddev: markets_stddev_fields
  stddev_pop: markets_stddev_pop_fields
  stddev_samp: markets_stddev_samp_fields
  sum: markets_sum_fields
  var_pop: markets_var_pop_fields
  var_samp: markets_var_samp_fields
  variance: markets_variance_fields
}

"""aggregate avg on columns"""
type markets_avg_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
Boolean expression to filter rows from the table "markets". All fields are combined with a logical 'AND'.
"""
input markets_bool_exp {
  _and: [markets_bool_exp!]
  _not: markets_bool_exp
  _or: [markets_bool_exp!]
  active_slot: bigint_comparison_exp
  asks_token_acct: String_comparison_exp
  base_lot_size: bigint_comparison_exp
  base_maker_fee: smallint_comparison_exp
  base_mint_acct: String_comparison_exp
  base_taker_fee: smallint_comparison_exp
  bids_token_acct: String_comparison_exp
  create_tx_sig: String_comparison_exp
  inactive_slot: bigint_comparison_exp
  market_acct: String_comparison_exp
  market_type: String_comparison_exp
  proposal_acct: String_comparison_exp
  quote_lot_size: bigint_comparison_exp
  quote_maker_fee: smallint_comparison_exp
  quote_mint_acct: String_comparison_exp
  quote_taker_fee: smallint_comparison_exp
  quote_tick_size: bigint_comparison_exp
}

"""
unique or primary key constraints on table "markets"
"""
enum markets_constraint {
  """
  unique or primary key constraint on columns "market_acct"
  """
  markets_pkey
}

"""
input type for incrementing numeric columns in table "markets"
"""
input markets_inc_input {
  active_slot: bigint
  base_lot_size: bigint
  base_maker_fee: smallint
  base_taker_fee: smallint
  inactive_slot: bigint
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""
input type for inserting data into table "markets"
"""
input markets_insert_input {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""aggregate max on columns"""
type markets_max_fields {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""aggregate min on columns"""
type markets_min_fields {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""
response of any mutation on the table "markets"
"""
type markets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [markets!]!
}

"""
on_conflict condition type for table "markets"
"""
input markets_on_conflict {
  constraint: markets_constraint!
  update_columns: [markets_update_column!]! = []
  where: markets_bool_exp
}

"""Ordering options when selecting data from "markets"."""
input markets_order_by {
  active_slot: order_by
  asks_token_acct: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_mint_acct: order_by
  base_taker_fee: order_by
  bids_token_acct: order_by
  create_tx_sig: order_by
  inactive_slot: order_by
  market_acct: order_by
  market_type: order_by
  proposal_acct: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_mint_acct: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""primary key columns input for table: markets"""
input markets_pk_columns_input {
  market_acct: String!
}

"""
select columns of table "markets"
"""
enum markets_select_column {
  """column name"""
  active_slot

  """column name"""
  asks_token_acct

  """column name"""
  base_lot_size

  """column name"""
  base_maker_fee

  """column name"""
  base_mint_acct

  """column name"""
  base_taker_fee

  """column name"""
  bids_token_acct

  """column name"""
  create_tx_sig

  """column name"""
  inactive_slot

  """column name"""
  market_acct

  """column name"""
  market_type

  """column name"""
  proposal_acct

  """column name"""
  quote_lot_size

  """column name"""
  quote_maker_fee

  """column name"""
  quote_mint_acct

  """column name"""
  quote_taker_fee

  """column name"""
  quote_tick_size
}

"""
input type for updating data in table "markets"
"""
input markets_set_input {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""aggregate stddev on columns"""
type markets_stddev_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""aggregate stddev_pop on columns"""
type markets_stddev_pop_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""aggregate stddev_samp on columns"""
type markets_stddev_samp_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
Streaming cursor of the table "markets"
"""
input markets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: markets_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input markets_stream_cursor_value_input {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""aggregate sum on columns"""
type markets_sum_fields {
  active_slot: bigint
  base_lot_size: bigint
  base_maker_fee: smallint
  base_taker_fee: smallint
  inactive_slot: bigint
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""
update columns of table "markets"
"""
enum markets_update_column {
  """column name"""
  active_slot

  """column name"""
  asks_token_acct

  """column name"""
  base_lot_size

  """column name"""
  base_maker_fee

  """column name"""
  base_mint_acct

  """column name"""
  base_taker_fee

  """column name"""
  bids_token_acct

  """column name"""
  create_tx_sig

  """column name"""
  inactive_slot

  """column name"""
  market_acct

  """column name"""
  market_type

  """column name"""
  proposal_acct

  """column name"""
  quote_lot_size

  """column name"""
  quote_maker_fee

  """column name"""
  quote_mint_acct

  """column name"""
  quote_taker_fee

  """column name"""
  quote_tick_size
}

input markets_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: markets_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: markets_set_input

  """filter the rows which have to be updated"""
  where: markets_bool_exp!
}

"""aggregate var_pop on columns"""
type markets_var_pop_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""aggregate var_samp on columns"""
type markets_var_samp_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""aggregate variance on columns"""
type markets_variance_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "candles"
  """
  delete_candles(
    """filter the rows which have to be deleted"""
    where: candles_bool_exp!
  ): candles_mutation_response

  """
  delete single row from the table: "candles"
  """
  delete_candles_by_pk(candle_duration: Int!, market_acct: String!, timestamp: timestamp!): candles

  """
  delete data from the table: "dao_details"
  """
  delete_dao_details(
    """filter the rows which have to be deleted"""
    where: dao_details_bool_exp!
  ): dao_details_mutation_response

  """
  delete single row from the table: "dao_details"
  """
  delete_dao_details_by_pk(dao_id: bigint!): dao_details

  """
  delete data from the table: "daos"
  """
  delete_daos(
    """filter the rows which have to be deleted"""
    where: daos_bool_exp!
  ): daos_mutation_response

  """
  delete single row from the table: "daos"
  """
  delete_daos_by_pk(dao_acct: String!): daos

  """
  delete data from the table: "markets"
  """
  delete_markets(
    """filter the rows which have to be deleted"""
    where: markets_bool_exp!
  ): markets_mutation_response

  """
  delete single row from the table: "markets"
  """
  delete_markets_by_pk(market_acct: String!): markets

  """
  delete data from the table: "orders"
  """
  delete_orders(
    """filter the rows which have to be deleted"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  delete single row from the table: "orders"
  """
  delete_orders_by_pk(order_tx_sig: String!): orders

  """
  delete data from the table: "programs"
  """
  delete_programs(
    """filter the rows which have to be deleted"""
    where: programs_bool_exp!
  ): programs_mutation_response

  """
  delete single row from the table: "programs"
  """
  delete_programs_by_pk(program_acct: String!): programs

  """
  delete data from the table: "proposal_details"
  """
  delete_proposal_details(
    """filter the rows which have to be deleted"""
    where: proposal_details_bool_exp!
  ): proposal_details_mutation_response

  """
  delete single row from the table: "proposal_details"
  """
  delete_proposal_details_by_pk(proposal_id: bigint!): proposal_details

  """
  delete data from the table: "proposals"
  """
  delete_proposals(
    """filter the rows which have to be deleted"""
    where: proposals_bool_exp!
  ): proposals_mutation_response

  """
  delete single row from the table: "proposals"
  """
  delete_proposals_by_pk(proposal_acct: String!): proposals

  """
  delete data from the table: "token_accts"
  """
  delete_token_accts(
    """filter the rows which have to be deleted"""
    where: token_accts_bool_exp!
  ): token_accts_mutation_response

  """
  delete single row from the table: "token_accts"
  """
  delete_token_accts_by_pk(token_acct: String!): token_accts

  """
  delete data from the table: "tokens"
  """
  delete_tokens(
    """filter the rows which have to be deleted"""
    where: tokens_bool_exp!
  ): tokens_mutation_response

  """
  delete single row from the table: "tokens"
  """
  delete_tokens_by_pk(mint_acct: String!): tokens

  """
  delete data from the table: "transactions"
  """
  delete_transactions(
    """filter the rows which have to be deleted"""
    where: transactions_bool_exp!
  ): transactions_mutation_response

  """
  delete single row from the table: "transactions"
  """
  delete_transactions_by_pk(tx_sig: String!): transactions

  """
  delete data from the table: "twaps"
  """
  delete_twaps(
    """filter the rows which have to be deleted"""
    where: twaps_bool_exp!
  ): twaps_mutation_response

  """
  delete single row from the table: "twaps"
  """
  delete_twaps_by_pk(market_acct: String!, updated_slot: bigint!): twaps

  """
  insert data into the table: "candles"
  """
  insert_candles(
    """the rows to be inserted"""
    objects: [candles_insert_input!]!

    """upsert condition"""
    on_conflict: candles_on_conflict
  ): candles_mutation_response

  """
  insert a single row into the table: "candles"
  """
  insert_candles_one(
    """the row to be inserted"""
    object: candles_insert_input!

    """upsert condition"""
    on_conflict: candles_on_conflict
  ): candles

  """
  insert data into the table: "dao_details"
  """
  insert_dao_details(
    """the rows to be inserted"""
    objects: [dao_details_insert_input!]!

    """upsert condition"""
    on_conflict: dao_details_on_conflict
  ): dao_details_mutation_response

  """
  insert a single row into the table: "dao_details"
  """
  insert_dao_details_one(
    """the row to be inserted"""
    object: dao_details_insert_input!

    """upsert condition"""
    on_conflict: dao_details_on_conflict
  ): dao_details

  """
  insert data into the table: "daos"
  """
  insert_daos(
    """the rows to be inserted"""
    objects: [daos_insert_input!]!

    """upsert condition"""
    on_conflict: daos_on_conflict
  ): daos_mutation_response

  """
  insert a single row into the table: "daos"
  """
  insert_daos_one(
    """the row to be inserted"""
    object: daos_insert_input!

    """upsert condition"""
    on_conflict: daos_on_conflict
  ): daos

  """
  insert data into the table: "markets"
  """
  insert_markets(
    """the rows to be inserted"""
    objects: [markets_insert_input!]!

    """upsert condition"""
    on_conflict: markets_on_conflict
  ): markets_mutation_response

  """
  insert a single row into the table: "markets"
  """
  insert_markets_one(
    """the row to be inserted"""
    object: markets_insert_input!

    """upsert condition"""
    on_conflict: markets_on_conflict
  ): markets

  """
  insert data into the table: "orders"
  """
  insert_orders(
    """the rows to be inserted"""
    objects: [orders_insert_input!]!

    """upsert condition"""
    on_conflict: orders_on_conflict
  ): orders_mutation_response

  """
  insert a single row into the table: "orders"
  """
  insert_orders_one(
    """the row to be inserted"""
    object: orders_insert_input!

    """upsert condition"""
    on_conflict: orders_on_conflict
  ): orders

  """
  insert data into the table: "programs"
  """
  insert_programs(
    """the rows to be inserted"""
    objects: [programs_insert_input!]!

    """upsert condition"""
    on_conflict: programs_on_conflict
  ): programs_mutation_response

  """
  insert a single row into the table: "programs"
  """
  insert_programs_one(
    """the row to be inserted"""
    object: programs_insert_input!

    """upsert condition"""
    on_conflict: programs_on_conflict
  ): programs

  """
  insert data into the table: "proposal_details"
  """
  insert_proposal_details(
    """the rows to be inserted"""
    objects: [proposal_details_insert_input!]!

    """upsert condition"""
    on_conflict: proposal_details_on_conflict
  ): proposal_details_mutation_response

  """
  insert a single row into the table: "proposal_details"
  """
  insert_proposal_details_one(
    """the row to be inserted"""
    object: proposal_details_insert_input!

    """upsert condition"""
    on_conflict: proposal_details_on_conflict
  ): proposal_details

  """
  insert data into the table: "proposals"
  """
  insert_proposals(
    """the rows to be inserted"""
    objects: [proposals_insert_input!]!

    """upsert condition"""
    on_conflict: proposals_on_conflict
  ): proposals_mutation_response

  """
  insert a single row into the table: "proposals"
  """
  insert_proposals_one(
    """the row to be inserted"""
    object: proposals_insert_input!

    """upsert condition"""
    on_conflict: proposals_on_conflict
  ): proposals

  """
  insert data into the table: "token_accts"
  """
  insert_token_accts(
    """the rows to be inserted"""
    objects: [token_accts_insert_input!]!

    """upsert condition"""
    on_conflict: token_accts_on_conflict
  ): token_accts_mutation_response

  """
  insert a single row into the table: "token_accts"
  """
  insert_token_accts_one(
    """the row to be inserted"""
    object: token_accts_insert_input!

    """upsert condition"""
    on_conflict: token_accts_on_conflict
  ): token_accts

  """
  insert data into the table: "tokens"
  """
  insert_tokens(
    """the rows to be inserted"""
    objects: [tokens_insert_input!]!

    """upsert condition"""
    on_conflict: tokens_on_conflict
  ): tokens_mutation_response

  """
  insert a single row into the table: "tokens"
  """
  insert_tokens_one(
    """the row to be inserted"""
    object: tokens_insert_input!

    """upsert condition"""
    on_conflict: tokens_on_conflict
  ): tokens

  """
  insert data into the table: "transactions"
  """
  insert_transactions(
    """the rows to be inserted"""
    objects: [transactions_insert_input!]!

    """upsert condition"""
    on_conflict: transactions_on_conflict
  ): transactions_mutation_response

  """
  insert a single row into the table: "transactions"
  """
  insert_transactions_one(
    """the row to be inserted"""
    object: transactions_insert_input!

    """upsert condition"""
    on_conflict: transactions_on_conflict
  ): transactions

  """
  insert data into the table: "twaps"
  """
  insert_twaps(
    """the rows to be inserted"""
    objects: [twaps_insert_input!]!

    """upsert condition"""
    on_conflict: twaps_on_conflict
  ): twaps_mutation_response

  """
  insert a single row into the table: "twaps"
  """
  insert_twaps_one(
    """the row to be inserted"""
    object: twaps_insert_input!

    """upsert condition"""
    on_conflict: twaps_on_conflict
  ): twaps

  """
  update data of the table: "candles"
  """
  update_candles(
    """increments the numeric columns with given value of the filtered values"""
    _inc: candles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: candles_set_input

    """filter the rows which have to be updated"""
    where: candles_bool_exp!
  ): candles_mutation_response

  """
  update single row of the table: "candles"
  """
  update_candles_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: candles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: candles_set_input
    pk_columns: candles_pk_columns_input!
  ): candles

  """
  update multiples rows of table: "candles"
  """
  update_candles_many(
    """updates to execute, in order"""
    updates: [candles_updates!]!
  ): [candles_mutation_response]

  """
  update data of the table: "dao_details"
  """
  update_dao_details(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dao_details_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dao_details_set_input

    """filter the rows which have to be updated"""
    where: dao_details_bool_exp!
  ): dao_details_mutation_response

  """
  update single row of the table: "dao_details"
  """
  update_dao_details_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dao_details_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dao_details_set_input
    pk_columns: dao_details_pk_columns_input!
  ): dao_details

  """
  update multiples rows of table: "dao_details"
  """
  update_dao_details_many(
    """updates to execute, in order"""
    updates: [dao_details_updates!]!
  ): [dao_details_mutation_response]

  """
  update data of the table: "daos"
  """
  update_daos(
    """increments the numeric columns with given value of the filtered values"""
    _inc: daos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: daos_set_input

    """filter the rows which have to be updated"""
    where: daos_bool_exp!
  ): daos_mutation_response

  """
  update single row of the table: "daos"
  """
  update_daos_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: daos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: daos_set_input
    pk_columns: daos_pk_columns_input!
  ): daos

  """
  update multiples rows of table: "daos"
  """
  update_daos_many(
    """updates to execute, in order"""
    updates: [daos_updates!]!
  ): [daos_mutation_response]

  """
  update data of the table: "markets"
  """
  update_markets(
    """increments the numeric columns with given value of the filtered values"""
    _inc: markets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: markets_set_input

    """filter the rows which have to be updated"""
    where: markets_bool_exp!
  ): markets_mutation_response

  """
  update single row of the table: "markets"
  """
  update_markets_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: markets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: markets_set_input
    pk_columns: markets_pk_columns_input!
  ): markets

  """
  update multiples rows of table: "markets"
  """
  update_markets_many(
    """updates to execute, in order"""
    updates: [markets_updates!]!
  ): [markets_mutation_response]

  """
  update data of the table: "orders"
  """
  update_orders(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input

    """filter the rows which have to be updated"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  update single row of the table: "orders"
  """
  update_orders_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input
    pk_columns: orders_pk_columns_input!
  ): orders

  """
  update multiples rows of table: "orders"
  """
  update_orders_many(
    """updates to execute, in order"""
    updates: [orders_updates!]!
  ): [orders_mutation_response]

  """
  update data of the table: "programs"
  """
  update_programs(
    """increments the numeric columns with given value of the filtered values"""
    _inc: programs_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: programs_set_input

    """filter the rows which have to be updated"""
    where: programs_bool_exp!
  ): programs_mutation_response

  """
  update single row of the table: "programs"
  """
  update_programs_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: programs_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: programs_set_input
    pk_columns: programs_pk_columns_input!
  ): programs

  """
  update multiples rows of table: "programs"
  """
  update_programs_many(
    """updates to execute, in order"""
    updates: [programs_updates!]!
  ): [programs_mutation_response]

  """
  update data of the table: "proposal_details"
  """
  update_proposal_details(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: proposal_details_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: proposal_details_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: proposal_details_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: proposal_details_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: proposal_details_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: proposal_details_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposal_details_set_input

    """filter the rows which have to be updated"""
    where: proposal_details_bool_exp!
  ): proposal_details_mutation_response

  """
  update single row of the table: "proposal_details"
  """
  update_proposal_details_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: proposal_details_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: proposal_details_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: proposal_details_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: proposal_details_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: proposal_details_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: proposal_details_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposal_details_set_input
    pk_columns: proposal_details_pk_columns_input!
  ): proposal_details

  """
  update multiples rows of table: "proposal_details"
  """
  update_proposal_details_many(
    """updates to execute, in order"""
    updates: [proposal_details_updates!]!
  ): [proposal_details_mutation_response]

  """
  update data of the table: "proposals"
  """
  update_proposals(
    """increments the numeric columns with given value of the filtered values"""
    _inc: proposals_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposals_set_input

    """filter the rows which have to be updated"""
    where: proposals_bool_exp!
  ): proposals_mutation_response

  """
  update single row of the table: "proposals"
  """
  update_proposals_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: proposals_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposals_set_input
    pk_columns: proposals_pk_columns_input!
  ): proposals

  """
  update multiples rows of table: "proposals"
  """
  update_proposals_many(
    """updates to execute, in order"""
    updates: [proposals_updates!]!
  ): [proposals_mutation_response]

  """
  update data of the table: "token_accts"
  """
  update_token_accts(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_accts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_accts_set_input

    """filter the rows which have to be updated"""
    where: token_accts_bool_exp!
  ): token_accts_mutation_response

  """
  update single row of the table: "token_accts"
  """
  update_token_accts_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_accts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_accts_set_input
    pk_columns: token_accts_pk_columns_input!
  ): token_accts

  """
  update multiples rows of table: "token_accts"
  """
  update_token_accts_many(
    """updates to execute, in order"""
    updates: [token_accts_updates!]!
  ): [token_accts_mutation_response]

  """
  update data of the table: "tokens"
  """
  update_tokens(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tokens_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tokens_set_input

    """filter the rows which have to be updated"""
    where: tokens_bool_exp!
  ): tokens_mutation_response

  """
  update single row of the table: "tokens"
  """
  update_tokens_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tokens_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tokens_set_input
    pk_columns: tokens_pk_columns_input!
  ): tokens

  """
  update multiples rows of table: "tokens"
  """
  update_tokens_many(
    """updates to execute, in order"""
    updates: [tokens_updates!]!
  ): [tokens_mutation_response]

  """
  update data of the table: "transactions"
  """
  update_transactions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: transactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: transactions_set_input

    """filter the rows which have to be updated"""
    where: transactions_bool_exp!
  ): transactions_mutation_response

  """
  update single row of the table: "transactions"
  """
  update_transactions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: transactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: transactions_set_input
    pk_columns: transactions_pk_columns_input!
  ): transactions

  """
  update multiples rows of table: "transactions"
  """
  update_transactions_many(
    """updates to execute, in order"""
    updates: [transactions_updates!]!
  ): [transactions_mutation_response]

  """
  update data of the table: "twaps"
  """
  update_twaps(
    """increments the numeric columns with given value of the filtered values"""
    _inc: twaps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: twaps_set_input

    """filter the rows which have to be updated"""
    where: twaps_bool_exp!
  ): twaps_mutation_response

  """
  update single row of the table: "twaps"
  """
  update_twaps_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: twaps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: twaps_set_input
    pk_columns: twaps_pk_columns_input!
  ): twaps

  """
  update multiples rows of table: "twaps"
  """
  update_twaps_many(
    """updates to execute, in order"""
    updates: [twaps_updates!]!
  ): [twaps_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "orders"
"""
type orders {
  actor_acct: String!
  cancel_block: bigint
  cancel_time: timestamp
  cancel_tx_sig: String
  filled_base_amount: bigint!
  is_active: Boolean!
  market_acct: String!
  order_block: bigint!
  order_time: timestamp!
  order_tx_sig: String!
  quote_price: bigint!
  side: String!
  unfilled_base_amount: bigint!
  updated_at: timestamp!
}

"""
aggregated selection of "orders"
"""
type orders_aggregate {
  aggregate: orders_aggregate_fields
  nodes: [orders!]!
}

"""
aggregate fields of "orders"
"""
type orders_aggregate_fields {
  avg: orders_avg_fields
  count(columns: [orders_select_column!], distinct: Boolean): Int!
  max: orders_max_fields
  min: orders_min_fields
  stddev: orders_stddev_fields
  stddev_pop: orders_stddev_pop_fields
  stddev_samp: orders_stddev_samp_fields
  sum: orders_sum_fields
  var_pop: orders_var_pop_fields
  var_samp: orders_var_samp_fields
  variance: orders_variance_fields
}

"""aggregate avg on columns"""
type orders_avg_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
Boolean expression to filter rows from the table "orders". All fields are combined with a logical 'AND'.
"""
input orders_bool_exp {
  _and: [orders_bool_exp!]
  _not: orders_bool_exp
  _or: [orders_bool_exp!]
  actor_acct: String_comparison_exp
  cancel_block: bigint_comparison_exp
  cancel_time: timestamp_comparison_exp
  cancel_tx_sig: String_comparison_exp
  filled_base_amount: bigint_comparison_exp
  is_active: Boolean_comparison_exp
  market_acct: String_comparison_exp
  order_block: bigint_comparison_exp
  order_time: timestamp_comparison_exp
  order_tx_sig: String_comparison_exp
  quote_price: bigint_comparison_exp
  side: String_comparison_exp
  unfilled_base_amount: bigint_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "orders"
"""
enum orders_constraint {
  """
  unique or primary key constraint on columns "order_tx_sig"
  """
  orders_pkey
}

"""
input type for incrementing numeric columns in table "orders"
"""
input orders_inc_input {
  cancel_block: bigint
  filled_base_amount: bigint
  order_block: bigint
  quote_price: bigint
  unfilled_base_amount: bigint
}

"""
input type for inserting data into table "orders"
"""
input orders_insert_input {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamp
  cancel_tx_sig: String
  filled_base_amount: bigint
  is_active: Boolean
  market_acct: String
  order_block: bigint
  order_time: timestamp
  order_tx_sig: String
  quote_price: bigint
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamp
}

"""aggregate max on columns"""
type orders_max_fields {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamp
  cancel_tx_sig: String
  filled_base_amount: bigint
  market_acct: String
  order_block: bigint
  order_time: timestamp
  order_tx_sig: String
  quote_price: bigint
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamp
}

"""aggregate min on columns"""
type orders_min_fields {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamp
  cancel_tx_sig: String
  filled_base_amount: bigint
  market_acct: String
  order_block: bigint
  order_time: timestamp
  order_tx_sig: String
  quote_price: bigint
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamp
}

"""
response of any mutation on the table "orders"
"""
type orders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [orders!]!
}

"""
on_conflict condition type for table "orders"
"""
input orders_on_conflict {
  constraint: orders_constraint!
  update_columns: [orders_update_column!]! = []
  where: orders_bool_exp
}

"""Ordering options when selecting data from "orders"."""
input orders_order_by {
  actor_acct: order_by
  cancel_block: order_by
  cancel_time: order_by
  cancel_tx_sig: order_by
  filled_base_amount: order_by
  is_active: order_by
  market_acct: order_by
  order_block: order_by
  order_time: order_by
  order_tx_sig: order_by
  quote_price: order_by
  side: order_by
  unfilled_base_amount: order_by
  updated_at: order_by
}

"""primary key columns input for table: orders"""
input orders_pk_columns_input {
  order_tx_sig: String!
}

"""
select columns of table "orders"
"""
enum orders_select_column {
  """column name"""
  actor_acct

  """column name"""
  cancel_block

  """column name"""
  cancel_time

  """column name"""
  cancel_tx_sig

  """column name"""
  filled_base_amount

  """column name"""
  is_active

  """column name"""
  market_acct

  """column name"""
  order_block

  """column name"""
  order_time

  """column name"""
  order_tx_sig

  """column name"""
  quote_price

  """column name"""
  side

  """column name"""
  unfilled_base_amount

  """column name"""
  updated_at
}

"""
input type for updating data in table "orders"
"""
input orders_set_input {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamp
  cancel_tx_sig: String
  filled_base_amount: bigint
  is_active: Boolean
  market_acct: String
  order_block: bigint
  order_time: timestamp
  order_tx_sig: String
  quote_price: bigint
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type orders_stddev_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""aggregate stddev_pop on columns"""
type orders_stddev_pop_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""aggregate stddev_samp on columns"""
type orders_stddev_samp_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
Streaming cursor of the table "orders"
"""
input orders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: orders_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input orders_stream_cursor_value_input {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamp
  cancel_tx_sig: String
  filled_base_amount: bigint
  is_active: Boolean
  market_acct: String
  order_block: bigint
  order_time: timestamp
  order_tx_sig: String
  quote_price: bigint
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamp
}

"""aggregate sum on columns"""
type orders_sum_fields {
  cancel_block: bigint
  filled_base_amount: bigint
  order_block: bigint
  quote_price: bigint
  unfilled_base_amount: bigint
}

"""
update columns of table "orders"
"""
enum orders_update_column {
  """column name"""
  actor_acct

  """column name"""
  cancel_block

  """column name"""
  cancel_time

  """column name"""
  cancel_tx_sig

  """column name"""
  filled_base_amount

  """column name"""
  is_active

  """column name"""
  market_acct

  """column name"""
  order_block

  """column name"""
  order_time

  """column name"""
  order_tx_sig

  """column name"""
  quote_price

  """column name"""
  side

  """column name"""
  unfilled_base_amount

  """column name"""
  updated_at
}

input orders_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: orders_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: orders_set_input

  """filter the rows which have to be updated"""
  where: orders_bool_exp!
}

"""aggregate var_pop on columns"""
type orders_var_pop_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""aggregate var_samp on columns"""
type orders_var_samp_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""aggregate variance on columns"""
type orders_variance_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
columns and relationships of "programs"
"""
type programs {
  created_at: timestamp!
  deployed_at: timestamp
  program_acct: String!
  program_name: String!
  version: Int!
}

"""
aggregated selection of "programs"
"""
type programs_aggregate {
  aggregate: programs_aggregate_fields
  nodes: [programs!]!
}

"""
aggregate fields of "programs"
"""
type programs_aggregate_fields {
  avg: programs_avg_fields
  count(columns: [programs_select_column!], distinct: Boolean): Int!
  max: programs_max_fields
  min: programs_min_fields
  stddev: programs_stddev_fields
  stddev_pop: programs_stddev_pop_fields
  stddev_samp: programs_stddev_samp_fields
  sum: programs_sum_fields
  var_pop: programs_var_pop_fields
  var_samp: programs_var_samp_fields
  variance: programs_variance_fields
}

"""aggregate avg on columns"""
type programs_avg_fields {
  version: Float
}

"""
Boolean expression to filter rows from the table "programs". All fields are combined with a logical 'AND'.
"""
input programs_bool_exp {
  _and: [programs_bool_exp!]
  _not: programs_bool_exp
  _or: [programs_bool_exp!]
  created_at: timestamp_comparison_exp
  deployed_at: timestamp_comparison_exp
  program_acct: String_comparison_exp
  program_name: String_comparison_exp
  version: Int_comparison_exp
}

"""
unique or primary key constraints on table "programs"
"""
enum programs_constraint {
  """
  unique or primary key constraint on columns "version", "program_acct"
  """
  program_version

  """
  unique or primary key constraint on columns "program_acct"
  """
  programs_pkey
}

"""
input type for incrementing numeric columns in table "programs"
"""
input programs_inc_input {
  version: Int
}

"""
input type for inserting data into table "programs"
"""
input programs_insert_input {
  created_at: timestamp
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: Int
}

"""aggregate max on columns"""
type programs_max_fields {
  created_at: timestamp
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: Int
}

"""aggregate min on columns"""
type programs_min_fields {
  created_at: timestamp
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: Int
}

"""
response of any mutation on the table "programs"
"""
type programs_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [programs!]!
}

"""
on_conflict condition type for table "programs"
"""
input programs_on_conflict {
  constraint: programs_constraint!
  update_columns: [programs_update_column!]! = []
  where: programs_bool_exp
}

"""Ordering options when selecting data from "programs"."""
input programs_order_by {
  created_at: order_by
  deployed_at: order_by
  program_acct: order_by
  program_name: order_by
  version: order_by
}

"""primary key columns input for table: programs"""
input programs_pk_columns_input {
  program_acct: String!
}

"""
select columns of table "programs"
"""
enum programs_select_column {
  """column name"""
  created_at

  """column name"""
  deployed_at

  """column name"""
  program_acct

  """column name"""
  program_name

  """column name"""
  version
}

"""
input type for updating data in table "programs"
"""
input programs_set_input {
  created_at: timestamp
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: Int
}

"""aggregate stddev on columns"""
type programs_stddev_fields {
  version: Float
}

"""aggregate stddev_pop on columns"""
type programs_stddev_pop_fields {
  version: Float
}

"""aggregate stddev_samp on columns"""
type programs_stddev_samp_fields {
  version: Float
}

"""
Streaming cursor of the table "programs"
"""
input programs_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: programs_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input programs_stream_cursor_value_input {
  created_at: timestamp
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: Int
}

"""aggregate sum on columns"""
type programs_sum_fields {
  version: Int
}

"""
update columns of table "programs"
"""
enum programs_update_column {
  """column name"""
  created_at

  """column name"""
  deployed_at

  """column name"""
  program_acct

  """column name"""
  program_name

  """column name"""
  version
}

input programs_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: programs_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: programs_set_input

  """filter the rows which have to be updated"""
  where: programs_bool_exp!
}

"""aggregate var_pop on columns"""
type programs_var_pop_fields {
  version: Float
}

"""aggregate var_samp on columns"""
type programs_var_samp_fields {
  version: Float
}

"""aggregate variance on columns"""
type programs_variance_fields {
  version: Float
}

"""
columns and relationships of "proposal_details"
"""
type proposal_details {
  categories(
    """JSON select path"""
    path: String
  ): jsonb
  content: String
  description: String
  proposal_acct: String
  proposal_id: bigint!
  title: String
}

"""
aggregated selection of "proposal_details"
"""
type proposal_details_aggregate {
  aggregate: proposal_details_aggregate_fields
  nodes: [proposal_details!]!
}

"""
aggregate fields of "proposal_details"
"""
type proposal_details_aggregate_fields {
  avg: proposal_details_avg_fields
  count(columns: [proposal_details_select_column!], distinct: Boolean): Int!
  max: proposal_details_max_fields
  min: proposal_details_min_fields
  stddev: proposal_details_stddev_fields
  stddev_pop: proposal_details_stddev_pop_fields
  stddev_samp: proposal_details_stddev_samp_fields
  sum: proposal_details_sum_fields
  var_pop: proposal_details_var_pop_fields
  var_samp: proposal_details_var_samp_fields
  variance: proposal_details_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input proposal_details_append_input {
  categories: jsonb
}

"""aggregate avg on columns"""
type proposal_details_avg_fields {
  proposal_id: Float
}

"""
Boolean expression to filter rows from the table "proposal_details". All fields are combined with a logical 'AND'.
"""
input proposal_details_bool_exp {
  _and: [proposal_details_bool_exp!]
  _not: proposal_details_bool_exp
  _or: [proposal_details_bool_exp!]
  categories: jsonb_comparison_exp
  content: String_comparison_exp
  description: String_comparison_exp
  proposal_acct: String_comparison_exp
  proposal_id: bigint_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "proposal_details"
"""
enum proposal_details_constraint {
  """
  unique or primary key constraint on columns "proposal_id"
  """
  proposal_details_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input proposal_details_delete_at_path_input {
  categories: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input proposal_details_delete_elem_input {
  categories: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input proposal_details_delete_key_input {
  categories: String
}

"""
input type for incrementing numeric columns in table "proposal_details"
"""
input proposal_details_inc_input {
  proposal_id: bigint
}

"""
input type for inserting data into table "proposal_details"
"""
input proposal_details_insert_input {
  categories: jsonb
  content: String
  description: String
  proposal_acct: String
  proposal_id: bigint
  title: String
}

"""aggregate max on columns"""
type proposal_details_max_fields {
  content: String
  description: String
  proposal_acct: String
  proposal_id: bigint
  title: String
}

"""aggregate min on columns"""
type proposal_details_min_fields {
  content: String
  description: String
  proposal_acct: String
  proposal_id: bigint
  title: String
}

"""
response of any mutation on the table "proposal_details"
"""
type proposal_details_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [proposal_details!]!
}

"""
on_conflict condition type for table "proposal_details"
"""
input proposal_details_on_conflict {
  constraint: proposal_details_constraint!
  update_columns: [proposal_details_update_column!]! = []
  where: proposal_details_bool_exp
}

"""Ordering options when selecting data from "proposal_details"."""
input proposal_details_order_by {
  categories: order_by
  content: order_by
  description: order_by
  proposal_acct: order_by
  proposal_id: order_by
  title: order_by
}

"""primary key columns input for table: proposal_details"""
input proposal_details_pk_columns_input {
  proposal_id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input proposal_details_prepend_input {
  categories: jsonb
}

"""
select columns of table "proposal_details"
"""
enum proposal_details_select_column {
  """column name"""
  categories

  """column name"""
  content

  """column name"""
  description

  """column name"""
  proposal_acct

  """column name"""
  proposal_id

  """column name"""
  title
}

"""
input type for updating data in table "proposal_details"
"""
input proposal_details_set_input {
  categories: jsonb
  content: String
  description: String
  proposal_acct: String
  proposal_id: bigint
  title: String
}

"""aggregate stddev on columns"""
type proposal_details_stddev_fields {
  proposal_id: Float
}

"""aggregate stddev_pop on columns"""
type proposal_details_stddev_pop_fields {
  proposal_id: Float
}

"""aggregate stddev_samp on columns"""
type proposal_details_stddev_samp_fields {
  proposal_id: Float
}

"""
Streaming cursor of the table "proposal_details"
"""
input proposal_details_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: proposal_details_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input proposal_details_stream_cursor_value_input {
  categories: jsonb
  content: String
  description: String
  proposal_acct: String
  proposal_id: bigint
  title: String
}

"""aggregate sum on columns"""
type proposal_details_sum_fields {
  proposal_id: bigint
}

"""
update columns of table "proposal_details"
"""
enum proposal_details_update_column {
  """column name"""
  categories

  """column name"""
  content

  """column name"""
  description

  """column name"""
  proposal_acct

  """column name"""
  proposal_id

  """column name"""
  title
}

input proposal_details_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: proposal_details_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: proposal_details_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: proposal_details_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: proposal_details_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: proposal_details_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: proposal_details_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: proposal_details_set_input

  """filter the rows which have to be updated"""
  where: proposal_details_bool_exp!
}

"""aggregate var_pop on columns"""
type proposal_details_var_pop_fields {
  proposal_id: Float
}

"""aggregate var_samp on columns"""
type proposal_details_var_samp_fields {
  proposal_id: Float
}

"""aggregate variance on columns"""
type proposal_details_variance_fields {
  proposal_id: Float
}

"""
columns and relationships of "proposals"
"""
type proposals {
  autocrat_version: float8!
  dao_acct: String!
  description_url: String
  initial_slot: bigint!
  proposal_acct: String!
  proposal_num: bigint!
  proposer_acct: String!
  status: String!
  updated_at: timestamp!
}

"""
aggregated selection of "proposals"
"""
type proposals_aggregate {
  aggregate: proposals_aggregate_fields
  nodes: [proposals!]!
}

"""
aggregate fields of "proposals"
"""
type proposals_aggregate_fields {
  avg: proposals_avg_fields
  count(columns: [proposals_select_column!], distinct: Boolean): Int!
  max: proposals_max_fields
  min: proposals_min_fields
  stddev: proposals_stddev_fields
  stddev_pop: proposals_stddev_pop_fields
  stddev_samp: proposals_stddev_samp_fields
  sum: proposals_sum_fields
  var_pop: proposals_var_pop_fields
  var_samp: proposals_var_samp_fields
  variance: proposals_variance_fields
}

"""aggregate avg on columns"""
type proposals_avg_fields {
  autocrat_version: Float
  initial_slot: Float
  proposal_num: Float
}

"""
Boolean expression to filter rows from the table "proposals". All fields are combined with a logical 'AND'.
"""
input proposals_bool_exp {
  _and: [proposals_bool_exp!]
  _not: proposals_bool_exp
  _or: [proposals_bool_exp!]
  autocrat_version: float8_comparison_exp
  dao_acct: String_comparison_exp
  description_url: String_comparison_exp
  initial_slot: bigint_comparison_exp
  proposal_acct: String_comparison_exp
  proposal_num: bigint_comparison_exp
  proposer_acct: String_comparison_exp
  status: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "proposals"
"""
enum proposals_constraint {
  """
  unique or primary key constraint on columns "proposal_acct"
  """
  proposals_pkey
}

"""
input type for incrementing numeric columns in table "proposals"
"""
input proposals_inc_input {
  autocrat_version: float8
  initial_slot: bigint
  proposal_num: bigint
}

"""
input type for inserting data into table "proposals"
"""
input proposals_insert_input {
  autocrat_version: float8
  dao_acct: String
  description_url: String
  initial_slot: bigint
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  status: String
  updated_at: timestamp
}

"""aggregate max on columns"""
type proposals_max_fields {
  autocrat_version: float8
  dao_acct: String
  description_url: String
  initial_slot: bigint
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  status: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type proposals_min_fields {
  autocrat_version: float8
  dao_acct: String
  description_url: String
  initial_slot: bigint
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  status: String
  updated_at: timestamp
}

"""
response of any mutation on the table "proposals"
"""
type proposals_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [proposals!]!
}

"""
on_conflict condition type for table "proposals"
"""
input proposals_on_conflict {
  constraint: proposals_constraint!
  update_columns: [proposals_update_column!]! = []
  where: proposals_bool_exp
}

"""Ordering options when selecting data from "proposals"."""
input proposals_order_by {
  autocrat_version: order_by
  dao_acct: order_by
  description_url: order_by
  initial_slot: order_by
  proposal_acct: order_by
  proposal_num: order_by
  proposer_acct: order_by
  status: order_by
  updated_at: order_by
}

"""primary key columns input for table: proposals"""
input proposals_pk_columns_input {
  proposal_acct: String!
}

"""
select columns of table "proposals"
"""
enum proposals_select_column {
  """column name"""
  autocrat_version

  """column name"""
  dao_acct

  """column name"""
  description_url

  """column name"""
  initial_slot

  """column name"""
  proposal_acct

  """column name"""
  proposal_num

  """column name"""
  proposer_acct

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "proposals"
"""
input proposals_set_input {
  autocrat_version: float8
  dao_acct: String
  description_url: String
  initial_slot: bigint
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  status: String
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type proposals_stddev_fields {
  autocrat_version: Float
  initial_slot: Float
  proposal_num: Float
}

"""aggregate stddev_pop on columns"""
type proposals_stddev_pop_fields {
  autocrat_version: Float
  initial_slot: Float
  proposal_num: Float
}

"""aggregate stddev_samp on columns"""
type proposals_stddev_samp_fields {
  autocrat_version: Float
  initial_slot: Float
  proposal_num: Float
}

"""
Streaming cursor of the table "proposals"
"""
input proposals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: proposals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input proposals_stream_cursor_value_input {
  autocrat_version: float8
  dao_acct: String
  description_url: String
  initial_slot: bigint
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  status: String
  updated_at: timestamp
}

"""aggregate sum on columns"""
type proposals_sum_fields {
  autocrat_version: float8
  initial_slot: bigint
  proposal_num: bigint
}

"""
update columns of table "proposals"
"""
enum proposals_update_column {
  """column name"""
  autocrat_version

  """column name"""
  dao_acct

  """column name"""
  description_url

  """column name"""
  initial_slot

  """column name"""
  proposal_acct

  """column name"""
  proposal_num

  """column name"""
  proposer_acct

  """column name"""
  status

  """column name"""
  updated_at
}

input proposals_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: proposals_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: proposals_set_input

  """filter the rows which have to be updated"""
  where: proposals_bool_exp!
}

"""aggregate var_pop on columns"""
type proposals_var_pop_fields {
  autocrat_version: Float
  initial_slot: Float
  proposal_num: Float
}

"""aggregate var_samp on columns"""
type proposals_var_samp_fields {
  autocrat_version: Float
  initial_slot: Float
  proposal_num: Float
}

"""aggregate variance on columns"""
type proposals_variance_fields {
  autocrat_version: Float
  initial_slot: Float
  proposal_num: Float
}

type query_root {
  """
  fetch data from the table: "candles"
  """
  candles(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): [candles!]!

  """
  fetch aggregated fields from the table: "candles"
  """
  candles_aggregate(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): candles_aggregate!

  """fetch data from the table: "candles" using primary key columns"""
  candles_by_pk(candle_duration: Int!, market_acct: String!, timestamp: timestamp!): candles

  """
  fetch data from the table: "dao_details"
  """
  dao_details(
    """distinct select on columns"""
    distinct_on: [dao_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dao_details_order_by!]

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): [dao_details!]!

  """
  fetch aggregated fields from the table: "dao_details"
  """
  dao_details_aggregate(
    """distinct select on columns"""
    distinct_on: [dao_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dao_details_order_by!]

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): dao_details_aggregate!

  """fetch data from the table: "dao_details" using primary key columns"""
  dao_details_by_pk(dao_id: bigint!): dao_details

  """
  fetch data from the table: "daos"
  """
  daos(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """
  fetch aggregated fields from the table: "daos"
  """
  daos_aggregate(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): daos_aggregate!

  """fetch data from the table: "daos" using primary key columns"""
  daos_by_pk(dao_acct: String!): daos

  """
  fetch data from the table: "markets"
  """
  markets(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """
  fetch aggregated fields from the table: "markets"
  """
  markets_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!

  """fetch data from the table: "markets" using primary key columns"""
  markets_by_pk(market_acct: String!): markets

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """
  fetch aggregated fields from the table: "orders"
  """
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(order_tx_sig: String!): orders

  """
  fetch data from the table: "programs"
  """
  programs(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """
  fetch aggregated fields from the table: "programs"
  """
  programs_aggregate(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): programs_aggregate!

  """fetch data from the table: "programs" using primary key columns"""
  programs_by_pk(program_acct: String!): programs

  """
  fetch data from the table: "proposal_details"
  """
  proposal_details(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): [proposal_details!]!

  """
  fetch aggregated fields from the table: "proposal_details"
  """
  proposal_details_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): proposal_details_aggregate!

  """
  fetch data from the table: "proposal_details" using primary key columns
  """
  proposal_details_by_pk(proposal_id: bigint!): proposal_details

  """
  fetch data from the table: "proposals"
  """
  proposals(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """
  fetch aggregated fields from the table: "proposals"
  """
  proposals_aggregate(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): proposals_aggregate!

  """fetch data from the table: "proposals" using primary key columns"""
  proposals_by_pk(proposal_acct: String!): proposals

  """
  fetch data from the table: "token_accts"
  """
  token_accts(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): [token_accts!]!

  """
  fetch aggregated fields from the table: "token_accts"
  """
  token_accts_aggregate(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): token_accts_aggregate!

  """fetch data from the table: "token_accts" using primary key columns"""
  token_accts_by_pk(token_acct: String!): token_accts

  """
  fetch data from the table: "tokens"
  """
  tokens(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """
  fetch aggregated fields from the table: "tokens"
  """
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): tokens_aggregate!

  """fetch data from the table: "tokens" using primary key columns"""
  tokens_by_pk(mint_acct: String!): tokens

  """
  fetch data from the table: "transactions"
  """
  transactions(
    """distinct select on columns"""
    distinct_on: [transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transactions_order_by!]

    """filter the rows returned"""
    where: transactions_bool_exp
  ): [transactions!]!

  """
  fetch aggregated fields from the table: "transactions"
  """
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transactions_order_by!]

    """filter the rows returned"""
    where: transactions_bool_exp
  ): transactions_aggregate!

  """fetch data from the table: "transactions" using primary key columns"""
  transactions_by_pk(tx_sig: String!): transactions

  """
  fetch data from the table: "twaps"
  """
  twaps(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): [twaps!]!

  """
  fetch aggregated fields from the table: "twaps"
  """
  twaps_aggregate(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): twaps_aggregate!

  """fetch data from the table: "twaps" using primary key columns"""
  twaps_by_pk(market_acct: String!, updated_slot: bigint!): twaps
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type subscription_root {
  """
  fetch data from the table: "candles"
  """
  candles(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): [candles!]!

  """
  fetch aggregated fields from the table: "candles"
  """
  candles_aggregate(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): candles_aggregate!

  """fetch data from the table: "candles" using primary key columns"""
  candles_by_pk(candle_duration: Int!, market_acct: String!, timestamp: timestamp!): candles

  """
  fetch data from the table in a streaming manner: "candles"
  """
  candles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [candles_stream_cursor_input]!

    """filter the rows returned"""
    where: candles_bool_exp
  ): [candles!]!

  """
  fetch data from the table: "dao_details"
  """
  dao_details(
    """distinct select on columns"""
    distinct_on: [dao_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dao_details_order_by!]

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): [dao_details!]!

  """
  fetch aggregated fields from the table: "dao_details"
  """
  dao_details_aggregate(
    """distinct select on columns"""
    distinct_on: [dao_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dao_details_order_by!]

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): dao_details_aggregate!

  """fetch data from the table: "dao_details" using primary key columns"""
  dao_details_by_pk(dao_id: bigint!): dao_details

  """
  fetch data from the table in a streaming manner: "dao_details"
  """
  dao_details_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [dao_details_stream_cursor_input]!

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): [dao_details!]!

  """
  fetch data from the table: "daos"
  """
  daos(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """
  fetch aggregated fields from the table: "daos"
  """
  daos_aggregate(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): daos_aggregate!

  """fetch data from the table: "daos" using primary key columns"""
  daos_by_pk(dao_acct: String!): daos

  """
  fetch data from the table in a streaming manner: "daos"
  """
  daos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [daos_stream_cursor_input]!

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """
  fetch data from the table: "markets"
  """
  markets(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """
  fetch aggregated fields from the table: "markets"
  """
  markets_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!

  """fetch data from the table: "markets" using primary key columns"""
  markets_by_pk(market_acct: String!): markets

  """
  fetch data from the table in a streaming manner: "markets"
  """
  markets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [markets_stream_cursor_input]!

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """
  fetch aggregated fields from the table: "orders"
  """
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(order_tx_sig: String!): orders

  """
  fetch data from the table in a streaming manner: "orders"
  """
  orders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [orders_stream_cursor_input]!

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """
  fetch data from the table: "programs"
  """
  programs(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """
  fetch aggregated fields from the table: "programs"
  """
  programs_aggregate(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): programs_aggregate!

  """fetch data from the table: "programs" using primary key columns"""
  programs_by_pk(program_acct: String!): programs

  """
  fetch data from the table in a streaming manner: "programs"
  """
  programs_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [programs_stream_cursor_input]!

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """
  fetch data from the table: "proposal_details"
  """
  proposal_details(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): [proposal_details!]!

  """
  fetch aggregated fields from the table: "proposal_details"
  """
  proposal_details_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): proposal_details_aggregate!

  """
  fetch data from the table: "proposal_details" using primary key columns
  """
  proposal_details_by_pk(proposal_id: bigint!): proposal_details

  """
  fetch data from the table in a streaming manner: "proposal_details"
  """
  proposal_details_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [proposal_details_stream_cursor_input]!

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): [proposal_details!]!

  """
  fetch data from the table: "proposals"
  """
  proposals(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """
  fetch aggregated fields from the table: "proposals"
  """
  proposals_aggregate(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): proposals_aggregate!

  """fetch data from the table: "proposals" using primary key columns"""
  proposals_by_pk(proposal_acct: String!): proposals

  """
  fetch data from the table in a streaming manner: "proposals"
  """
  proposals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [proposals_stream_cursor_input]!

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """
  fetch data from the table: "token_accts"
  """
  token_accts(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): [token_accts!]!

  """
  fetch aggregated fields from the table: "token_accts"
  """
  token_accts_aggregate(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): token_accts_aggregate!

  """fetch data from the table: "token_accts" using primary key columns"""
  token_accts_by_pk(token_acct: String!): token_accts

  """
  fetch data from the table in a streaming manner: "token_accts"
  """
  token_accts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_accts_stream_cursor_input]!

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): [token_accts!]!

  """
  fetch data from the table: "tokens"
  """
  tokens(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """
  fetch aggregated fields from the table: "tokens"
  """
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): tokens_aggregate!

  """fetch data from the table: "tokens" using primary key columns"""
  tokens_by_pk(mint_acct: String!): tokens

  """
  fetch data from the table in a streaming manner: "tokens"
  """
  tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tokens_stream_cursor_input]!

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """
  fetch data from the table: "transactions"
  """
  transactions(
    """distinct select on columns"""
    distinct_on: [transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transactions_order_by!]

    """filter the rows returned"""
    where: transactions_bool_exp
  ): [transactions!]!

  """
  fetch aggregated fields from the table: "transactions"
  """
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transactions_order_by!]

    """filter the rows returned"""
    where: transactions_bool_exp
  ): transactions_aggregate!

  """fetch data from the table: "transactions" using primary key columns"""
  transactions_by_pk(tx_sig: String!): transactions

  """
  fetch data from the table in a streaming manner: "transactions"
  """
  transactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [transactions_stream_cursor_input]!

    """filter the rows returned"""
    where: transactions_bool_exp
  ): [transactions!]!

  """
  fetch data from the table: "twaps"
  """
  twaps(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): [twaps!]!

  """
  fetch aggregated fields from the table: "twaps"
  """
  twaps_aggregate(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): twaps_aggregate!

  """fetch data from the table: "twaps" using primary key columns"""
  twaps_by_pk(market_acct: String!, updated_slot: bigint!): twaps

  """
  fetch data from the table in a streaming manner: "twaps"
  """
  twaps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [twaps_stream_cursor_input]!

    """filter the rows returned"""
    where: twaps_bool_exp
  ): [twaps!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "token_accts"
"""
type token_accts {
  amount: bigint!
  mint_acct: String!
  owner_acct: String!
  token_acct: String!
  updated_at: timestamp!
}

"""
aggregated selection of "token_accts"
"""
type token_accts_aggregate {
  aggregate: token_accts_aggregate_fields
  nodes: [token_accts!]!
}

"""
aggregate fields of "token_accts"
"""
type token_accts_aggregate_fields {
  avg: token_accts_avg_fields
  count(columns: [token_accts_select_column!], distinct: Boolean): Int!
  max: token_accts_max_fields
  min: token_accts_min_fields
  stddev: token_accts_stddev_fields
  stddev_pop: token_accts_stddev_pop_fields
  stddev_samp: token_accts_stddev_samp_fields
  sum: token_accts_sum_fields
  var_pop: token_accts_var_pop_fields
  var_samp: token_accts_var_samp_fields
  variance: token_accts_variance_fields
}

"""aggregate avg on columns"""
type token_accts_avg_fields {
  amount: Float
}

"""
Boolean expression to filter rows from the table "token_accts". All fields are combined with a logical 'AND'.
"""
input token_accts_bool_exp {
  _and: [token_accts_bool_exp!]
  _not: token_accts_bool_exp
  _or: [token_accts_bool_exp!]
  amount: bigint_comparison_exp
  mint_acct: String_comparison_exp
  owner_acct: String_comparison_exp
  token_acct: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "token_accts"
"""
enum token_accts_constraint {
  """
  unique or primary key constraint on columns "token_acct"
  """
  token_accts_pkey
}

"""
input type for incrementing numeric columns in table "token_accts"
"""
input token_accts_inc_input {
  amount: bigint
}

"""
input type for inserting data into table "token_accts"
"""
input token_accts_insert_input {
  amount: bigint
  mint_acct: String
  owner_acct: String
  token_acct: String
  updated_at: timestamp
}

"""aggregate max on columns"""
type token_accts_max_fields {
  amount: bigint
  mint_acct: String
  owner_acct: String
  token_acct: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type token_accts_min_fields {
  amount: bigint
  mint_acct: String
  owner_acct: String
  token_acct: String
  updated_at: timestamp
}

"""
response of any mutation on the table "token_accts"
"""
type token_accts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_accts!]!
}

"""
on_conflict condition type for table "token_accts"
"""
input token_accts_on_conflict {
  constraint: token_accts_constraint!
  update_columns: [token_accts_update_column!]! = []
  where: token_accts_bool_exp
}

"""Ordering options when selecting data from "token_accts"."""
input token_accts_order_by {
  amount: order_by
  mint_acct: order_by
  owner_acct: order_by
  token_acct: order_by
  updated_at: order_by
}

"""primary key columns input for table: token_accts"""
input token_accts_pk_columns_input {
  token_acct: String!
}

"""
select columns of table "token_accts"
"""
enum token_accts_select_column {
  """column name"""
  amount

  """column name"""
  mint_acct

  """column name"""
  owner_acct

  """column name"""
  token_acct

  """column name"""
  updated_at
}

"""
input type for updating data in table "token_accts"
"""
input token_accts_set_input {
  amount: bigint
  mint_acct: String
  owner_acct: String
  token_acct: String
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type token_accts_stddev_fields {
  amount: Float
}

"""aggregate stddev_pop on columns"""
type token_accts_stddev_pop_fields {
  amount: Float
}

"""aggregate stddev_samp on columns"""
type token_accts_stddev_samp_fields {
  amount: Float
}

"""
Streaming cursor of the table "token_accts"
"""
input token_accts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_accts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_accts_stream_cursor_value_input {
  amount: bigint
  mint_acct: String
  owner_acct: String
  token_acct: String
  updated_at: timestamp
}

"""aggregate sum on columns"""
type token_accts_sum_fields {
  amount: bigint
}

"""
update columns of table "token_accts"
"""
enum token_accts_update_column {
  """column name"""
  amount

  """column name"""
  mint_acct

  """column name"""
  owner_acct

  """column name"""
  token_acct

  """column name"""
  updated_at
}

input token_accts_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_accts_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_accts_set_input

  """filter the rows which have to be updated"""
  where: token_accts_bool_exp!
}

"""aggregate var_pop on columns"""
type token_accts_var_pop_fields {
  amount: Float
}

"""aggregate var_samp on columns"""
type token_accts_var_samp_fields {
  amount: Float
}

"""aggregate variance on columns"""
type token_accts_variance_fields {
  amount: Float
}

"""
columns and relationships of "tokens"
"""
type tokens {
  decimals: smallint!
  mint_acct: String!
  name: String!
  supply: bigint!
  symbol: String!
  updated_at: timestamp!
}

"""
aggregated selection of "tokens"
"""
type tokens_aggregate {
  aggregate: tokens_aggregate_fields
  nodes: [tokens!]!
}

"""
aggregate fields of "tokens"
"""
type tokens_aggregate_fields {
  avg: tokens_avg_fields
  count(columns: [tokens_select_column!], distinct: Boolean): Int!
  max: tokens_max_fields
  min: tokens_min_fields
  stddev: tokens_stddev_fields
  stddev_pop: tokens_stddev_pop_fields
  stddev_samp: tokens_stddev_samp_fields
  sum: tokens_sum_fields
  var_pop: tokens_var_pop_fields
  var_samp: tokens_var_samp_fields
  variance: tokens_variance_fields
}

"""aggregate avg on columns"""
type tokens_avg_fields {
  decimals: Float
  supply: Float
}

"""
Boolean expression to filter rows from the table "tokens". All fields are combined with a logical 'AND'.
"""
input tokens_bool_exp {
  _and: [tokens_bool_exp!]
  _not: tokens_bool_exp
  _or: [tokens_bool_exp!]
  decimals: smallint_comparison_exp
  mint_acct: String_comparison_exp
  name: String_comparison_exp
  supply: bigint_comparison_exp
  symbol: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "tokens"
"""
enum tokens_constraint {
  """
  unique or primary key constraint on columns "mint_acct"
  """
  tokens_pkey
}

"""
input type for incrementing numeric columns in table "tokens"
"""
input tokens_inc_input {
  decimals: smallint
  supply: bigint
}

"""
input type for inserting data into table "tokens"
"""
input tokens_insert_input {
  decimals: smallint
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamp
}

"""aggregate max on columns"""
type tokens_max_fields {
  decimals: smallint
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamp
}

"""aggregate min on columns"""
type tokens_min_fields {
  decimals: smallint
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamp
}

"""
response of any mutation on the table "tokens"
"""
type tokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tokens!]!
}

"""
on_conflict condition type for table "tokens"
"""
input tokens_on_conflict {
  constraint: tokens_constraint!
  update_columns: [tokens_update_column!]! = []
  where: tokens_bool_exp
}

"""Ordering options when selecting data from "tokens"."""
input tokens_order_by {
  decimals: order_by
  mint_acct: order_by
  name: order_by
  supply: order_by
  symbol: order_by
  updated_at: order_by
}

"""primary key columns input for table: tokens"""
input tokens_pk_columns_input {
  mint_acct: String!
}

"""
select columns of table "tokens"
"""
enum tokens_select_column {
  """column name"""
  decimals

  """column name"""
  mint_acct

  """column name"""
  name

  """column name"""
  supply

  """column name"""
  symbol

  """column name"""
  updated_at
}

"""
input type for updating data in table "tokens"
"""
input tokens_set_input {
  decimals: smallint
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamp
}

"""aggregate stddev on columns"""
type tokens_stddev_fields {
  decimals: Float
  supply: Float
}

"""aggregate stddev_pop on columns"""
type tokens_stddev_pop_fields {
  decimals: Float
  supply: Float
}

"""aggregate stddev_samp on columns"""
type tokens_stddev_samp_fields {
  decimals: Float
  supply: Float
}

"""
Streaming cursor of the table "tokens"
"""
input tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tokens_stream_cursor_value_input {
  decimals: smallint
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamp
}

"""aggregate sum on columns"""
type tokens_sum_fields {
  decimals: smallint
  supply: bigint
}

"""
update columns of table "tokens"
"""
enum tokens_update_column {
  """column name"""
  decimals

  """column name"""
  mint_acct

  """column name"""
  name

  """column name"""
  supply

  """column name"""
  symbol

  """column name"""
  updated_at
}

input tokens_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tokens_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tokens_set_input

  """filter the rows which have to be updated"""
  where: tokens_bool_exp!
}

"""aggregate var_pop on columns"""
type tokens_var_pop_fields {
  decimals: Float
  supply: Float
}

"""aggregate var_samp on columns"""
type tokens_var_samp_fields {
  decimals: Float
  supply: Float
}

"""aggregate variance on columns"""
type tokens_variance_fields {
  decimals: Float
  supply: Float
}

"""
columns and relationships of "transactions"
"""
type transactions {
  block_time: timestamp!
  failed: Boolean!
  payload: String!
  serializer_logic_version: smallint!
  slot: bigint!
  tx_sig: String!
}

"""
aggregated selection of "transactions"
"""
type transactions_aggregate {
  aggregate: transactions_aggregate_fields
  nodes: [transactions!]!
}

"""
aggregate fields of "transactions"
"""
type transactions_aggregate_fields {
  avg: transactions_avg_fields
  count(columns: [transactions_select_column!], distinct: Boolean): Int!
  max: transactions_max_fields
  min: transactions_min_fields
  stddev: transactions_stddev_fields
  stddev_pop: transactions_stddev_pop_fields
  stddev_samp: transactions_stddev_samp_fields
  sum: transactions_sum_fields
  var_pop: transactions_var_pop_fields
  var_samp: transactions_var_samp_fields
  variance: transactions_variance_fields
}

"""aggregate avg on columns"""
type transactions_avg_fields {
  serializer_logic_version: Float
  slot: Float
}

"""
Boolean expression to filter rows from the table "transactions". All fields are combined with a logical 'AND'.
"""
input transactions_bool_exp {
  _and: [transactions_bool_exp!]
  _not: transactions_bool_exp
  _or: [transactions_bool_exp!]
  block_time: timestamp_comparison_exp
  failed: Boolean_comparison_exp
  payload: String_comparison_exp
  serializer_logic_version: smallint_comparison_exp
  slot: bigint_comparison_exp
  tx_sig: String_comparison_exp
}

"""
unique or primary key constraints on table "transactions"
"""
enum transactions_constraint {
  """
  unique or primary key constraint on columns "tx_sig"
  """
  transactions_pkey
}

"""
input type for incrementing numeric columns in table "transactions"
"""
input transactions_inc_input {
  serializer_logic_version: smallint
  slot: bigint
}

"""
input type for inserting data into table "transactions"
"""
input transactions_insert_input {
  block_time: timestamp
  failed: Boolean
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""aggregate max on columns"""
type transactions_max_fields {
  block_time: timestamp
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""aggregate min on columns"""
type transactions_min_fields {
  block_time: timestamp
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""
response of any mutation on the table "transactions"
"""
type transactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [transactions!]!
}

"""
on_conflict condition type for table "transactions"
"""
input transactions_on_conflict {
  constraint: transactions_constraint!
  update_columns: [transactions_update_column!]! = []
  where: transactions_bool_exp
}

"""Ordering options when selecting data from "transactions"."""
input transactions_order_by {
  block_time: order_by
  failed: order_by
  payload: order_by
  serializer_logic_version: order_by
  slot: order_by
  tx_sig: order_by
}

"""primary key columns input for table: transactions"""
input transactions_pk_columns_input {
  tx_sig: String!
}

"""
select columns of table "transactions"
"""
enum transactions_select_column {
  """column name"""
  block_time

  """column name"""
  failed

  """column name"""
  payload

  """column name"""
  serializer_logic_version

  """column name"""
  slot

  """column name"""
  tx_sig
}

"""
input type for updating data in table "transactions"
"""
input transactions_set_input {
  block_time: timestamp
  failed: Boolean
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""aggregate stddev on columns"""
type transactions_stddev_fields {
  serializer_logic_version: Float
  slot: Float
}

"""aggregate stddev_pop on columns"""
type transactions_stddev_pop_fields {
  serializer_logic_version: Float
  slot: Float
}

"""aggregate stddev_samp on columns"""
type transactions_stddev_samp_fields {
  serializer_logic_version: Float
  slot: Float
}

"""
Streaming cursor of the table "transactions"
"""
input transactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: transactions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input transactions_stream_cursor_value_input {
  block_time: timestamp
  failed: Boolean
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""aggregate sum on columns"""
type transactions_sum_fields {
  serializer_logic_version: smallint
  slot: bigint
}

"""
update columns of table "transactions"
"""
enum transactions_update_column {
  """column name"""
  block_time

  """column name"""
  failed

  """column name"""
  payload

  """column name"""
  serializer_logic_version

  """column name"""
  slot

  """column name"""
  tx_sig
}

input transactions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: transactions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: transactions_set_input

  """filter the rows which have to be updated"""
  where: transactions_bool_exp!
}

"""aggregate var_pop on columns"""
type transactions_var_pop_fields {
  serializer_logic_version: Float
  slot: Float
}

"""aggregate var_samp on columns"""
type transactions_var_samp_fields {
  serializer_logic_version: Float
  slot: Float
}

"""aggregate variance on columns"""
type transactions_variance_fields {
  serializer_logic_version: Float
  slot: Float
}

"""
columns and relationships of "twaps"
"""
type twaps {
  market_acct: String!
  observation_agg: numeric!
  proposal_acct: String!
  token_amount: bigint!
  updated_slot: bigint!
}

"""
aggregated selection of "twaps"
"""
type twaps_aggregate {
  aggregate: twaps_aggregate_fields
  nodes: [twaps!]!
}

"""
aggregate fields of "twaps"
"""
type twaps_aggregate_fields {
  avg: twaps_avg_fields
  count(columns: [twaps_select_column!], distinct: Boolean): Int!
  max: twaps_max_fields
  min: twaps_min_fields
  stddev: twaps_stddev_fields
  stddev_pop: twaps_stddev_pop_fields
  stddev_samp: twaps_stddev_samp_fields
  sum: twaps_sum_fields
  var_pop: twaps_var_pop_fields
  var_samp: twaps_var_samp_fields
  variance: twaps_variance_fields
}

"""aggregate avg on columns"""
type twaps_avg_fields {
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
Boolean expression to filter rows from the table "twaps". All fields are combined with a logical 'AND'.
"""
input twaps_bool_exp {
  _and: [twaps_bool_exp!]
  _not: twaps_bool_exp
  _or: [twaps_bool_exp!]
  market_acct: String_comparison_exp
  observation_agg: numeric_comparison_exp
  proposal_acct: String_comparison_exp
  token_amount: bigint_comparison_exp
  updated_slot: bigint_comparison_exp
}

"""
unique or primary key constraints on table "twaps"
"""
enum twaps_constraint {
  """
  unique or primary key constraint on columns "updated_slot", "market_acct"
  """
  twaps_market_acct_updated_slot_pk
}

"""
input type for incrementing numeric columns in table "twaps"
"""
input twaps_inc_input {
  observation_agg: numeric
  token_amount: bigint
  updated_slot: bigint
}

"""
input type for inserting data into table "twaps"
"""
input twaps_insert_input {
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""aggregate max on columns"""
type twaps_max_fields {
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""aggregate min on columns"""
type twaps_min_fields {
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""
response of any mutation on the table "twaps"
"""
type twaps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [twaps!]!
}

"""
on_conflict condition type for table "twaps"
"""
input twaps_on_conflict {
  constraint: twaps_constraint!
  update_columns: [twaps_update_column!]! = []
  where: twaps_bool_exp
}

"""Ordering options when selecting data from "twaps"."""
input twaps_order_by {
  market_acct: order_by
  observation_agg: order_by
  proposal_acct: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""primary key columns input for table: twaps"""
input twaps_pk_columns_input {
  market_acct: String!
  updated_slot: bigint!
}

"""
select columns of table "twaps"
"""
enum twaps_select_column {
  """column name"""
  market_acct

  """column name"""
  observation_agg

  """column name"""
  proposal_acct

  """column name"""
  token_amount

  """column name"""
  updated_slot
}

"""
input type for updating data in table "twaps"
"""
input twaps_set_input {
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""aggregate stddev on columns"""
type twaps_stddev_fields {
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""aggregate stddev_pop on columns"""
type twaps_stddev_pop_fields {
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""aggregate stddev_samp on columns"""
type twaps_stddev_samp_fields {
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
Streaming cursor of the table "twaps"
"""
input twaps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: twaps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input twaps_stream_cursor_value_input {
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""aggregate sum on columns"""
type twaps_sum_fields {
  observation_agg: numeric
  token_amount: bigint
  updated_slot: bigint
}

"""
update columns of table "twaps"
"""
enum twaps_update_column {
  """column name"""
  market_acct

  """column name"""
  observation_agg

  """column name"""
  proposal_acct

  """column name"""
  token_amount

  """column name"""
  updated_slot
}

input twaps_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: twaps_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: twaps_set_input

  """filter the rows which have to be updated"""
  where: twaps_bool_exp!
}

"""aggregate var_pop on columns"""
type twaps_var_pop_fields {
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""aggregate var_samp on columns"""
type twaps_var_samp_fields {
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""aggregate variance on columns"""
type twaps_variance_fields {
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}