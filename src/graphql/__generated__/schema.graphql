schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "candles"
"""
type candles {
  candle_average: bigint!
  candle_duration: Int!
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint

  """An object relationship"""
  market: markets!
  market_acct: String!
  open: bigint
  timestamp: timestamptz!
  volume: bigint!
}

"""
aggregated selection of "candles"
"""
type candles_aggregate {
  aggregate: candles_aggregate_fields
  nodes: [candles!]!
}

input candles_aggregate_bool_exp {
  count: candles_aggregate_bool_exp_count
}

input candles_aggregate_bool_exp_count {
  arguments: [candles_select_column!]
  distinct: Boolean
  filter: candles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "candles"
"""
type candles_aggregate_fields {
  avg: candles_avg_fields
  count(columns: [candles_select_column!], distinct: Boolean): Int!
  max: candles_max_fields
  min: candles_min_fields
  stddev: candles_stddev_fields
  stddev_pop: candles_stddev_pop_fields
  stddev_samp: candles_stddev_samp_fields
  sum: candles_sum_fields
  var_pop: candles_var_pop_fields
  var_samp: candles_var_samp_fields
  variance: candles_variance_fields
}

"""
order by aggregate values of table "candles"
"""
input candles_aggregate_order_by {
  avg: candles_avg_order_by
  count: order_by
  max: candles_max_order_by
  min: candles_min_order_by
  stddev: candles_stddev_order_by
  stddev_pop: candles_stddev_pop_order_by
  stddev_samp: candles_stddev_samp_order_by
  sum: candles_sum_order_by
  var_pop: candles_var_pop_order_by
  var_samp: candles_var_samp_order_by
  variance: candles_variance_order_by
}

"""
input type for inserting array relation for remote table "candles"
"""
input candles_arr_rel_insert_input {
  data: [candles_insert_input!]!

  """upsert condition"""
  on_conflict: candles_on_conflict
}

"""aggregate avg on columns"""
type candles_avg_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
order by avg() on columns of table "candles"
"""
input candles_avg_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  open: order_by
  volume: order_by
}

"""
Boolean expression to filter rows from the table "candles". All fields are combined with a logical 'AND'.
"""
input candles_bool_exp {
  _and: [candles_bool_exp!]
  _not: candles_bool_exp
  _or: [candles_bool_exp!]
  candle_average: bigint_comparison_exp
  candle_duration: Int_comparison_exp
  close: bigint_comparison_exp
  cond_market_twap: bigint_comparison_exp
  high: bigint_comparison_exp
  low: bigint_comparison_exp
  market: markets_bool_exp
  market_acct: String_comparison_exp
  open: bigint_comparison_exp
  timestamp: timestamptz_comparison_exp
  volume: bigint_comparison_exp
}

"""
unique or primary key constraints on table "candles"
"""
enum candles_constraint {
  """
  unique or primary key constraint on columns "market_acct", "timestamp", "candle_duration"
  """
  candles_market_acct_candle_duration_timestamp_pk
}

"""
input type for incrementing numeric columns in table "candles"
"""
input candles_inc_input {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  open: bigint
  volume: bigint
}

"""
input type for inserting data into table "candles"
"""
input candles_insert_input {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market: markets_obj_rel_insert_input
  market_acct: String
  open: bigint
  timestamp: timestamptz
  volume: bigint
}

"""aggregate max on columns"""
type candles_max_fields {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamptz
  volume: bigint
}

"""
order by max() on columns of table "candles"
"""
input candles_max_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  market_acct: order_by
  open: order_by
  timestamp: order_by
  volume: order_by
}

"""aggregate min on columns"""
type candles_min_fields {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamptz
  volume: bigint
}

"""
order by min() on columns of table "candles"
"""
input candles_min_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  market_acct: order_by
  open: order_by
  timestamp: order_by
  volume: order_by
}

"""
response of any mutation on the table "candles"
"""
type candles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [candles!]!
}

"""
on_conflict condition type for table "candles"
"""
input candles_on_conflict {
  constraint: candles_constraint!
  update_columns: [candles_update_column!]! = []
  where: candles_bool_exp
}

"""Ordering options when selecting data from "candles"."""
input candles_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  market: markets_order_by
  market_acct: order_by
  open: order_by
  timestamp: order_by
  volume: order_by
}

"""primary key columns input for table: candles"""
input candles_pk_columns_input {
  candle_duration: Int!
  market_acct: String!
  timestamp: timestamptz!
}

"""
select columns of table "candles"
"""
enum candles_select_column {
  """column name"""
  candle_average

  """column name"""
  candle_duration

  """column name"""
  close

  """column name"""
  cond_market_twap

  """column name"""
  high

  """column name"""
  low

  """column name"""
  market_acct

  """column name"""
  open

  """column name"""
  timestamp

  """column name"""
  volume
}

"""
input type for updating data in table "candles"
"""
input candles_set_input {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamptz
  volume: bigint
}

"""aggregate stddev on columns"""
type candles_stddev_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
order by stddev() on columns of table "candles"
"""
input candles_stddev_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  open: order_by
  volume: order_by
}

"""aggregate stddev_pop on columns"""
type candles_stddev_pop_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
order by stddev_pop() on columns of table "candles"
"""
input candles_stddev_pop_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  open: order_by
  volume: order_by
}

"""aggregate stddev_samp on columns"""
type candles_stddev_samp_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
order by stddev_samp() on columns of table "candles"
"""
input candles_stddev_samp_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  open: order_by
  volume: order_by
}

"""
Streaming cursor of the table "candles"
"""
input candles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: candles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input candles_stream_cursor_value_input {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  market_acct: String
  open: bigint
  timestamp: timestamptz
  volume: bigint
}

"""aggregate sum on columns"""
type candles_sum_fields {
  candle_average: bigint
  candle_duration: Int
  close: bigint
  cond_market_twap: bigint
  high: bigint
  low: bigint
  open: bigint
  volume: bigint
}

"""
order by sum() on columns of table "candles"
"""
input candles_sum_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  open: order_by
  volume: order_by
}

"""
update columns of table "candles"
"""
enum candles_update_column {
  """column name"""
  candle_average

  """column name"""
  candle_duration

  """column name"""
  close

  """column name"""
  cond_market_twap

  """column name"""
  high

  """column name"""
  low

  """column name"""
  market_acct

  """column name"""
  open

  """column name"""
  timestamp

  """column name"""
  volume
}

input candles_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: candles_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: candles_set_input

  """filter the rows which have to be updated"""
  where: candles_bool_exp!
}

"""aggregate var_pop on columns"""
type candles_var_pop_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
order by var_pop() on columns of table "candles"
"""
input candles_var_pop_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  open: order_by
  volume: order_by
}

"""aggregate var_samp on columns"""
type candles_var_samp_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
order by var_samp() on columns of table "candles"
"""
input candles_var_samp_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  open: order_by
  volume: order_by
}

"""aggregate variance on columns"""
type candles_variance_fields {
  candle_average: Float
  candle_duration: Float
  close: Float
  cond_market_twap: Float
  high: Float
  low: Float
  open: Float
  volume: Float
}

"""
order by variance() on columns of table "candles"
"""
input candles_variance_order_by {
  candle_average: order_by
  candle_duration: order_by
  close: order_by
  cond_market_twap: order_by
  high: order_by
  low: order_by
  open: order_by
  volume: order_by
}

"""
columns and relationships of "comments"
"""
type comments {
  """An object relationship"""
  comment: comments
  comment_id: bigint!
  commentor_acct: String!

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!
  content: String!
  created_at: timestamptz!

  """An object relationship"""
  proposal: proposals!
  proposal_acct: String!

  """An array relationship"""
  reactions(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """An aggregate relationship"""
  reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!
  responding_comment_id: bigint
}

"""
aggregated selection of "comments"
"""
type comments_aggregate {
  aggregate: comments_aggregate_fields
  nodes: [comments!]!
}

input comments_aggregate_bool_exp {
  count: comments_aggregate_bool_exp_count
}

input comments_aggregate_bool_exp_count {
  arguments: [comments_select_column!]
  distinct: Boolean
  filter: comments_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "comments"
"""
type comments_aggregate_fields {
  avg: comments_avg_fields
  count(columns: [comments_select_column!], distinct: Boolean): Int!
  max: comments_max_fields
  min: comments_min_fields
  stddev: comments_stddev_fields
  stddev_pop: comments_stddev_pop_fields
  stddev_samp: comments_stddev_samp_fields
  sum: comments_sum_fields
  var_pop: comments_var_pop_fields
  var_samp: comments_var_samp_fields
  variance: comments_variance_fields
}

"""
order by aggregate values of table "comments"
"""
input comments_aggregate_order_by {
  avg: comments_avg_order_by
  count: order_by
  max: comments_max_order_by
  min: comments_min_order_by
  stddev: comments_stddev_order_by
  stddev_pop: comments_stddev_pop_order_by
  stddev_samp: comments_stddev_samp_order_by
  sum: comments_sum_order_by
  var_pop: comments_var_pop_order_by
  var_samp: comments_var_samp_order_by
  variance: comments_variance_order_by
}

"""
input type for inserting array relation for remote table "comments"
"""
input comments_arr_rel_insert_input {
  data: [comments_insert_input!]!

  """upsert condition"""
  on_conflict: comments_on_conflict
}

"""aggregate avg on columns"""
type comments_avg_fields {
  comment_id: Float
  responding_comment_id: Float
}

"""
order by avg() on columns of table "comments"
"""
input comments_avg_order_by {
  comment_id: order_by
  responding_comment_id: order_by
}

"""
Boolean expression to filter rows from the table "comments". All fields are combined with a logical 'AND'.
"""
input comments_bool_exp {
  _and: [comments_bool_exp!]
  _not: comments_bool_exp
  _or: [comments_bool_exp!]
  comment: comments_bool_exp
  comment_id: bigint_comparison_exp
  commentor_acct: String_comparison_exp
  comments: comments_bool_exp
  comments_aggregate: comments_aggregate_bool_exp
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  proposal: proposals_bool_exp
  proposal_acct: String_comparison_exp
  reactions: reactions_bool_exp
  reactions_aggregate: reactions_aggregate_bool_exp
  responding_comment_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "comments"
"""
enum comments_constraint {
  """
  unique or primary key constraint on columns "comment_id"
  """
  comments_comment_id_unique
}

"""
input type for incrementing numeric columns in table "comments"
"""
input comments_inc_input {
  comment_id: bigint
  responding_comment_id: bigint
}

"""
input type for inserting data into table "comments"
"""
input comments_insert_input {
  comment: comments_obj_rel_insert_input
  comment_id: bigint
  commentor_acct: String
  comments: comments_arr_rel_insert_input
  content: String
  created_at: timestamptz
  proposal: proposals_obj_rel_insert_input
  proposal_acct: String
  reactions: reactions_arr_rel_insert_input
  responding_comment_id: bigint
}

"""aggregate max on columns"""
type comments_max_fields {
  comment_id: bigint
  commentor_acct: String
  content: String
  created_at: timestamptz
  proposal_acct: String
  responding_comment_id: bigint
}

"""
order by max() on columns of table "comments"
"""
input comments_max_order_by {
  comment_id: order_by
  commentor_acct: order_by
  content: order_by
  created_at: order_by
  proposal_acct: order_by
  responding_comment_id: order_by
}

"""aggregate min on columns"""
type comments_min_fields {
  comment_id: bigint
  commentor_acct: String
  content: String
  created_at: timestamptz
  proposal_acct: String
  responding_comment_id: bigint
}

"""
order by min() on columns of table "comments"
"""
input comments_min_order_by {
  comment_id: order_by
  commentor_acct: order_by
  content: order_by
  created_at: order_by
  proposal_acct: order_by
  responding_comment_id: order_by
}

"""
response of any mutation on the table "comments"
"""
type comments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [comments!]!
}

"""
input type for inserting object relation for remote table "comments"
"""
input comments_obj_rel_insert_input {
  data: comments_insert_input!

  """upsert condition"""
  on_conflict: comments_on_conflict
}

"""
on_conflict condition type for table "comments"
"""
input comments_on_conflict {
  constraint: comments_constraint!
  update_columns: [comments_update_column!]! = []
  where: comments_bool_exp
}

"""Ordering options when selecting data from "comments"."""
input comments_order_by {
  comment: comments_order_by
  comment_id: order_by
  commentor_acct: order_by
  comments_aggregate: comments_aggregate_order_by
  content: order_by
  created_at: order_by
  proposal: proposals_order_by
  proposal_acct: order_by
  reactions_aggregate: reactions_aggregate_order_by
  responding_comment_id: order_by
}

"""primary key columns input for table: comments"""
input comments_pk_columns_input {
  comment_id: bigint!
}

"""
select columns of table "comments"
"""
enum comments_select_column {
  """column name"""
  comment_id

  """column name"""
  commentor_acct

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  proposal_acct

  """column name"""
  responding_comment_id
}

"""
input type for updating data in table "comments"
"""
input comments_set_input {
  comment_id: bigint
  commentor_acct: String
  content: String
  created_at: timestamptz
  proposal_acct: String
  responding_comment_id: bigint
}

"""aggregate stddev on columns"""
type comments_stddev_fields {
  comment_id: Float
  responding_comment_id: Float
}

"""
order by stddev() on columns of table "comments"
"""
input comments_stddev_order_by {
  comment_id: order_by
  responding_comment_id: order_by
}

"""aggregate stddev_pop on columns"""
type comments_stddev_pop_fields {
  comment_id: Float
  responding_comment_id: Float
}

"""
order by stddev_pop() on columns of table "comments"
"""
input comments_stddev_pop_order_by {
  comment_id: order_by
  responding_comment_id: order_by
}

"""aggregate stddev_samp on columns"""
type comments_stddev_samp_fields {
  comment_id: Float
  responding_comment_id: Float
}

"""
order by stddev_samp() on columns of table "comments"
"""
input comments_stddev_samp_order_by {
  comment_id: order_by
  responding_comment_id: order_by
}

"""
Streaming cursor of the table "comments"
"""
input comments_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: comments_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input comments_stream_cursor_value_input {
  comment_id: bigint
  commentor_acct: String
  content: String
  created_at: timestamptz
  proposal_acct: String
  responding_comment_id: bigint
}

"""aggregate sum on columns"""
type comments_sum_fields {
  comment_id: bigint
  responding_comment_id: bigint
}

"""
order by sum() on columns of table "comments"
"""
input comments_sum_order_by {
  comment_id: order_by
  responding_comment_id: order_by
}

"""
update columns of table "comments"
"""
enum comments_update_column {
  """column name"""
  comment_id

  """column name"""
  commentor_acct

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  proposal_acct

  """column name"""
  responding_comment_id
}

input comments_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: comments_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: comments_set_input

  """filter the rows which have to be updated"""
  where: comments_bool_exp!
}

"""aggregate var_pop on columns"""
type comments_var_pop_fields {
  comment_id: Float
  responding_comment_id: Float
}

"""
order by var_pop() on columns of table "comments"
"""
input comments_var_pop_order_by {
  comment_id: order_by
  responding_comment_id: order_by
}

"""aggregate var_samp on columns"""
type comments_var_samp_fields {
  comment_id: Float
  responding_comment_id: Float
}

"""
order by var_samp() on columns of table "comments"
"""
input comments_var_samp_order_by {
  comment_id: order_by
  responding_comment_id: order_by
}

"""aggregate variance on columns"""
type comments_variance_fields {
  comment_id: Float
  responding_comment_id: Float
}

"""
order by variance() on columns of table "comments"
"""
input comments_variance_order_by {
  comment_id: order_by
  responding_comment_id: order_by
}

"""
columns and relationships of "conditional_vaults"
"""
type conditional_vaults {
  cond_finalize_token_mint_acct: String!
  cond_revert_token_mint_acct: String!
  cond_vault_acct: String!
  nonce: String

  """An array relationship"""
  proposals(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """An array relationship"""
  proposalsByQuoteVault(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """An aggregate relationship"""
  proposalsByQuoteVault_aggregate(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): proposals_aggregate!

  """An aggregate relationship"""
  proposals_aggregate(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): proposals_aggregate!
  settlement_authority: String!
  status: String

  """An object relationship"""
  token: tokens!
  underlying_mint_acct: String!
  underlying_token_acct: String!
}

"""
aggregated selection of "conditional_vaults"
"""
type conditional_vaults_aggregate {
  aggregate: conditional_vaults_aggregate_fields
  nodes: [conditional_vaults!]!
}

input conditional_vaults_aggregate_bool_exp {
  count: conditional_vaults_aggregate_bool_exp_count
}

input conditional_vaults_aggregate_bool_exp_count {
  arguments: [conditional_vaults_select_column!]
  distinct: Boolean
  filter: conditional_vaults_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "conditional_vaults"
"""
type conditional_vaults_aggregate_fields {
  count(columns: [conditional_vaults_select_column!], distinct: Boolean): Int!
  max: conditional_vaults_max_fields
  min: conditional_vaults_min_fields
}

"""
order by aggregate values of table "conditional_vaults"
"""
input conditional_vaults_aggregate_order_by {
  count: order_by
  max: conditional_vaults_max_order_by
  min: conditional_vaults_min_order_by
}

"""
input type for inserting array relation for remote table "conditional_vaults"
"""
input conditional_vaults_arr_rel_insert_input {
  data: [conditional_vaults_insert_input!]!

  """upsert condition"""
  on_conflict: conditional_vaults_on_conflict
}

"""
Boolean expression to filter rows from the table "conditional_vaults". All fields are combined with a logical 'AND'.
"""
input conditional_vaults_bool_exp {
  _and: [conditional_vaults_bool_exp!]
  _not: conditional_vaults_bool_exp
  _or: [conditional_vaults_bool_exp!]
  cond_finalize_token_mint_acct: String_comparison_exp
  cond_revert_token_mint_acct: String_comparison_exp
  cond_vault_acct: String_comparison_exp
  nonce: String_comparison_exp
  proposals: proposals_bool_exp
  proposalsByQuoteVault: proposals_bool_exp
  proposalsByQuoteVault_aggregate: proposals_aggregate_bool_exp
  proposals_aggregate: proposals_aggregate_bool_exp
  settlement_authority: String_comparison_exp
  status: String_comparison_exp
  token: tokens_bool_exp
  underlying_mint_acct: String_comparison_exp
  underlying_token_acct: String_comparison_exp
}

"""
unique or primary key constraints on table "conditional_vaults"
"""
enum conditional_vaults_constraint {
  """
  unique or primary key constraint on columns "cond_vault_acct"
  """
  conditional_vaults_pkey
}

"""
input type for inserting data into table "conditional_vaults"
"""
input conditional_vaults_insert_input {
  cond_finalize_token_mint_acct: String
  cond_revert_token_mint_acct: String
  cond_vault_acct: String
  nonce: String
  proposals: proposals_arr_rel_insert_input
  proposalsByQuoteVault: proposals_arr_rel_insert_input
  settlement_authority: String
  status: String
  token: tokens_obj_rel_insert_input
  underlying_mint_acct: String
  underlying_token_acct: String
}

"""aggregate max on columns"""
type conditional_vaults_max_fields {
  cond_finalize_token_mint_acct: String
  cond_revert_token_mint_acct: String
  cond_vault_acct: String
  nonce: String
  settlement_authority: String
  status: String
  underlying_mint_acct: String
  underlying_token_acct: String
}

"""
order by max() on columns of table "conditional_vaults"
"""
input conditional_vaults_max_order_by {
  cond_finalize_token_mint_acct: order_by
  cond_revert_token_mint_acct: order_by
  cond_vault_acct: order_by
  nonce: order_by
  settlement_authority: order_by
  status: order_by
  underlying_mint_acct: order_by
  underlying_token_acct: order_by
}

"""aggregate min on columns"""
type conditional_vaults_min_fields {
  cond_finalize_token_mint_acct: String
  cond_revert_token_mint_acct: String
  cond_vault_acct: String
  nonce: String
  settlement_authority: String
  status: String
  underlying_mint_acct: String
  underlying_token_acct: String
}

"""
order by min() on columns of table "conditional_vaults"
"""
input conditional_vaults_min_order_by {
  cond_finalize_token_mint_acct: order_by
  cond_revert_token_mint_acct: order_by
  cond_vault_acct: order_by
  nonce: order_by
  settlement_authority: order_by
  status: order_by
  underlying_mint_acct: order_by
  underlying_token_acct: order_by
}

"""
response of any mutation on the table "conditional_vaults"
"""
type conditional_vaults_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [conditional_vaults!]!
}

"""
input type for inserting object relation for remote table "conditional_vaults"
"""
input conditional_vaults_obj_rel_insert_input {
  data: conditional_vaults_insert_input!

  """upsert condition"""
  on_conflict: conditional_vaults_on_conflict
}

"""
on_conflict condition type for table "conditional_vaults"
"""
input conditional_vaults_on_conflict {
  constraint: conditional_vaults_constraint!
  update_columns: [conditional_vaults_update_column!]! = []
  where: conditional_vaults_bool_exp
}

"""Ordering options when selecting data from "conditional_vaults"."""
input conditional_vaults_order_by {
  cond_finalize_token_mint_acct: order_by
  cond_revert_token_mint_acct: order_by
  cond_vault_acct: order_by
  nonce: order_by
  proposalsByQuoteVault_aggregate: proposals_aggregate_order_by
  proposals_aggregate: proposals_aggregate_order_by
  settlement_authority: order_by
  status: order_by
  token: tokens_order_by
  underlying_mint_acct: order_by
  underlying_token_acct: order_by
}

"""primary key columns input for table: conditional_vaults"""
input conditional_vaults_pk_columns_input {
  cond_vault_acct: String!
}

"""
select columns of table "conditional_vaults"
"""
enum conditional_vaults_select_column {
  """column name"""
  cond_finalize_token_mint_acct

  """column name"""
  cond_revert_token_mint_acct

  """column name"""
  cond_vault_acct

  """column name"""
  nonce

  """column name"""
  settlement_authority

  """column name"""
  status

  """column name"""
  underlying_mint_acct

  """column name"""
  underlying_token_acct
}

"""
input type for updating data in table "conditional_vaults"
"""
input conditional_vaults_set_input {
  cond_finalize_token_mint_acct: String
  cond_revert_token_mint_acct: String
  cond_vault_acct: String
  nonce: String
  settlement_authority: String
  status: String
  underlying_mint_acct: String
  underlying_token_acct: String
}

"""
Streaming cursor of the table "conditional_vaults"
"""
input conditional_vaults_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: conditional_vaults_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input conditional_vaults_stream_cursor_value_input {
  cond_finalize_token_mint_acct: String
  cond_revert_token_mint_acct: String
  cond_vault_acct: String
  nonce: String
  settlement_authority: String
  status: String
  underlying_mint_acct: String
  underlying_token_acct: String
}

"""
update columns of table "conditional_vaults"
"""
enum conditional_vaults_update_column {
  """column name"""
  cond_finalize_token_mint_acct

  """column name"""
  cond_revert_token_mint_acct

  """column name"""
  cond_vault_acct

  """column name"""
  nonce

  """column name"""
  settlement_authority

  """column name"""
  status

  """column name"""
  underlying_mint_acct

  """column name"""
  underlying_token_acct
}

input conditional_vaults_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: conditional_vaults_set_input

  """filter the rows which have to be updated"""
  where: conditional_vaults_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "dao_details"
"""
type dao_details {
  admin_accts(
    """JSON select path"""
    path: String
  ): jsonb
  creator_acct: String
  dao_id: bigint!

  """An array relationship"""
  daos(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """An aggregate relationship"""
  daos_aggregate(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): daos_aggregate!
  description: String
  fail_token_image_url: String
  github: String
  image_url: String
  is_hide: Boolean
  lp_token_image_url: String
  name: String
  pass_token_image_url: String
  slug: String
  token_image_url: String
  url: String
  x_account: String
}

"""
aggregated selection of "dao_details"
"""
type dao_details_aggregate {
  aggregate: dao_details_aggregate_fields
  nodes: [dao_details!]!
}

"""
aggregate fields of "dao_details"
"""
type dao_details_aggregate_fields {
  avg: dao_details_avg_fields
  count(columns: [dao_details_select_column!], distinct: Boolean): Int!
  max: dao_details_max_fields
  min: dao_details_min_fields
  stddev: dao_details_stddev_fields
  stddev_pop: dao_details_stddev_pop_fields
  stddev_samp: dao_details_stddev_samp_fields
  sum: dao_details_sum_fields
  var_pop: dao_details_var_pop_fields
  var_samp: dao_details_var_samp_fields
  variance: dao_details_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input dao_details_append_input {
  admin_accts: jsonb
}

"""aggregate avg on columns"""
type dao_details_avg_fields {
  dao_id: Float
}

"""
Boolean expression to filter rows from the table "dao_details". All fields are combined with a logical 'AND'.
"""
input dao_details_bool_exp {
  _and: [dao_details_bool_exp!]
  _not: dao_details_bool_exp
  _or: [dao_details_bool_exp!]
  admin_accts: jsonb_comparison_exp
  creator_acct: String_comparison_exp
  dao_id: bigint_comparison_exp
  daos: daos_bool_exp
  daos_aggregate: daos_aggregate_bool_exp
  description: String_comparison_exp
  fail_token_image_url: String_comparison_exp
  github: String_comparison_exp
  image_url: String_comparison_exp
  is_hide: Boolean_comparison_exp
  lp_token_image_url: String_comparison_exp
  name: String_comparison_exp
  pass_token_image_url: String_comparison_exp
  slug: String_comparison_exp
  token_image_url: String_comparison_exp
  url: String_comparison_exp
  x_account: String_comparison_exp
}

"""
unique or primary key constraints on table "dao_details"
"""
enum dao_details_constraint {
  """
  unique or primary key constraint on columns "github"
  """
  dao_details_github_unique

  """
  unique or primary key constraint on columns "name"
  """
  dao_details_name_unique

  """
  unique or primary key constraint on columns "dao_id"
  """
  dao_details_pkey

  """
  unique or primary key constraint on columns "slug"
  """
  dao_details_slug_unique

  """
  unique or primary key constraint on columns "url"
  """
  dao_details_url_unique

  """
  unique or primary key constraint on columns "x_account"
  """
  dao_details_x_account_unique

  """
  unique or primary key constraint on columns "dao_id", "name", "url"
  """
  id_name_url
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input dao_details_delete_at_path_input {
  admin_accts: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input dao_details_delete_elem_input {
  admin_accts: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input dao_details_delete_key_input {
  admin_accts: String
}

"""
input type for incrementing numeric columns in table "dao_details"
"""
input dao_details_inc_input {
  dao_id: bigint
}

"""
input type for inserting data into table "dao_details"
"""
input dao_details_insert_input {
  admin_accts: jsonb
  creator_acct: String
  dao_id: bigint
  daos: daos_arr_rel_insert_input
  description: String
  fail_token_image_url: String
  github: String
  image_url: String
  is_hide: Boolean
  lp_token_image_url: String
  name: String
  pass_token_image_url: String
  slug: String
  token_image_url: String
  url: String
  x_account: String
}

"""aggregate max on columns"""
type dao_details_max_fields {
  creator_acct: String
  dao_id: bigint
  description: String
  fail_token_image_url: String
  github: String
  image_url: String
  lp_token_image_url: String
  name: String
  pass_token_image_url: String
  slug: String
  token_image_url: String
  url: String
  x_account: String
}

"""aggregate min on columns"""
type dao_details_min_fields {
  creator_acct: String
  dao_id: bigint
  description: String
  fail_token_image_url: String
  github: String
  image_url: String
  lp_token_image_url: String
  name: String
  pass_token_image_url: String
  slug: String
  token_image_url: String
  url: String
  x_account: String
}

"""
response of any mutation on the table "dao_details"
"""
type dao_details_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [dao_details!]!
}

"""
input type for inserting object relation for remote table "dao_details"
"""
input dao_details_obj_rel_insert_input {
  data: dao_details_insert_input!

  """upsert condition"""
  on_conflict: dao_details_on_conflict
}

"""
on_conflict condition type for table "dao_details"
"""
input dao_details_on_conflict {
  constraint: dao_details_constraint!
  update_columns: [dao_details_update_column!]! = []
  where: dao_details_bool_exp
}

"""Ordering options when selecting data from "dao_details"."""
input dao_details_order_by {
  admin_accts: order_by
  creator_acct: order_by
  dao_id: order_by
  daos_aggregate: daos_aggregate_order_by
  description: order_by
  fail_token_image_url: order_by
  github: order_by
  image_url: order_by
  is_hide: order_by
  lp_token_image_url: order_by
  name: order_by
  pass_token_image_url: order_by
  slug: order_by
  token_image_url: order_by
  url: order_by
  x_account: order_by
}

"""primary key columns input for table: dao_details"""
input dao_details_pk_columns_input {
  dao_id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input dao_details_prepend_input {
  admin_accts: jsonb
}

"""
select columns of table "dao_details"
"""
enum dao_details_select_column {
  """column name"""
  admin_accts

  """column name"""
  creator_acct

  """column name"""
  dao_id

  """column name"""
  description

  """column name"""
  fail_token_image_url

  """column name"""
  github

  """column name"""
  image_url

  """column name"""
  is_hide

  """column name"""
  lp_token_image_url

  """column name"""
  name

  """column name"""
  pass_token_image_url

  """column name"""
  slug

  """column name"""
  token_image_url

  """column name"""
  url

  """column name"""
  x_account
}

"""
input type for updating data in table "dao_details"
"""
input dao_details_set_input {
  admin_accts: jsonb
  creator_acct: String
  dao_id: bigint
  description: String
  fail_token_image_url: String
  github: String
  image_url: String
  is_hide: Boolean
  lp_token_image_url: String
  name: String
  pass_token_image_url: String
  slug: String
  token_image_url: String
  url: String
  x_account: String
}

"""aggregate stddev on columns"""
type dao_details_stddev_fields {
  dao_id: Float
}

"""aggregate stddev_pop on columns"""
type dao_details_stddev_pop_fields {
  dao_id: Float
}

"""aggregate stddev_samp on columns"""
type dao_details_stddev_samp_fields {
  dao_id: Float
}

"""
Streaming cursor of the table "dao_details"
"""
input dao_details_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dao_details_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dao_details_stream_cursor_value_input {
  admin_accts: jsonb
  creator_acct: String
  dao_id: bigint
  description: String
  fail_token_image_url: String
  github: String
  image_url: String
  is_hide: Boolean
  lp_token_image_url: String
  name: String
  pass_token_image_url: String
  slug: String
  token_image_url: String
  url: String
  x_account: String
}

"""aggregate sum on columns"""
type dao_details_sum_fields {
  dao_id: bigint
}

"""
update columns of table "dao_details"
"""
enum dao_details_update_column {
  """column name"""
  admin_accts

  """column name"""
  creator_acct

  """column name"""
  dao_id

  """column name"""
  description

  """column name"""
  fail_token_image_url

  """column name"""
  github

  """column name"""
  image_url

  """column name"""
  is_hide

  """column name"""
  lp_token_image_url

  """column name"""
  name

  """column name"""
  pass_token_image_url

  """column name"""
  slug

  """column name"""
  token_image_url

  """column name"""
  url

  """column name"""
  x_account
}

input dao_details_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: dao_details_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: dao_details_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: dao_details_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: dao_details_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: dao_details_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: dao_details_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: dao_details_set_input

  """filter the rows which have to be updated"""
  where: dao_details_bool_exp!
}

"""aggregate var_pop on columns"""
type dao_details_var_pop_fields {
  dao_id: Float
}

"""aggregate var_samp on columns"""
type dao_details_var_samp_fields {
  dao_id: Float
}

"""aggregate variance on columns"""
type dao_details_variance_fields {
  dao_id: Float
}

"""
columns and relationships of "daos"
"""
type daos {
  base_acct: String!
  created_at: timestamptz!
  dao_acct: String!

  """An object relationship"""
  dao_detail: dao_details
  dao_id: bigint
  pass_threshold_bps: bigint

  """An object relationship"""
  program: programs!
  program_acct: String!

  """An array relationship"""
  proposals(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """An aggregate relationship"""
  proposals_aggregate(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): proposals_aggregate!
  quote_acct: String
  slots_per_proposal: bigint

  """An object relationship"""
  token: tokens!

  """An object relationship"""
  tokenByBaseAcct: tokens

  """An object relationship"""
  tokenByQuoteAcct: tokens
  treasury_acct: String
  updated_at: timestamptz!
}

"""
aggregated selection of "daos"
"""
type daos_aggregate {
  aggregate: daos_aggregate_fields
  nodes: [daos!]!
}

input daos_aggregate_bool_exp {
  count: daos_aggregate_bool_exp_count
}

input daos_aggregate_bool_exp_count {
  arguments: [daos_select_column!]
  distinct: Boolean
  filter: daos_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "daos"
"""
type daos_aggregate_fields {
  avg: daos_avg_fields
  count(columns: [daos_select_column!], distinct: Boolean): Int!
  max: daos_max_fields
  min: daos_min_fields
  stddev: daos_stddev_fields
  stddev_pop: daos_stddev_pop_fields
  stddev_samp: daos_stddev_samp_fields
  sum: daos_sum_fields
  var_pop: daos_var_pop_fields
  var_samp: daos_var_samp_fields
  variance: daos_variance_fields
}

"""
order by aggregate values of table "daos"
"""
input daos_aggregate_order_by {
  avg: daos_avg_order_by
  count: order_by
  max: daos_max_order_by
  min: daos_min_order_by
  stddev: daos_stddev_order_by
  stddev_pop: daos_stddev_pop_order_by
  stddev_samp: daos_stddev_samp_order_by
  sum: daos_sum_order_by
  var_pop: daos_var_pop_order_by
  var_samp: daos_var_samp_order_by
  variance: daos_variance_order_by
}

"""
input type for inserting array relation for remote table "daos"
"""
input daos_arr_rel_insert_input {
  data: [daos_insert_input!]!

  """upsert condition"""
  on_conflict: daos_on_conflict
}

"""aggregate avg on columns"""
type daos_avg_fields {
  dao_id: Float
  pass_threshold_bps: Float
  slots_per_proposal: Float
}

"""
order by avg() on columns of table "daos"
"""
input daos_avg_order_by {
  dao_id: order_by
  pass_threshold_bps: order_by
  slots_per_proposal: order_by
}

"""
Boolean expression to filter rows from the table "daos". All fields are combined with a logical 'AND'.
"""
input daos_bool_exp {
  _and: [daos_bool_exp!]
  _not: daos_bool_exp
  _or: [daos_bool_exp!]
  base_acct: String_comparison_exp
  created_at: timestamptz_comparison_exp
  dao_acct: String_comparison_exp
  dao_detail: dao_details_bool_exp
  dao_id: bigint_comparison_exp
  pass_threshold_bps: bigint_comparison_exp
  program: programs_bool_exp
  program_acct: String_comparison_exp
  proposals: proposals_bool_exp
  proposals_aggregate: proposals_aggregate_bool_exp
  quote_acct: String_comparison_exp
  slots_per_proposal: bigint_comparison_exp
  token: tokens_bool_exp
  tokenByBaseAcct: tokens_bool_exp
  tokenByQuoteAcct: tokens_bool_exp
  treasury_acct: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "daos"
"""
enum daos_constraint {
  """
  unique or primary key constraint on columns "dao_acct", "program_acct"
  """
  dao_acct_program

  """
  unique or primary key constraint on columns "dao_acct"
  """
  daos_pkey

  """
  unique or primary key constraint on columns "treasury_acct"
  """
  daos_treasury_acct_unique
}

"""
input type for incrementing numeric columns in table "daos"
"""
input daos_inc_input {
  dao_id: bigint
  pass_threshold_bps: bigint
  slots_per_proposal: bigint
}

"""
input type for inserting data into table "daos"
"""
input daos_insert_input {
  base_acct: String
  created_at: timestamptz
  dao_acct: String
  dao_detail: dao_details_obj_rel_insert_input
  dao_id: bigint
  pass_threshold_bps: bigint
  program: programs_obj_rel_insert_input
  program_acct: String
  proposals: proposals_arr_rel_insert_input
  quote_acct: String
  slots_per_proposal: bigint
  token: tokens_obj_rel_insert_input
  tokenByBaseAcct: tokens_obj_rel_insert_input
  tokenByQuoteAcct: tokens_obj_rel_insert_input
  treasury_acct: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type daos_max_fields {
  base_acct: String
  created_at: timestamptz
  dao_acct: String
  dao_id: bigint
  pass_threshold_bps: bigint
  program_acct: String
  quote_acct: String
  slots_per_proposal: bigint
  treasury_acct: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "daos"
"""
input daos_max_order_by {
  base_acct: order_by
  created_at: order_by
  dao_acct: order_by
  dao_id: order_by
  pass_threshold_bps: order_by
  program_acct: order_by
  quote_acct: order_by
  slots_per_proposal: order_by
  treasury_acct: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type daos_min_fields {
  base_acct: String
  created_at: timestamptz
  dao_acct: String
  dao_id: bigint
  pass_threshold_bps: bigint
  program_acct: String
  quote_acct: String
  slots_per_proposal: bigint
  treasury_acct: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "daos"
"""
input daos_min_order_by {
  base_acct: order_by
  created_at: order_by
  dao_acct: order_by
  dao_id: order_by
  pass_threshold_bps: order_by
  program_acct: order_by
  quote_acct: order_by
  slots_per_proposal: order_by
  treasury_acct: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "daos"
"""
type daos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [daos!]!
}

"""
input type for inserting object relation for remote table "daos"
"""
input daos_obj_rel_insert_input {
  data: daos_insert_input!

  """upsert condition"""
  on_conflict: daos_on_conflict
}

"""
on_conflict condition type for table "daos"
"""
input daos_on_conflict {
  constraint: daos_constraint!
  update_columns: [daos_update_column!]! = []
  where: daos_bool_exp
}

"""Ordering options when selecting data from "daos"."""
input daos_order_by {
  base_acct: order_by
  created_at: order_by
  dao_acct: order_by
  dao_detail: dao_details_order_by
  dao_id: order_by
  pass_threshold_bps: order_by
  program: programs_order_by
  program_acct: order_by
  proposals_aggregate: proposals_aggregate_order_by
  quote_acct: order_by
  slots_per_proposal: order_by
  token: tokens_order_by
  tokenByBaseAcct: tokens_order_by
  tokenByQuoteAcct: tokens_order_by
  treasury_acct: order_by
  updated_at: order_by
}

"""primary key columns input for table: daos"""
input daos_pk_columns_input {
  dao_acct: String!
}

"""
select columns of table "daos"
"""
enum daos_select_column {
  """column name"""
  base_acct

  """column name"""
  created_at

  """column name"""
  dao_acct

  """column name"""
  dao_id

  """column name"""
  pass_threshold_bps

  """column name"""
  program_acct

  """column name"""
  quote_acct

  """column name"""
  slots_per_proposal

  """column name"""
  treasury_acct

  """column name"""
  updated_at
}

"""
input type for updating data in table "daos"
"""
input daos_set_input {
  base_acct: String
  created_at: timestamptz
  dao_acct: String
  dao_id: bigint
  pass_threshold_bps: bigint
  program_acct: String
  quote_acct: String
  slots_per_proposal: bigint
  treasury_acct: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type daos_stddev_fields {
  dao_id: Float
  pass_threshold_bps: Float
  slots_per_proposal: Float
}

"""
order by stddev() on columns of table "daos"
"""
input daos_stddev_order_by {
  dao_id: order_by
  pass_threshold_bps: order_by
  slots_per_proposal: order_by
}

"""aggregate stddev_pop on columns"""
type daos_stddev_pop_fields {
  dao_id: Float
  pass_threshold_bps: Float
  slots_per_proposal: Float
}

"""
order by stddev_pop() on columns of table "daos"
"""
input daos_stddev_pop_order_by {
  dao_id: order_by
  pass_threshold_bps: order_by
  slots_per_proposal: order_by
}

"""aggregate stddev_samp on columns"""
type daos_stddev_samp_fields {
  dao_id: Float
  pass_threshold_bps: Float
  slots_per_proposal: Float
}

"""
order by stddev_samp() on columns of table "daos"
"""
input daos_stddev_samp_order_by {
  dao_id: order_by
  pass_threshold_bps: order_by
  slots_per_proposal: order_by
}

"""
Streaming cursor of the table "daos"
"""
input daos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: daos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input daos_stream_cursor_value_input {
  base_acct: String
  created_at: timestamptz
  dao_acct: String
  dao_id: bigint
  pass_threshold_bps: bigint
  program_acct: String
  quote_acct: String
  slots_per_proposal: bigint
  treasury_acct: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type daos_sum_fields {
  dao_id: bigint
  pass_threshold_bps: bigint
  slots_per_proposal: bigint
}

"""
order by sum() on columns of table "daos"
"""
input daos_sum_order_by {
  dao_id: order_by
  pass_threshold_bps: order_by
  slots_per_proposal: order_by
}

"""
update columns of table "daos"
"""
enum daos_update_column {
  """column name"""
  base_acct

  """column name"""
  created_at

  """column name"""
  dao_acct

  """column name"""
  dao_id

  """column name"""
  pass_threshold_bps

  """column name"""
  program_acct

  """column name"""
  quote_acct

  """column name"""
  slots_per_proposal

  """column name"""
  treasury_acct

  """column name"""
  updated_at
}

input daos_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: daos_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: daos_set_input

  """filter the rows which have to be updated"""
  where: daos_bool_exp!
}

"""aggregate var_pop on columns"""
type daos_var_pop_fields {
  dao_id: Float
  pass_threshold_bps: Float
  slots_per_proposal: Float
}

"""
order by var_pop() on columns of table "daos"
"""
input daos_var_pop_order_by {
  dao_id: order_by
  pass_threshold_bps: order_by
  slots_per_proposal: order_by
}

"""aggregate var_samp on columns"""
type daos_var_samp_fields {
  dao_id: Float
  pass_threshold_bps: Float
  slots_per_proposal: Float
}

"""
order by var_samp() on columns of table "daos"
"""
input daos_var_samp_order_by {
  dao_id: order_by
  pass_threshold_bps: order_by
  slots_per_proposal: order_by
}

"""aggregate variance on columns"""
type daos_variance_fields {
  dao_id: Float
  pass_threshold_bps: Float
  slots_per_proposal: Float
}

"""
order by variance() on columns of table "daos"
"""
input daos_variance_order_by {
  dao_id: order_by
  pass_threshold_bps: order_by
  slots_per_proposal: order_by
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "indexer_account_dependencies"
"""
type indexer_account_dependencies {
  acct: String!

  """An object relationship"""
  indexer: indexers!
  latest_tx_sig_processed: String
  name: String!
  status: String

  """An object relationship"""
  transaction: transactions
  updated_at: timestamptz
}

"""
aggregated selection of "indexer_account_dependencies"
"""
type indexer_account_dependencies_aggregate {
  aggregate: indexer_account_dependencies_aggregate_fields
  nodes: [indexer_account_dependencies!]!
}

input indexer_account_dependencies_aggregate_bool_exp {
  count: indexer_account_dependencies_aggregate_bool_exp_count
}

input indexer_account_dependencies_aggregate_bool_exp_count {
  arguments: [indexer_account_dependencies_select_column!]
  distinct: Boolean
  filter: indexer_account_dependencies_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "indexer_account_dependencies"
"""
type indexer_account_dependencies_aggregate_fields {
  count(columns: [indexer_account_dependencies_select_column!], distinct: Boolean): Int!
  max: indexer_account_dependencies_max_fields
  min: indexer_account_dependencies_min_fields
}

"""
order by aggregate values of table "indexer_account_dependencies"
"""
input indexer_account_dependencies_aggregate_order_by {
  count: order_by
  max: indexer_account_dependencies_max_order_by
  min: indexer_account_dependencies_min_order_by
}

"""
input type for inserting array relation for remote table "indexer_account_dependencies"
"""
input indexer_account_dependencies_arr_rel_insert_input {
  data: [indexer_account_dependencies_insert_input!]!

  """upsert condition"""
  on_conflict: indexer_account_dependencies_on_conflict
}

"""
Boolean expression to filter rows from the table "indexer_account_dependencies". All fields are combined with a logical 'AND'.
"""
input indexer_account_dependencies_bool_exp {
  _and: [indexer_account_dependencies_bool_exp!]
  _not: indexer_account_dependencies_bool_exp
  _or: [indexer_account_dependencies_bool_exp!]
  acct: String_comparison_exp
  indexer: indexers_bool_exp
  latest_tx_sig_processed: String_comparison_exp
  name: String_comparison_exp
  status: String_comparison_exp
  transaction: transactions_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "indexer_account_dependencies"
"""
enum indexer_account_dependencies_constraint {
  """
  unique or primary key constraint on columns "acct", "name"
  """
  indexer_account_dependencies_name_acct_pk
}

"""
input type for inserting data into table "indexer_account_dependencies"
"""
input indexer_account_dependencies_insert_input {
  acct: String
  indexer: indexers_obj_rel_insert_input
  latest_tx_sig_processed: String
  name: String
  status: String
  transaction: transactions_obj_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type indexer_account_dependencies_max_fields {
  acct: String
  latest_tx_sig_processed: String
  name: String
  status: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "indexer_account_dependencies"
"""
input indexer_account_dependencies_max_order_by {
  acct: order_by
  latest_tx_sig_processed: order_by
  name: order_by
  status: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type indexer_account_dependencies_min_fields {
  acct: String
  latest_tx_sig_processed: String
  name: String
  status: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "indexer_account_dependencies"
"""
input indexer_account_dependencies_min_order_by {
  acct: order_by
  latest_tx_sig_processed: order_by
  name: order_by
  status: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "indexer_account_dependencies"
"""
type indexer_account_dependencies_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [indexer_account_dependencies!]!
}

"""
on_conflict condition type for table "indexer_account_dependencies"
"""
input indexer_account_dependencies_on_conflict {
  constraint: indexer_account_dependencies_constraint!
  update_columns: [indexer_account_dependencies_update_column!]! = []
  where: indexer_account_dependencies_bool_exp
}

"""
Ordering options when selecting data from "indexer_account_dependencies".
"""
input indexer_account_dependencies_order_by {
  acct: order_by
  indexer: indexers_order_by
  latest_tx_sig_processed: order_by
  name: order_by
  status: order_by
  transaction: transactions_order_by
  updated_at: order_by
}

"""primary key columns input for table: indexer_account_dependencies"""
input indexer_account_dependencies_pk_columns_input {
  acct: String!
  name: String!
}

"""
select columns of table "indexer_account_dependencies"
"""
enum indexer_account_dependencies_select_column {
  """column name"""
  acct

  """column name"""
  latest_tx_sig_processed

  """column name"""
  name

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "indexer_account_dependencies"
"""
input indexer_account_dependencies_set_input {
  acct: String
  latest_tx_sig_processed: String
  name: String
  status: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "indexer_account_dependencies"
"""
input indexer_account_dependencies_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: indexer_account_dependencies_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input indexer_account_dependencies_stream_cursor_value_input {
  acct: String
  latest_tx_sig_processed: String
  name: String
  status: String
  updated_at: timestamptz
}

"""
update columns of table "indexer_account_dependencies"
"""
enum indexer_account_dependencies_update_column {
  """column name"""
  acct

  """column name"""
  latest_tx_sig_processed

  """column name"""
  name

  """column name"""
  status

  """column name"""
  updated_at
}

input indexer_account_dependencies_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: indexer_account_dependencies_set_input

  """filter the rows which have to be updated"""
  where: indexer_account_dependencies_bool_exp!
}

"""
columns and relationships of "indexers"
"""
type indexers {
  implementation: String!

  """An array relationship"""
  indexer_account_dependencies(
    """distinct select on columns"""
    distinct_on: [indexer_account_dependencies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_account_dependencies_order_by!]

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): [indexer_account_dependencies!]!

  """An aggregate relationship"""
  indexer_account_dependencies_aggregate(
    """distinct select on columns"""
    distinct_on: [indexer_account_dependencies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_account_dependencies_order_by!]

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): indexer_account_dependencies_aggregate!
  indexer_type: String!
  latest_slot_processed: bigint!
  name: String!
}

"""
aggregated selection of "indexers"
"""
type indexers_aggregate {
  aggregate: indexers_aggregate_fields
  nodes: [indexers!]!
}

"""
aggregate fields of "indexers"
"""
type indexers_aggregate_fields {
  avg: indexers_avg_fields
  count(columns: [indexers_select_column!], distinct: Boolean): Int!
  max: indexers_max_fields
  min: indexers_min_fields
  stddev: indexers_stddev_fields
  stddev_pop: indexers_stddev_pop_fields
  stddev_samp: indexers_stddev_samp_fields
  sum: indexers_sum_fields
  var_pop: indexers_var_pop_fields
  var_samp: indexers_var_samp_fields
  variance: indexers_variance_fields
}

"""aggregate avg on columns"""
type indexers_avg_fields {
  latest_slot_processed: Float
}

"""
Boolean expression to filter rows from the table "indexers". All fields are combined with a logical 'AND'.
"""
input indexers_bool_exp {
  _and: [indexers_bool_exp!]
  _not: indexers_bool_exp
  _or: [indexers_bool_exp!]
  implementation: String_comparison_exp
  indexer_account_dependencies: indexer_account_dependencies_bool_exp
  indexer_account_dependencies_aggregate: indexer_account_dependencies_aggregate_bool_exp
  indexer_type: String_comparison_exp
  latest_slot_processed: bigint_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "indexers"
"""
enum indexers_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  indexers_pkey
}

"""
input type for incrementing numeric columns in table "indexers"
"""
input indexers_inc_input {
  latest_slot_processed: bigint
}

"""
input type for inserting data into table "indexers"
"""
input indexers_insert_input {
  implementation: String
  indexer_account_dependencies: indexer_account_dependencies_arr_rel_insert_input
  indexer_type: String
  latest_slot_processed: bigint
  name: String
}

"""aggregate max on columns"""
type indexers_max_fields {
  implementation: String
  indexer_type: String
  latest_slot_processed: bigint
  name: String
}

"""aggregate min on columns"""
type indexers_min_fields {
  implementation: String
  indexer_type: String
  latest_slot_processed: bigint
  name: String
}

"""
response of any mutation on the table "indexers"
"""
type indexers_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [indexers!]!
}

"""
input type for inserting object relation for remote table "indexers"
"""
input indexers_obj_rel_insert_input {
  data: indexers_insert_input!

  """upsert condition"""
  on_conflict: indexers_on_conflict
}

"""
on_conflict condition type for table "indexers"
"""
input indexers_on_conflict {
  constraint: indexers_constraint!
  update_columns: [indexers_update_column!]! = []
  where: indexers_bool_exp
}

"""Ordering options when selecting data from "indexers"."""
input indexers_order_by {
  implementation: order_by
  indexer_account_dependencies_aggregate: indexer_account_dependencies_aggregate_order_by
  indexer_type: order_by
  latest_slot_processed: order_by
  name: order_by
}

"""primary key columns input for table: indexers"""
input indexers_pk_columns_input {
  name: String!
}

"""
select columns of table "indexers"
"""
enum indexers_select_column {
  """column name"""
  implementation

  """column name"""
  indexer_type

  """column name"""
  latest_slot_processed

  """column name"""
  name
}

"""
input type for updating data in table "indexers"
"""
input indexers_set_input {
  implementation: String
  indexer_type: String
  latest_slot_processed: bigint
  name: String
}

"""aggregate stddev on columns"""
type indexers_stddev_fields {
  latest_slot_processed: Float
}

"""aggregate stddev_pop on columns"""
type indexers_stddev_pop_fields {
  latest_slot_processed: Float
}

"""aggregate stddev_samp on columns"""
type indexers_stddev_samp_fields {
  latest_slot_processed: Float
}

"""
Streaming cursor of the table "indexers"
"""
input indexers_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: indexers_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input indexers_stream_cursor_value_input {
  implementation: String
  indexer_type: String
  latest_slot_processed: bigint
  name: String
}

"""aggregate sum on columns"""
type indexers_sum_fields {
  latest_slot_processed: bigint
}

"""
update columns of table "indexers"
"""
enum indexers_update_column {
  """column name"""
  implementation

  """column name"""
  indexer_type

  """column name"""
  latest_slot_processed

  """column name"""
  name
}

input indexers_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: indexers_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: indexers_set_input

  """filter the rows which have to be updated"""
  where: indexers_bool_exp!
}

"""aggregate var_pop on columns"""
type indexers_var_pop_fields {
  latest_slot_processed: Float
}

"""aggregate var_samp on columns"""
type indexers_var_samp_fields {
  latest_slot_processed: Float
}

"""aggregate variance on columns"""
type indexers_variance_fields {
  latest_slot_processed: Float
}

scalar interval

"""
Boolean expression to compare columns of type "interval". All fields are combined with logical 'AND'.
"""
input interval_comparison_exp {
  _eq: interval
  _gt: interval
  _gte: interval
  _in: [interval!]
  _is_null: Boolean
  _lt: interval
  _lte: interval
  _neq: interval
  _nin: [interval!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "makes"
"""
type makes {
  filled_base_amount: bigint!
  is_active: Boolean!

  """An object relationship"""
  market: markets!
  market_acct: String!

  """An object relationship"""
  order: orders!
  order_tx_sig: String!
  quote_price: numeric!

  """An array relationship"""
  takes(
    """distinct select on columns"""
    distinct_on: [takes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [takes_order_by!]

    """filter the rows returned"""
    where: takes_bool_exp
  ): [takes!]!

  """An aggregate relationship"""
  takes_aggregate(
    """distinct select on columns"""
    distinct_on: [takes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [takes_order_by!]

    """filter the rows returned"""
    where: takes_bool_exp
  ): takes_aggregate!
  unfilled_base_amount: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "makes"
"""
type makes_aggregate {
  aggregate: makes_aggregate_fields
  nodes: [makes!]!
}

input makes_aggregate_bool_exp {
  bool_and: makes_aggregate_bool_exp_bool_and
  bool_or: makes_aggregate_bool_exp_bool_or
  count: makes_aggregate_bool_exp_count
}

input makes_aggregate_bool_exp_bool_and {
  arguments: makes_select_column_makes_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: makes_bool_exp
  predicate: Boolean_comparison_exp!
}

input makes_aggregate_bool_exp_bool_or {
  arguments: makes_select_column_makes_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: makes_bool_exp
  predicate: Boolean_comparison_exp!
}

input makes_aggregate_bool_exp_count {
  arguments: [makes_select_column!]
  distinct: Boolean
  filter: makes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "makes"
"""
type makes_aggregate_fields {
  avg: makes_avg_fields
  count(columns: [makes_select_column!], distinct: Boolean): Int!
  max: makes_max_fields
  min: makes_min_fields
  stddev: makes_stddev_fields
  stddev_pop: makes_stddev_pop_fields
  stddev_samp: makes_stddev_samp_fields
  sum: makes_sum_fields
  var_pop: makes_var_pop_fields
  var_samp: makes_var_samp_fields
  variance: makes_variance_fields
}

"""
order by aggregate values of table "makes"
"""
input makes_aggregate_order_by {
  avg: makes_avg_order_by
  count: order_by
  max: makes_max_order_by
  min: makes_min_order_by
  stddev: makes_stddev_order_by
  stddev_pop: makes_stddev_pop_order_by
  stddev_samp: makes_stddev_samp_order_by
  sum: makes_sum_order_by
  var_pop: makes_var_pop_order_by
  var_samp: makes_var_samp_order_by
  variance: makes_variance_order_by
}

"""
input type for inserting array relation for remote table "makes"
"""
input makes_arr_rel_insert_input {
  data: [makes_insert_input!]!

  """upsert condition"""
  on_conflict: makes_on_conflict
}

"""aggregate avg on columns"""
type makes_avg_fields {
  filled_base_amount: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by avg() on columns of table "makes"
"""
input makes_avg_order_by {
  filled_base_amount: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""
Boolean expression to filter rows from the table "makes". All fields are combined with a logical 'AND'.
"""
input makes_bool_exp {
  _and: [makes_bool_exp!]
  _not: makes_bool_exp
  _or: [makes_bool_exp!]
  filled_base_amount: bigint_comparison_exp
  is_active: Boolean_comparison_exp
  market: markets_bool_exp
  market_acct: String_comparison_exp
  order: orders_bool_exp
  order_tx_sig: String_comparison_exp
  quote_price: numeric_comparison_exp
  takes: takes_bool_exp
  takes_aggregate: takes_aggregate_bool_exp
  unfilled_base_amount: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "makes"
"""
enum makes_constraint {
  """
  unique or primary key constraint on columns "order_tx_sig"
  """
  makes_pkey
}

"""
input type for incrementing numeric columns in table "makes"
"""
input makes_inc_input {
  filled_base_amount: bigint
  quote_price: numeric
  unfilled_base_amount: bigint
}

"""
input type for inserting data into table "makes"
"""
input makes_insert_input {
  filled_base_amount: bigint
  is_active: Boolean
  market: markets_obj_rel_insert_input
  market_acct: String
  order: orders_obj_rel_insert_input
  order_tx_sig: String
  quote_price: numeric
  takes: takes_arr_rel_insert_input
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""aggregate max on columns"""
type makes_max_fields {
  filled_base_amount: bigint
  market_acct: String
  order_tx_sig: String
  quote_price: numeric
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "makes"
"""
input makes_max_order_by {
  filled_base_amount: order_by
  market_acct: order_by
  order_tx_sig: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type makes_min_fields {
  filled_base_amount: bigint
  market_acct: String
  order_tx_sig: String
  quote_price: numeric
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "makes"
"""
input makes_min_order_by {
  filled_base_amount: order_by
  market_acct: order_by
  order_tx_sig: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "makes"
"""
type makes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [makes!]!
}

"""
input type for inserting object relation for remote table "makes"
"""
input makes_obj_rel_insert_input {
  data: makes_insert_input!

  """upsert condition"""
  on_conflict: makes_on_conflict
}

"""
on_conflict condition type for table "makes"
"""
input makes_on_conflict {
  constraint: makes_constraint!
  update_columns: [makes_update_column!]! = []
  where: makes_bool_exp
}

"""Ordering options when selecting data from "makes"."""
input makes_order_by {
  filled_base_amount: order_by
  is_active: order_by
  market: markets_order_by
  market_acct: order_by
  order: orders_order_by
  order_tx_sig: order_by
  quote_price: order_by
  takes_aggregate: takes_aggregate_order_by
  unfilled_base_amount: order_by
  updated_at: order_by
}

"""primary key columns input for table: makes"""
input makes_pk_columns_input {
  order_tx_sig: String!
}

"""
select columns of table "makes"
"""
enum makes_select_column {
  """column name"""
  filled_base_amount

  """column name"""
  is_active

  """column name"""
  market_acct

  """column name"""
  order_tx_sig

  """column name"""
  quote_price

  """column name"""
  unfilled_base_amount

  """column name"""
  updated_at
}

"""
select "makes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "makes"
"""
enum makes_select_column_makes_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_active
}

"""
select "makes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "makes"
"""
enum makes_select_column_makes_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_active
}

"""
input type for updating data in table "makes"
"""
input makes_set_input {
  filled_base_amount: bigint
  is_active: Boolean
  market_acct: String
  order_tx_sig: String
  quote_price: numeric
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type makes_stddev_fields {
  filled_base_amount: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by stddev() on columns of table "makes"
"""
input makes_stddev_order_by {
  filled_base_amount: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""aggregate stddev_pop on columns"""
type makes_stddev_pop_fields {
  filled_base_amount: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by stddev_pop() on columns of table "makes"
"""
input makes_stddev_pop_order_by {
  filled_base_amount: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""aggregate stddev_samp on columns"""
type makes_stddev_samp_fields {
  filled_base_amount: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by stddev_samp() on columns of table "makes"
"""
input makes_stddev_samp_order_by {
  filled_base_amount: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""
Streaming cursor of the table "makes"
"""
input makes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: makes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input makes_stream_cursor_value_input {
  filled_base_amount: bigint
  is_active: Boolean
  market_acct: String
  order_tx_sig: String
  quote_price: numeric
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type makes_sum_fields {
  filled_base_amount: bigint
  quote_price: numeric
  unfilled_base_amount: bigint
}

"""
order by sum() on columns of table "makes"
"""
input makes_sum_order_by {
  filled_base_amount: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""
update columns of table "makes"
"""
enum makes_update_column {
  """column name"""
  filled_base_amount

  """column name"""
  is_active

  """column name"""
  market_acct

  """column name"""
  order_tx_sig

  """column name"""
  quote_price

  """column name"""
  unfilled_base_amount

  """column name"""
  updated_at
}

input makes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: makes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: makes_set_input

  """filter the rows which have to be updated"""
  where: makes_bool_exp!
}

"""aggregate var_pop on columns"""
type makes_var_pop_fields {
  filled_base_amount: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by var_pop() on columns of table "makes"
"""
input makes_var_pop_order_by {
  filled_base_amount: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""aggregate var_samp on columns"""
type makes_var_samp_fields {
  filled_base_amount: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by var_samp() on columns of table "makes"
"""
input makes_var_samp_order_by {
  filled_base_amount: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""aggregate variance on columns"""
type makes_variance_fields {
  filled_base_amount: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by variance() on columns of table "makes"
"""
input makes_variance_order_by {
  filled_base_amount: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""
columns and relationships of "markets"
"""
type markets {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint!
  base_maker_fee: smallint!
  base_mint_acct: String!
  base_taker_fee: smallint!
  bids_token_acct: String

  """An array relationship"""
  candles(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): [candles!]!

  """An aggregate relationship"""
  candles_aggregate(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): candles_aggregate!
  create_tx_sig: String!
  created_at: timestamptz!
  inactive_slot: bigint

  """An array relationship"""
  makes(
    """distinct select on columns"""
    distinct_on: [makes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [makes_order_by!]

    """filter the rows returned"""
    where: makes_bool_exp
  ): [makes!]!

  """An aggregate relationship"""
  makes_aggregate(
    """distinct select on columns"""
    distinct_on: [makes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [makes_order_by!]

    """filter the rows returned"""
    where: makes_bool_exp
  ): makes_aggregate!
  market_acct: String!
  market_type: String!

  """An array relationship"""
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """An aggregate relationship"""
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """An array relationship"""
  prices(
    """distinct select on columns"""
    distinct_on: [prices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_order_by!]

    """filter the rows returned"""
    where: prices_bool_exp
  ): [prices!]!

  """An aggregate relationship"""
  prices_aggregate(
    """distinct select on columns"""
    distinct_on: [prices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_order_by!]

    """filter the rows returned"""
    where: prices_bool_exp
  ): prices_aggregate!

  """An object relationship"""
  proposal: proposals
  proposal_acct: String
  quote_lot_size: bigint!
  quote_maker_fee: smallint!
  quote_mint_acct: String!
  quote_taker_fee: smallint!
  quote_tick_size: bigint!

  """An array relationship"""
  takes(
    """distinct select on columns"""
    distinct_on: [takes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [takes_order_by!]

    """filter the rows returned"""
    where: takes_bool_exp
  ): [takes!]!

  """An aggregate relationship"""
  takes_aggregate(
    """distinct select on columns"""
    distinct_on: [takes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [takes_order_by!]

    """filter the rows returned"""
    where: takes_bool_exp
  ): takes_aggregate!

  """An object relationship"""
  token: tokens!

  """An object relationship"""
  tokenAcctByAsksTokenAcct: token_accts

  """An object relationship"""
  tokenAcctByBidsTokenAcct: token_accts

  """An object relationship"""
  tokenByBaseMintAcct: tokens

  """An object relationship"""
  tokenByQuoteMintAcct: tokens!

  """An object relationship"""
  token_acct: token_accts

  """An array relationship"""
  twaps(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): [twaps!]!

  """An aggregate relationship"""
  twaps_aggregate(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): twaps_aggregate!
}

"""
aggregated selection of "markets"
"""
type markets_aggregate {
  aggregate: markets_aggregate_fields
  nodes: [markets!]!
}

input markets_aggregate_bool_exp {
  count: markets_aggregate_bool_exp_count
}

input markets_aggregate_bool_exp_count {
  arguments: [markets_select_column!]
  distinct: Boolean
  filter: markets_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "markets"
"""
type markets_aggregate_fields {
  avg: markets_avg_fields
  count(columns: [markets_select_column!], distinct: Boolean): Int!
  max: markets_max_fields
  min: markets_min_fields
  stddev: markets_stddev_fields
  stddev_pop: markets_stddev_pop_fields
  stddev_samp: markets_stddev_samp_fields
  sum: markets_sum_fields
  var_pop: markets_var_pop_fields
  var_samp: markets_var_samp_fields
  variance: markets_variance_fields
}

"""
order by aggregate values of table "markets"
"""
input markets_aggregate_order_by {
  avg: markets_avg_order_by
  count: order_by
  max: markets_max_order_by
  min: markets_min_order_by
  stddev: markets_stddev_order_by
  stddev_pop: markets_stddev_pop_order_by
  stddev_samp: markets_stddev_samp_order_by
  sum: markets_sum_order_by
  var_pop: markets_var_pop_order_by
  var_samp: markets_var_samp_order_by
  variance: markets_variance_order_by
}

"""
input type for inserting array relation for remote table "markets"
"""
input markets_arr_rel_insert_input {
  data: [markets_insert_input!]!

  """upsert condition"""
  on_conflict: markets_on_conflict
}

"""aggregate avg on columns"""
type markets_avg_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
order by avg() on columns of table "markets"
"""
input markets_avg_order_by {
  active_slot: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_taker_fee: order_by
  inactive_slot: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""
Boolean expression to filter rows from the table "markets". All fields are combined with a logical 'AND'.
"""
input markets_bool_exp {
  _and: [markets_bool_exp!]
  _not: markets_bool_exp
  _or: [markets_bool_exp!]
  active_slot: bigint_comparison_exp
  asks_token_acct: String_comparison_exp
  base_lot_size: bigint_comparison_exp
  base_maker_fee: smallint_comparison_exp
  base_mint_acct: String_comparison_exp
  base_taker_fee: smallint_comparison_exp
  bids_token_acct: String_comparison_exp
  candles: candles_bool_exp
  candles_aggregate: candles_aggregate_bool_exp
  create_tx_sig: String_comparison_exp
  created_at: timestamptz_comparison_exp
  inactive_slot: bigint_comparison_exp
  makes: makes_bool_exp
  makes_aggregate: makes_aggregate_bool_exp
  market_acct: String_comparison_exp
  market_type: String_comparison_exp
  orders: orders_bool_exp
  orders_aggregate: orders_aggregate_bool_exp
  prices: prices_bool_exp
  prices_aggregate: prices_aggregate_bool_exp
  proposal: proposals_bool_exp
  proposal_acct: String_comparison_exp
  quote_lot_size: bigint_comparison_exp
  quote_maker_fee: smallint_comparison_exp
  quote_mint_acct: String_comparison_exp
  quote_taker_fee: smallint_comparison_exp
  quote_tick_size: bigint_comparison_exp
  takes: takes_bool_exp
  takes_aggregate: takes_aggregate_bool_exp
  token: tokens_bool_exp
  tokenAcctByAsksTokenAcct: token_accts_bool_exp
  tokenAcctByBidsTokenAcct: token_accts_bool_exp
  tokenByBaseMintAcct: tokens_bool_exp
  tokenByQuoteMintAcct: tokens_bool_exp
  token_acct: token_accts_bool_exp
  twaps: twaps_bool_exp
  twaps_aggregate: twaps_aggregate_bool_exp
}

"""
unique or primary key constraints on table "markets"
"""
enum markets_constraint {
  """
  unique or primary key constraint on columns "market_acct"
  """
  markets_pkey
}

"""
input type for incrementing numeric columns in table "markets"
"""
input markets_inc_input {
  active_slot: bigint
  base_lot_size: bigint
  base_maker_fee: smallint
  base_taker_fee: smallint
  inactive_slot: bigint
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""
input type for inserting data into table "markets"
"""
input markets_insert_input {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  candles: candles_arr_rel_insert_input
  create_tx_sig: String
  created_at: timestamptz
  inactive_slot: bigint
  makes: makes_arr_rel_insert_input
  market_acct: String
  market_type: String
  orders: orders_arr_rel_insert_input
  prices: prices_arr_rel_insert_input
  proposal: proposals_obj_rel_insert_input
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
  takes: takes_arr_rel_insert_input
  token: tokens_obj_rel_insert_input
  tokenAcctByAsksTokenAcct: token_accts_obj_rel_insert_input
  tokenAcctByBidsTokenAcct: token_accts_obj_rel_insert_input
  tokenByBaseMintAcct: tokens_obj_rel_insert_input
  tokenByQuoteMintAcct: tokens_obj_rel_insert_input
  token_acct: token_accts_obj_rel_insert_input
  twaps: twaps_arr_rel_insert_input
}

"""aggregate max on columns"""
type markets_max_fields {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  created_at: timestamptz
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""
order by max() on columns of table "markets"
"""
input markets_max_order_by {
  active_slot: order_by
  asks_token_acct: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_mint_acct: order_by
  base_taker_fee: order_by
  bids_token_acct: order_by
  create_tx_sig: order_by
  created_at: order_by
  inactive_slot: order_by
  market_acct: order_by
  market_type: order_by
  proposal_acct: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_mint_acct: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""aggregate min on columns"""
type markets_min_fields {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  created_at: timestamptz
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""
order by min() on columns of table "markets"
"""
input markets_min_order_by {
  active_slot: order_by
  asks_token_acct: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_mint_acct: order_by
  base_taker_fee: order_by
  bids_token_acct: order_by
  create_tx_sig: order_by
  created_at: order_by
  inactive_slot: order_by
  market_acct: order_by
  market_type: order_by
  proposal_acct: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_mint_acct: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""
response of any mutation on the table "markets"
"""
type markets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [markets!]!
}

"""
input type for inserting object relation for remote table "markets"
"""
input markets_obj_rel_insert_input {
  data: markets_insert_input!

  """upsert condition"""
  on_conflict: markets_on_conflict
}

"""
on_conflict condition type for table "markets"
"""
input markets_on_conflict {
  constraint: markets_constraint!
  update_columns: [markets_update_column!]! = []
  where: markets_bool_exp
}

"""Ordering options when selecting data from "markets"."""
input markets_order_by {
  active_slot: order_by
  asks_token_acct: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_mint_acct: order_by
  base_taker_fee: order_by
  bids_token_acct: order_by
  candles_aggregate: candles_aggregate_order_by
  create_tx_sig: order_by
  created_at: order_by
  inactive_slot: order_by
  makes_aggregate: makes_aggregate_order_by
  market_acct: order_by
  market_type: order_by
  orders_aggregate: orders_aggregate_order_by
  prices_aggregate: prices_aggregate_order_by
  proposal: proposals_order_by
  proposal_acct: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_mint_acct: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
  takes_aggregate: takes_aggregate_order_by
  token: tokens_order_by
  tokenAcctByAsksTokenAcct: token_accts_order_by
  tokenAcctByBidsTokenAcct: token_accts_order_by
  tokenByBaseMintAcct: tokens_order_by
  tokenByQuoteMintAcct: tokens_order_by
  token_acct: token_accts_order_by
  twaps_aggregate: twaps_aggregate_order_by
}

"""primary key columns input for table: markets"""
input markets_pk_columns_input {
  market_acct: String!
}

"""
select columns of table "markets"
"""
enum markets_select_column {
  """column name"""
  active_slot

  """column name"""
  asks_token_acct

  """column name"""
  base_lot_size

  """column name"""
  base_maker_fee

  """column name"""
  base_mint_acct

  """column name"""
  base_taker_fee

  """column name"""
  bids_token_acct

  """column name"""
  create_tx_sig

  """column name"""
  created_at

  """column name"""
  inactive_slot

  """column name"""
  market_acct

  """column name"""
  market_type

  """column name"""
  proposal_acct

  """column name"""
  quote_lot_size

  """column name"""
  quote_maker_fee

  """column name"""
  quote_mint_acct

  """column name"""
  quote_taker_fee

  """column name"""
  quote_tick_size
}

"""
input type for updating data in table "markets"
"""
input markets_set_input {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  created_at: timestamptz
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""aggregate stddev on columns"""
type markets_stddev_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
order by stddev() on columns of table "markets"
"""
input markets_stddev_order_by {
  active_slot: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_taker_fee: order_by
  inactive_slot: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""aggregate stddev_pop on columns"""
type markets_stddev_pop_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
order by stddev_pop() on columns of table "markets"
"""
input markets_stddev_pop_order_by {
  active_slot: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_taker_fee: order_by
  inactive_slot: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""aggregate stddev_samp on columns"""
type markets_stddev_samp_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
order by stddev_samp() on columns of table "markets"
"""
input markets_stddev_samp_order_by {
  active_slot: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_taker_fee: order_by
  inactive_slot: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""
Streaming cursor of the table "markets"
"""
input markets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: markets_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input markets_stream_cursor_value_input {
  active_slot: bigint
  asks_token_acct: String
  base_lot_size: bigint
  base_maker_fee: smallint
  base_mint_acct: String
  base_taker_fee: smallint
  bids_token_acct: String
  create_tx_sig: String
  created_at: timestamptz
  inactive_slot: bigint
  market_acct: String
  market_type: String
  proposal_acct: String
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_mint_acct: String
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""aggregate sum on columns"""
type markets_sum_fields {
  active_slot: bigint
  base_lot_size: bigint
  base_maker_fee: smallint
  base_taker_fee: smallint
  inactive_slot: bigint
  quote_lot_size: bigint
  quote_maker_fee: smallint
  quote_taker_fee: smallint
  quote_tick_size: bigint
}

"""
order by sum() on columns of table "markets"
"""
input markets_sum_order_by {
  active_slot: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_taker_fee: order_by
  inactive_slot: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""
update columns of table "markets"
"""
enum markets_update_column {
  """column name"""
  active_slot

  """column name"""
  asks_token_acct

  """column name"""
  base_lot_size

  """column name"""
  base_maker_fee

  """column name"""
  base_mint_acct

  """column name"""
  base_taker_fee

  """column name"""
  bids_token_acct

  """column name"""
  create_tx_sig

  """column name"""
  created_at

  """column name"""
  inactive_slot

  """column name"""
  market_acct

  """column name"""
  market_type

  """column name"""
  proposal_acct

  """column name"""
  quote_lot_size

  """column name"""
  quote_maker_fee

  """column name"""
  quote_mint_acct

  """column name"""
  quote_taker_fee

  """column name"""
  quote_tick_size
}

input markets_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: markets_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: markets_set_input

  """filter the rows which have to be updated"""
  where: markets_bool_exp!
}

"""aggregate var_pop on columns"""
type markets_var_pop_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
order by var_pop() on columns of table "markets"
"""
input markets_var_pop_order_by {
  active_slot: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_taker_fee: order_by
  inactive_slot: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""aggregate var_samp on columns"""
type markets_var_samp_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
order by var_samp() on columns of table "markets"
"""
input markets_var_samp_order_by {
  active_slot: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_taker_fee: order_by
  inactive_slot: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""aggregate variance on columns"""
type markets_variance_fields {
  active_slot: Float
  base_lot_size: Float
  base_maker_fee: Float
  base_taker_fee: Float
  inactive_slot: Float
  quote_lot_size: Float
  quote_maker_fee: Float
  quote_taker_fee: Float
  quote_tick_size: Float
}

"""
order by variance() on columns of table "markets"
"""
input markets_variance_order_by {
  active_slot: order_by
  base_lot_size: order_by
  base_maker_fee: order_by
  base_taker_fee: order_by
  inactive_slot: order_by
  quote_lot_size: order_by
  quote_maker_fee: order_by
  quote_taker_fee: order_by
  quote_tick_size: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "candles"
  """
  delete_candles(
    """filter the rows which have to be deleted"""
    where: candles_bool_exp!
  ): candles_mutation_response

  """
  delete single row from the table: "candles"
  """
  delete_candles_by_pk(candle_duration: Int!, market_acct: String!, timestamp: timestamptz!): candles

  """
  delete data from the table: "comments"
  """
  delete_comments(
    """filter the rows which have to be deleted"""
    where: comments_bool_exp!
  ): comments_mutation_response

  """
  delete single row from the table: "comments"
  """
  delete_comments_by_pk(comment_id: bigint!): comments

  """
  delete data from the table: "conditional_vaults"
  """
  delete_conditional_vaults(
    """filter the rows which have to be deleted"""
    where: conditional_vaults_bool_exp!
  ): conditional_vaults_mutation_response

  """
  delete single row from the table: "conditional_vaults"
  """
  delete_conditional_vaults_by_pk(cond_vault_acct: String!): conditional_vaults

  """
  delete data from the table: "dao_details"
  """
  delete_dao_details(
    """filter the rows which have to be deleted"""
    where: dao_details_bool_exp!
  ): dao_details_mutation_response

  """
  delete single row from the table: "dao_details"
  """
  delete_dao_details_by_pk(dao_id: bigint!): dao_details

  """
  delete data from the table: "daos"
  """
  delete_daos(
    """filter the rows which have to be deleted"""
    where: daos_bool_exp!
  ): daos_mutation_response

  """
  delete single row from the table: "daos"
  """
  delete_daos_by_pk(dao_acct: String!): daos

  """
  delete data from the table: "indexer_account_dependencies"
  """
  delete_indexer_account_dependencies(
    """filter the rows which have to be deleted"""
    where: indexer_account_dependencies_bool_exp!
  ): indexer_account_dependencies_mutation_response

  """
  delete single row from the table: "indexer_account_dependencies"
  """
  delete_indexer_account_dependencies_by_pk(acct: String!, name: String!): indexer_account_dependencies

  """
  delete data from the table: "indexers"
  """
  delete_indexers(
    """filter the rows which have to be deleted"""
    where: indexers_bool_exp!
  ): indexers_mutation_response

  """
  delete single row from the table: "indexers"
  """
  delete_indexers_by_pk(name: String!): indexers

  """
  delete data from the table: "makes"
  """
  delete_makes(
    """filter the rows which have to be deleted"""
    where: makes_bool_exp!
  ): makes_mutation_response

  """
  delete single row from the table: "makes"
  """
  delete_makes_by_pk(order_tx_sig: String!): makes

  """
  delete data from the table: "markets"
  """
  delete_markets(
    """filter the rows which have to be deleted"""
    where: markets_bool_exp!
  ): markets_mutation_response

  """
  delete single row from the table: "markets"
  """
  delete_markets_by_pk(market_acct: String!): markets

  """
  delete data from the table: "orders"
  """
  delete_orders(
    """filter the rows which have to be deleted"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  delete single row from the table: "orders"
  """
  delete_orders_by_pk(order_tx_sig: String!): orders

  """
  delete data from the table: "prices"
  """
  delete_prices(
    """filter the rows which have to be deleted"""
    where: prices_bool_exp!
  ): prices_mutation_response

  """
  delete single row from the table: "prices"
  """
  delete_prices_by_pk(created_at: timestamptz!, market_acct: String!): prices

  """
  delete data from the table: "program_system"
  """
  delete_program_system(
    """filter the rows which have to be deleted"""
    where: program_system_bool_exp!
  ): program_system_mutation_response

  """
  delete single row from the table: "program_system"
  """
  delete_program_system_by_pk(system_version: float8!): program_system

  """
  delete data from the table: "programs"
  """
  delete_programs(
    """filter the rows which have to be deleted"""
    where: programs_bool_exp!
  ): programs_mutation_response

  """
  delete single row from the table: "programs"
  """
  delete_programs_by_pk(program_acct: String!): programs

  """
  delete data from the table: "proposal_bars"
  """
  delete_proposal_bars(
    """filter the rows which have to be deleted"""
    where: proposal_bars_bool_exp!
  ): proposal_bars_mutation_response

  """
  delete single row from the table: "proposal_bars"
  """
  delete_proposal_bars_by_pk(bar_size: interval!, bar_start_time: timestamptz!, proposal_acct: String!): proposal_bars

  """
  delete data from the table: "proposal_details"
  """
  delete_proposal_details(
    """filter the rows which have to be deleted"""
    where: proposal_details_bool_exp!
  ): proposal_details_mutation_response

  """
  delete single row from the table: "proposal_details"
  """
  delete_proposal_details_by_pk(proposal_id: bigint!): proposal_details

  """
  delete data from the table: "proposals"
  """
  delete_proposals(
    """filter the rows which have to be deleted"""
    where: proposals_bool_exp!
  ): proposals_mutation_response

  """
  delete single row from the table: "proposals"
  """
  delete_proposals_by_pk(proposal_acct: String!): proposals

  """
  delete data from the table: "reactions"
  """
  delete_reactions(
    """filter the rows which have to be deleted"""
    where: reactions_bool_exp!
  ): reactions_mutation_response

  """
  delete single row from the table: "reactions"
  """
  delete_reactions_by_pk(proposal_acct: String!, reaction: String!, reactor_acct: String!): reactions

  """
  delete data from the table: "sessions"
  """
  delete_sessions(
    """filter the rows which have to be deleted"""
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  delete single row from the table: "sessions"
  """
  delete_sessions_by_pk(id: uuid!): sessions

  """
  delete data from the table: "takes"
  """
  delete_takes(
    """filter the rows which have to be deleted"""
    where: takes_bool_exp!
  ): takes_mutation_response

  """
  delete single row from the table: "takes"
  """
  delete_takes_by_pk(order_tx_sig: String!): takes

  """
  delete data from the table: "token_acct_balances"
  """
  delete_token_acct_balances(
    """filter the rows which have to be deleted"""
    where: token_acct_balances_bool_exp!
  ): token_acct_balances_mutation_response

  """
  delete single row from the table: "token_acct_balances"
  """
  delete_token_acct_balances_by_pk(amount: bigint!, created_at: timestamptz!, mint_acct: String!, token_acct: String!): token_acct_balances

  """
  delete data from the table: "token_accts"
  """
  delete_token_accts(
    """filter the rows which have to be deleted"""
    where: token_accts_bool_exp!
  ): token_accts_mutation_response

  """
  delete single row from the table: "token_accts"
  """
  delete_token_accts_by_pk(token_acct: String!): token_accts

  """
  delete data from the table: "tokens"
  """
  delete_tokens(
    """filter the rows which have to be deleted"""
    where: tokens_bool_exp!
  ): tokens_mutation_response

  """
  delete single row from the table: "tokens"
  """
  delete_tokens_by_pk(mint_acct: String!): tokens

  """
  delete data from the table: "transaction_watcher_transactions"
  """
  delete_transaction_watcher_transactions(
    """filter the rows which have to be deleted"""
    where: transaction_watcher_transactions_bool_exp!
  ): transaction_watcher_transactions_mutation_response

  """
  delete single row from the table: "transaction_watcher_transactions"
  """
  delete_transaction_watcher_transactions_by_pk(tx_sig: String!, watcher_acct: String!): transaction_watcher_transactions

  """
  delete data from the table: "transaction_watchers"
  """
  delete_transaction_watchers(
    """filter the rows which have to be deleted"""
    where: transaction_watchers_bool_exp!
  ): transaction_watchers_mutation_response

  """
  delete single row from the table: "transaction_watchers"
  """
  delete_transaction_watchers_by_pk(acct: String!): transaction_watchers

  """
  delete data from the table: "transactions"
  """
  delete_transactions(
    """filter the rows which have to be deleted"""
    where: transactions_bool_exp!
  ): transactions_mutation_response

  """
  delete single row from the table: "transactions"
  """
  delete_transactions_by_pk(tx_sig: String!): transactions

  """
  delete data from the table: "twaps"
  """
  delete_twaps(
    """filter the rows which have to be deleted"""
    where: twaps_bool_exp!
  ): twaps_mutation_response

  """
  delete single row from the table: "twaps"
  """
  delete_twaps_by_pk(market_acct: String!, updated_slot: bigint!): twaps

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(user_acct: String!): users

  """
  insert data into the table: "candles"
  """
  insert_candles(
    """the rows to be inserted"""
    objects: [candles_insert_input!]!

    """upsert condition"""
    on_conflict: candles_on_conflict
  ): candles_mutation_response

  """
  insert a single row into the table: "candles"
  """
  insert_candles_one(
    """the row to be inserted"""
    object: candles_insert_input!

    """upsert condition"""
    on_conflict: candles_on_conflict
  ): candles

  """
  insert data into the table: "comments"
  """
  insert_comments(
    """the rows to be inserted"""
    objects: [comments_insert_input!]!

    """upsert condition"""
    on_conflict: comments_on_conflict
  ): comments_mutation_response

  """
  insert a single row into the table: "comments"
  """
  insert_comments_one(
    """the row to be inserted"""
    object: comments_insert_input!

    """upsert condition"""
    on_conflict: comments_on_conflict
  ): comments

  """
  insert data into the table: "conditional_vaults"
  """
  insert_conditional_vaults(
    """the rows to be inserted"""
    objects: [conditional_vaults_insert_input!]!

    """upsert condition"""
    on_conflict: conditional_vaults_on_conflict
  ): conditional_vaults_mutation_response

  """
  insert a single row into the table: "conditional_vaults"
  """
  insert_conditional_vaults_one(
    """the row to be inserted"""
    object: conditional_vaults_insert_input!

    """upsert condition"""
    on_conflict: conditional_vaults_on_conflict
  ): conditional_vaults

  """
  insert data into the table: "dao_details"
  """
  insert_dao_details(
    """the rows to be inserted"""
    objects: [dao_details_insert_input!]!

    """upsert condition"""
    on_conflict: dao_details_on_conflict
  ): dao_details_mutation_response

  """
  insert a single row into the table: "dao_details"
  """
  insert_dao_details_one(
    """the row to be inserted"""
    object: dao_details_insert_input!

    """upsert condition"""
    on_conflict: dao_details_on_conflict
  ): dao_details

  """
  insert data into the table: "daos"
  """
  insert_daos(
    """the rows to be inserted"""
    objects: [daos_insert_input!]!

    """upsert condition"""
    on_conflict: daos_on_conflict
  ): daos_mutation_response

  """
  insert a single row into the table: "daos"
  """
  insert_daos_one(
    """the row to be inserted"""
    object: daos_insert_input!

    """upsert condition"""
    on_conflict: daos_on_conflict
  ): daos

  """
  insert data into the table: "indexer_account_dependencies"
  """
  insert_indexer_account_dependencies(
    """the rows to be inserted"""
    objects: [indexer_account_dependencies_insert_input!]!

    """upsert condition"""
    on_conflict: indexer_account_dependencies_on_conflict
  ): indexer_account_dependencies_mutation_response

  """
  insert a single row into the table: "indexer_account_dependencies"
  """
  insert_indexer_account_dependencies_one(
    """the row to be inserted"""
    object: indexer_account_dependencies_insert_input!

    """upsert condition"""
    on_conflict: indexer_account_dependencies_on_conflict
  ): indexer_account_dependencies

  """
  insert data into the table: "indexers"
  """
  insert_indexers(
    """the rows to be inserted"""
    objects: [indexers_insert_input!]!

    """upsert condition"""
    on_conflict: indexers_on_conflict
  ): indexers_mutation_response

  """
  insert a single row into the table: "indexers"
  """
  insert_indexers_one(
    """the row to be inserted"""
    object: indexers_insert_input!

    """upsert condition"""
    on_conflict: indexers_on_conflict
  ): indexers

  """
  insert data into the table: "makes"
  """
  insert_makes(
    """the rows to be inserted"""
    objects: [makes_insert_input!]!

    """upsert condition"""
    on_conflict: makes_on_conflict
  ): makes_mutation_response

  """
  insert a single row into the table: "makes"
  """
  insert_makes_one(
    """the row to be inserted"""
    object: makes_insert_input!

    """upsert condition"""
    on_conflict: makes_on_conflict
  ): makes

  """
  insert data into the table: "markets"
  """
  insert_markets(
    """the rows to be inserted"""
    objects: [markets_insert_input!]!

    """upsert condition"""
    on_conflict: markets_on_conflict
  ): markets_mutation_response

  """
  insert a single row into the table: "markets"
  """
  insert_markets_one(
    """the row to be inserted"""
    object: markets_insert_input!

    """upsert condition"""
    on_conflict: markets_on_conflict
  ): markets

  """
  insert data into the table: "orders"
  """
  insert_orders(
    """the rows to be inserted"""
    objects: [orders_insert_input!]!

    """upsert condition"""
    on_conflict: orders_on_conflict
  ): orders_mutation_response

  """
  insert a single row into the table: "orders"
  """
  insert_orders_one(
    """the row to be inserted"""
    object: orders_insert_input!

    """upsert condition"""
    on_conflict: orders_on_conflict
  ): orders

  """
  insert data into the table: "prices"
  """
  insert_prices(
    """the rows to be inserted"""
    objects: [prices_insert_input!]!

    """upsert condition"""
    on_conflict: prices_on_conflict
  ): prices_mutation_response

  """
  insert a single row into the table: "prices"
  """
  insert_prices_one(
    """the row to be inserted"""
    object: prices_insert_input!

    """upsert condition"""
    on_conflict: prices_on_conflict
  ): prices

  """
  insert data into the table: "program_system"
  """
  insert_program_system(
    """the rows to be inserted"""
    objects: [program_system_insert_input!]!

    """upsert condition"""
    on_conflict: program_system_on_conflict
  ): program_system_mutation_response

  """
  insert a single row into the table: "program_system"
  """
  insert_program_system_one(
    """the row to be inserted"""
    object: program_system_insert_input!

    """upsert condition"""
    on_conflict: program_system_on_conflict
  ): program_system

  """
  insert data into the table: "programs"
  """
  insert_programs(
    """the rows to be inserted"""
    objects: [programs_insert_input!]!

    """upsert condition"""
    on_conflict: programs_on_conflict
  ): programs_mutation_response

  """
  insert a single row into the table: "programs"
  """
  insert_programs_one(
    """the row to be inserted"""
    object: programs_insert_input!

    """upsert condition"""
    on_conflict: programs_on_conflict
  ): programs

  """
  insert data into the table: "proposal_bars"
  """
  insert_proposal_bars(
    """the rows to be inserted"""
    objects: [proposal_bars_insert_input!]!

    """upsert condition"""
    on_conflict: proposal_bars_on_conflict
  ): proposal_bars_mutation_response

  """
  insert a single row into the table: "proposal_bars"
  """
  insert_proposal_bars_one(
    """the row to be inserted"""
    object: proposal_bars_insert_input!

    """upsert condition"""
    on_conflict: proposal_bars_on_conflict
  ): proposal_bars

  """
  insert data into the table: "proposal_details"
  """
  insert_proposal_details(
    """the rows to be inserted"""
    objects: [proposal_details_insert_input!]!

    """upsert condition"""
    on_conflict: proposal_details_on_conflict
  ): proposal_details_mutation_response

  """
  insert a single row into the table: "proposal_details"
  """
  insert_proposal_details_one(
    """the row to be inserted"""
    object: proposal_details_insert_input!

    """upsert condition"""
    on_conflict: proposal_details_on_conflict
  ): proposal_details

  """
  insert data into the table: "proposals"
  """
  insert_proposals(
    """the rows to be inserted"""
    objects: [proposals_insert_input!]!

    """upsert condition"""
    on_conflict: proposals_on_conflict
  ): proposals_mutation_response

  """
  insert a single row into the table: "proposals"
  """
  insert_proposals_one(
    """the row to be inserted"""
    object: proposals_insert_input!

    """upsert condition"""
    on_conflict: proposals_on_conflict
  ): proposals

  """
  insert data into the table: "reactions"
  """
  insert_reactions(
    """the rows to be inserted"""
    objects: [reactions_insert_input!]!

    """upsert condition"""
    on_conflict: reactions_on_conflict
  ): reactions_mutation_response

  """
  insert a single row into the table: "reactions"
  """
  insert_reactions_one(
    """the row to be inserted"""
    object: reactions_insert_input!

    """upsert condition"""
    on_conflict: reactions_on_conflict
  ): reactions

  """
  insert data into the table: "sessions"
  """
  insert_sessions(
    """the rows to be inserted"""
    objects: [sessions_insert_input!]!

    """upsert condition"""
    on_conflict: sessions_on_conflict
  ): sessions_mutation_response

  """
  insert a single row into the table: "sessions"
  """
  insert_sessions_one(
    """the row to be inserted"""
    object: sessions_insert_input!

    """upsert condition"""
    on_conflict: sessions_on_conflict
  ): sessions

  """
  insert data into the table: "takes"
  """
  insert_takes(
    """the rows to be inserted"""
    objects: [takes_insert_input!]!

    """upsert condition"""
    on_conflict: takes_on_conflict
  ): takes_mutation_response

  """
  insert a single row into the table: "takes"
  """
  insert_takes_one(
    """the row to be inserted"""
    object: takes_insert_input!

    """upsert condition"""
    on_conflict: takes_on_conflict
  ): takes

  """
  insert data into the table: "token_acct_balances"
  """
  insert_token_acct_balances(
    """the rows to be inserted"""
    objects: [token_acct_balances_insert_input!]!

    """upsert condition"""
    on_conflict: token_acct_balances_on_conflict
  ): token_acct_balances_mutation_response

  """
  insert a single row into the table: "token_acct_balances"
  """
  insert_token_acct_balances_one(
    """the row to be inserted"""
    object: token_acct_balances_insert_input!

    """upsert condition"""
    on_conflict: token_acct_balances_on_conflict
  ): token_acct_balances

  """
  insert data into the table: "token_accts"
  """
  insert_token_accts(
    """the rows to be inserted"""
    objects: [token_accts_insert_input!]!

    """upsert condition"""
    on_conflict: token_accts_on_conflict
  ): token_accts_mutation_response

  """
  insert a single row into the table: "token_accts"
  """
  insert_token_accts_one(
    """the row to be inserted"""
    object: token_accts_insert_input!

    """upsert condition"""
    on_conflict: token_accts_on_conflict
  ): token_accts

  """
  insert data into the table: "tokens"
  """
  insert_tokens(
    """the rows to be inserted"""
    objects: [tokens_insert_input!]!

    """upsert condition"""
    on_conflict: tokens_on_conflict
  ): tokens_mutation_response

  """
  insert a single row into the table: "tokens"
  """
  insert_tokens_one(
    """the row to be inserted"""
    object: tokens_insert_input!

    """upsert condition"""
    on_conflict: tokens_on_conflict
  ): tokens

  """
  insert data into the table: "transaction_watcher_transactions"
  """
  insert_transaction_watcher_transactions(
    """the rows to be inserted"""
    objects: [transaction_watcher_transactions_insert_input!]!

    """upsert condition"""
    on_conflict: transaction_watcher_transactions_on_conflict
  ): transaction_watcher_transactions_mutation_response

  """
  insert a single row into the table: "transaction_watcher_transactions"
  """
  insert_transaction_watcher_transactions_one(
    """the row to be inserted"""
    object: transaction_watcher_transactions_insert_input!

    """upsert condition"""
    on_conflict: transaction_watcher_transactions_on_conflict
  ): transaction_watcher_transactions

  """
  insert data into the table: "transaction_watchers"
  """
  insert_transaction_watchers(
    """the rows to be inserted"""
    objects: [transaction_watchers_insert_input!]!

    """upsert condition"""
    on_conflict: transaction_watchers_on_conflict
  ): transaction_watchers_mutation_response

  """
  insert a single row into the table: "transaction_watchers"
  """
  insert_transaction_watchers_one(
    """the row to be inserted"""
    object: transaction_watchers_insert_input!

    """upsert condition"""
    on_conflict: transaction_watchers_on_conflict
  ): transaction_watchers

  """
  insert data into the table: "transactions"
  """
  insert_transactions(
    """the rows to be inserted"""
    objects: [transactions_insert_input!]!

    """upsert condition"""
    on_conflict: transactions_on_conflict
  ): transactions_mutation_response

  """
  insert a single row into the table: "transactions"
  """
  insert_transactions_one(
    """the row to be inserted"""
    object: transactions_insert_input!

    """upsert condition"""
    on_conflict: transactions_on_conflict
  ): transactions

  """
  insert data into the table: "twaps"
  """
  insert_twaps(
    """the rows to be inserted"""
    objects: [twaps_insert_input!]!

    """upsert condition"""
    on_conflict: twaps_on_conflict
  ): twaps_mutation_response

  """
  insert a single row into the table: "twaps"
  """
  insert_twaps_one(
    """the row to be inserted"""
    object: twaps_insert_input!

    """upsert condition"""
    on_conflict: twaps_on_conflict
  ): twaps

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "candles"
  """
  update_candles(
    """increments the numeric columns with given value of the filtered values"""
    _inc: candles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: candles_set_input

    """filter the rows which have to be updated"""
    where: candles_bool_exp!
  ): candles_mutation_response

  """
  update single row of the table: "candles"
  """
  update_candles_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: candles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: candles_set_input
    pk_columns: candles_pk_columns_input!
  ): candles

  """
  update multiples rows of table: "candles"
  """
  update_candles_many(
    """updates to execute, in order"""
    updates: [candles_updates!]!
  ): [candles_mutation_response]

  """
  update data of the table: "comments"
  """
  update_comments(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_set_input

    """filter the rows which have to be updated"""
    where: comments_bool_exp!
  ): comments_mutation_response

  """
  update single row of the table: "comments"
  """
  update_comments_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_set_input
    pk_columns: comments_pk_columns_input!
  ): comments

  """
  update multiples rows of table: "comments"
  """
  update_comments_many(
    """updates to execute, in order"""
    updates: [comments_updates!]!
  ): [comments_mutation_response]

  """
  update data of the table: "conditional_vaults"
  """
  update_conditional_vaults(
    """sets the columns of the filtered rows to the given values"""
    _set: conditional_vaults_set_input

    """filter the rows which have to be updated"""
    where: conditional_vaults_bool_exp!
  ): conditional_vaults_mutation_response

  """
  update single row of the table: "conditional_vaults"
  """
  update_conditional_vaults_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: conditional_vaults_set_input
    pk_columns: conditional_vaults_pk_columns_input!
  ): conditional_vaults

  """
  update multiples rows of table: "conditional_vaults"
  """
  update_conditional_vaults_many(
    """updates to execute, in order"""
    updates: [conditional_vaults_updates!]!
  ): [conditional_vaults_mutation_response]

  """
  update data of the table: "dao_details"
  """
  update_dao_details(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: dao_details_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: dao_details_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: dao_details_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: dao_details_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: dao_details_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: dao_details_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: dao_details_set_input

    """filter the rows which have to be updated"""
    where: dao_details_bool_exp!
  ): dao_details_mutation_response

  """
  update single row of the table: "dao_details"
  """
  update_dao_details_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: dao_details_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: dao_details_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: dao_details_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: dao_details_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: dao_details_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: dao_details_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: dao_details_set_input
    pk_columns: dao_details_pk_columns_input!
  ): dao_details

  """
  update multiples rows of table: "dao_details"
  """
  update_dao_details_many(
    """updates to execute, in order"""
    updates: [dao_details_updates!]!
  ): [dao_details_mutation_response]

  """
  update data of the table: "daos"
  """
  update_daos(
    """increments the numeric columns with given value of the filtered values"""
    _inc: daos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: daos_set_input

    """filter the rows which have to be updated"""
    where: daos_bool_exp!
  ): daos_mutation_response

  """
  update single row of the table: "daos"
  """
  update_daos_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: daos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: daos_set_input
    pk_columns: daos_pk_columns_input!
  ): daos

  """
  update multiples rows of table: "daos"
  """
  update_daos_many(
    """updates to execute, in order"""
    updates: [daos_updates!]!
  ): [daos_mutation_response]

  """
  update data of the table: "indexer_account_dependencies"
  """
  update_indexer_account_dependencies(
    """sets the columns of the filtered rows to the given values"""
    _set: indexer_account_dependencies_set_input

    """filter the rows which have to be updated"""
    where: indexer_account_dependencies_bool_exp!
  ): indexer_account_dependencies_mutation_response

  """
  update single row of the table: "indexer_account_dependencies"
  """
  update_indexer_account_dependencies_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: indexer_account_dependencies_set_input
    pk_columns: indexer_account_dependencies_pk_columns_input!
  ): indexer_account_dependencies

  """
  update multiples rows of table: "indexer_account_dependencies"
  """
  update_indexer_account_dependencies_many(
    """updates to execute, in order"""
    updates: [indexer_account_dependencies_updates!]!
  ): [indexer_account_dependencies_mutation_response]

  """
  update data of the table: "indexers"
  """
  update_indexers(
    """increments the numeric columns with given value of the filtered values"""
    _inc: indexers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: indexers_set_input

    """filter the rows which have to be updated"""
    where: indexers_bool_exp!
  ): indexers_mutation_response

  """
  update single row of the table: "indexers"
  """
  update_indexers_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: indexers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: indexers_set_input
    pk_columns: indexers_pk_columns_input!
  ): indexers

  """
  update multiples rows of table: "indexers"
  """
  update_indexers_many(
    """updates to execute, in order"""
    updates: [indexers_updates!]!
  ): [indexers_mutation_response]

  """
  update data of the table: "makes"
  """
  update_makes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: makes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: makes_set_input

    """filter the rows which have to be updated"""
    where: makes_bool_exp!
  ): makes_mutation_response

  """
  update single row of the table: "makes"
  """
  update_makes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: makes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: makes_set_input
    pk_columns: makes_pk_columns_input!
  ): makes

  """
  update multiples rows of table: "makes"
  """
  update_makes_many(
    """updates to execute, in order"""
    updates: [makes_updates!]!
  ): [makes_mutation_response]

  """
  update data of the table: "markets"
  """
  update_markets(
    """increments the numeric columns with given value of the filtered values"""
    _inc: markets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: markets_set_input

    """filter the rows which have to be updated"""
    where: markets_bool_exp!
  ): markets_mutation_response

  """
  update single row of the table: "markets"
  """
  update_markets_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: markets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: markets_set_input
    pk_columns: markets_pk_columns_input!
  ): markets

  """
  update multiples rows of table: "markets"
  """
  update_markets_many(
    """updates to execute, in order"""
    updates: [markets_updates!]!
  ): [markets_mutation_response]

  """
  update data of the table: "orders"
  """
  update_orders(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input

    """filter the rows which have to be updated"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  update single row of the table: "orders"
  """
  update_orders_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input
    pk_columns: orders_pk_columns_input!
  ): orders

  """
  update multiples rows of table: "orders"
  """
  update_orders_many(
    """updates to execute, in order"""
    updates: [orders_updates!]!
  ): [orders_mutation_response]

  """
  update data of the table: "prices"
  """
  update_prices(
    """increments the numeric columns with given value of the filtered values"""
    _inc: prices_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: prices_set_input

    """filter the rows which have to be updated"""
    where: prices_bool_exp!
  ): prices_mutation_response

  """
  update single row of the table: "prices"
  """
  update_prices_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: prices_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: prices_set_input
    pk_columns: prices_pk_columns_input!
  ): prices

  """
  update multiples rows of table: "prices"
  """
  update_prices_many(
    """updates to execute, in order"""
    updates: [prices_updates!]!
  ): [prices_mutation_response]

  """
  update data of the table: "program_system"
  """
  update_program_system(
    """increments the numeric columns with given value of the filtered values"""
    _inc: program_system_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: program_system_set_input

    """filter the rows which have to be updated"""
    where: program_system_bool_exp!
  ): program_system_mutation_response

  """
  update single row of the table: "program_system"
  """
  update_program_system_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: program_system_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: program_system_set_input
    pk_columns: program_system_pk_columns_input!
  ): program_system

  """
  update multiples rows of table: "program_system"
  """
  update_program_system_many(
    """updates to execute, in order"""
    updates: [program_system_updates!]!
  ): [program_system_mutation_response]

  """
  update data of the table: "programs"
  """
  update_programs(
    """increments the numeric columns with given value of the filtered values"""
    _inc: programs_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: programs_set_input

    """filter the rows which have to be updated"""
    where: programs_bool_exp!
  ): programs_mutation_response

  """
  update single row of the table: "programs"
  """
  update_programs_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: programs_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: programs_set_input
    pk_columns: programs_pk_columns_input!
  ): programs

  """
  update multiples rows of table: "programs"
  """
  update_programs_many(
    """updates to execute, in order"""
    updates: [programs_updates!]!
  ): [programs_mutation_response]

  """
  update data of the table: "proposal_bars"
  """
  update_proposal_bars(
    """increments the numeric columns with given value of the filtered values"""
    _inc: proposal_bars_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposal_bars_set_input

    """filter the rows which have to be updated"""
    where: proposal_bars_bool_exp!
  ): proposal_bars_mutation_response

  """
  update single row of the table: "proposal_bars"
  """
  update_proposal_bars_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: proposal_bars_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposal_bars_set_input
    pk_columns: proposal_bars_pk_columns_input!
  ): proposal_bars

  """
  update multiples rows of table: "proposal_bars"
  """
  update_proposal_bars_many(
    """updates to execute, in order"""
    updates: [proposal_bars_updates!]!
  ): [proposal_bars_mutation_response]

  """
  update data of the table: "proposal_details"
  """
  update_proposal_details(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: proposal_details_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: proposal_details_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: proposal_details_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: proposal_details_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: proposal_details_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: proposal_details_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposal_details_set_input

    """filter the rows which have to be updated"""
    where: proposal_details_bool_exp!
  ): proposal_details_mutation_response

  """
  update single row of the table: "proposal_details"
  """
  update_proposal_details_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: proposal_details_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: proposal_details_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: proposal_details_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: proposal_details_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: proposal_details_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: proposal_details_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposal_details_set_input
    pk_columns: proposal_details_pk_columns_input!
  ): proposal_details

  """
  update multiples rows of table: "proposal_details"
  """
  update_proposal_details_many(
    """updates to execute, in order"""
    updates: [proposal_details_updates!]!
  ): [proposal_details_mutation_response]

  """
  update data of the table: "proposals"
  """
  update_proposals(
    """increments the numeric columns with given value of the filtered values"""
    _inc: proposals_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposals_set_input

    """filter the rows which have to be updated"""
    where: proposals_bool_exp!
  ): proposals_mutation_response

  """
  update single row of the table: "proposals"
  """
  update_proposals_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: proposals_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposals_set_input
    pk_columns: proposals_pk_columns_input!
  ): proposals

  """
  update multiples rows of table: "proposals"
  """
  update_proposals_many(
    """updates to execute, in order"""
    updates: [proposals_updates!]!
  ): [proposals_mutation_response]

  """
  update data of the table: "reactions"
  """
  update_reactions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: reactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reactions_set_input

    """filter the rows which have to be updated"""
    where: reactions_bool_exp!
  ): reactions_mutation_response

  """
  update single row of the table: "reactions"
  """
  update_reactions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: reactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reactions_set_input
    pk_columns: reactions_pk_columns_input!
  ): reactions

  """
  update multiples rows of table: "reactions"
  """
  update_reactions_many(
    """updates to execute, in order"""
    updates: [reactions_updates!]!
  ): [reactions_mutation_response]

  """
  update data of the table: "sessions"
  """
  update_sessions(
    """sets the columns of the filtered rows to the given values"""
    _set: sessions_set_input

    """filter the rows which have to be updated"""
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  update single row of the table: "sessions"
  """
  update_sessions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: sessions_set_input
    pk_columns: sessions_pk_columns_input!
  ): sessions

  """
  update multiples rows of table: "sessions"
  """
  update_sessions_many(
    """updates to execute, in order"""
    updates: [sessions_updates!]!
  ): [sessions_mutation_response]

  """
  update data of the table: "takes"
  """
  update_takes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: takes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: takes_set_input

    """filter the rows which have to be updated"""
    where: takes_bool_exp!
  ): takes_mutation_response

  """
  update single row of the table: "takes"
  """
  update_takes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: takes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: takes_set_input
    pk_columns: takes_pk_columns_input!
  ): takes

  """
  update multiples rows of table: "takes"
  """
  update_takes_many(
    """updates to execute, in order"""
    updates: [takes_updates!]!
  ): [takes_mutation_response]

  """
  update data of the table: "token_acct_balances"
  """
  update_token_acct_balances(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_acct_balances_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_acct_balances_set_input

    """filter the rows which have to be updated"""
    where: token_acct_balances_bool_exp!
  ): token_acct_balances_mutation_response

  """
  update single row of the table: "token_acct_balances"
  """
  update_token_acct_balances_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_acct_balances_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_acct_balances_set_input
    pk_columns: token_acct_balances_pk_columns_input!
  ): token_acct_balances

  """
  update multiples rows of table: "token_acct_balances"
  """
  update_token_acct_balances_many(
    """updates to execute, in order"""
    updates: [token_acct_balances_updates!]!
  ): [token_acct_balances_mutation_response]

  """
  update data of the table: "token_accts"
  """
  update_token_accts(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_accts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_accts_set_input

    """filter the rows which have to be updated"""
    where: token_accts_bool_exp!
  ): token_accts_mutation_response

  """
  update single row of the table: "token_accts"
  """
  update_token_accts_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: token_accts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: token_accts_set_input
    pk_columns: token_accts_pk_columns_input!
  ): token_accts

  """
  update multiples rows of table: "token_accts"
  """
  update_token_accts_many(
    """updates to execute, in order"""
    updates: [token_accts_updates!]!
  ): [token_accts_mutation_response]

  """
  update data of the table: "tokens"
  """
  update_tokens(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tokens_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tokens_set_input

    """filter the rows which have to be updated"""
    where: tokens_bool_exp!
  ): tokens_mutation_response

  """
  update single row of the table: "tokens"
  """
  update_tokens_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tokens_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tokens_set_input
    pk_columns: tokens_pk_columns_input!
  ): tokens

  """
  update multiples rows of table: "tokens"
  """
  update_tokens_many(
    """updates to execute, in order"""
    updates: [tokens_updates!]!
  ): [tokens_mutation_response]

  """
  update data of the table: "transaction_watcher_transactions"
  """
  update_transaction_watcher_transactions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: transaction_watcher_transactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: transaction_watcher_transactions_set_input

    """filter the rows which have to be updated"""
    where: transaction_watcher_transactions_bool_exp!
  ): transaction_watcher_transactions_mutation_response

  """
  update single row of the table: "transaction_watcher_transactions"
  """
  update_transaction_watcher_transactions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: transaction_watcher_transactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: transaction_watcher_transactions_set_input
    pk_columns: transaction_watcher_transactions_pk_columns_input!
  ): transaction_watcher_transactions

  """
  update multiples rows of table: "transaction_watcher_transactions"
  """
  update_transaction_watcher_transactions_many(
    """updates to execute, in order"""
    updates: [transaction_watcher_transactions_updates!]!
  ): [transaction_watcher_transactions_mutation_response]

  """
  update data of the table: "transaction_watchers"
  """
  update_transaction_watchers(
    """increments the numeric columns with given value of the filtered values"""
    _inc: transaction_watchers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: transaction_watchers_set_input

    """filter the rows which have to be updated"""
    where: transaction_watchers_bool_exp!
  ): transaction_watchers_mutation_response

  """
  update single row of the table: "transaction_watchers"
  """
  update_transaction_watchers_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: transaction_watchers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: transaction_watchers_set_input
    pk_columns: transaction_watchers_pk_columns_input!
  ): transaction_watchers

  """
  update multiples rows of table: "transaction_watchers"
  """
  update_transaction_watchers_many(
    """updates to execute, in order"""
    updates: [transaction_watchers_updates!]!
  ): [transaction_watchers_mutation_response]

  """
  update data of the table: "transactions"
  """
  update_transactions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: transactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: transactions_set_input

    """filter the rows which have to be updated"""
    where: transactions_bool_exp!
  ): transactions_mutation_response

  """
  update single row of the table: "transactions"
  """
  update_transactions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: transactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: transactions_set_input
    pk_columns: transactions_pk_columns_input!
  ): transactions

  """
  update multiples rows of table: "transactions"
  """
  update_transactions_many(
    """updates to execute, in order"""
    updates: [transactions_updates!]!
  ): [transactions_mutation_response]

  """
  update data of the table: "twaps"
  """
  update_twaps(
    """increments the numeric columns with given value of the filtered values"""
    _inc: twaps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: twaps_set_input

    """filter the rows which have to be updated"""
    where: twaps_bool_exp!
  ): twaps_mutation_response

  """
  update single row of the table: "twaps"
  """
  update_twaps_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: twaps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: twaps_set_input
    pk_columns: twaps_pk_columns_input!
  ): twaps

  """
  update multiples rows of table: "twaps"
  """
  update_twaps_many(
    """updates to execute, in order"""
    updates: [twaps_updates!]!
  ): [twaps_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "orders"
"""
type orders {
  actor_acct: String!
  cancel_block: bigint
  cancel_time: timestamptz
  cancel_tx_sig: String
  filled_base_amount: bigint!
  is_active: Boolean!

  """An object relationship"""
  make: makes

  """An object relationship"""
  market: markets!
  market_acct: String!
  order_block: bigint!
  order_time: timestamptz!
  order_tx_sig: String!
  quote_price: numeric!
  side: String!

  """An object relationship"""
  take: takes

  """An object relationship"""
  transaction: transactions
  unfilled_base_amount: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "orders"
"""
type orders_aggregate {
  aggregate: orders_aggregate_fields
  nodes: [orders!]!
}

input orders_aggregate_bool_exp {
  bool_and: orders_aggregate_bool_exp_bool_and
  bool_or: orders_aggregate_bool_exp_bool_or
  count: orders_aggregate_bool_exp_count
}

input orders_aggregate_bool_exp_bool_and {
  arguments: orders_select_column_orders_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: orders_bool_exp
  predicate: Boolean_comparison_exp!
}

input orders_aggregate_bool_exp_bool_or {
  arguments: orders_select_column_orders_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: orders_bool_exp
  predicate: Boolean_comparison_exp!
}

input orders_aggregate_bool_exp_count {
  arguments: [orders_select_column!]
  distinct: Boolean
  filter: orders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "orders"
"""
type orders_aggregate_fields {
  avg: orders_avg_fields
  count(columns: [orders_select_column!], distinct: Boolean): Int!
  max: orders_max_fields
  min: orders_min_fields
  stddev: orders_stddev_fields
  stddev_pop: orders_stddev_pop_fields
  stddev_samp: orders_stddev_samp_fields
  sum: orders_sum_fields
  var_pop: orders_var_pop_fields
  var_samp: orders_var_samp_fields
  variance: orders_variance_fields
}

"""
order by aggregate values of table "orders"
"""
input orders_aggregate_order_by {
  avg: orders_avg_order_by
  count: order_by
  max: orders_max_order_by
  min: orders_min_order_by
  stddev: orders_stddev_order_by
  stddev_pop: orders_stddev_pop_order_by
  stddev_samp: orders_stddev_samp_order_by
  sum: orders_sum_order_by
  var_pop: orders_var_pop_order_by
  var_samp: orders_var_samp_order_by
  variance: orders_variance_order_by
}

"""
input type for inserting array relation for remote table "orders"
"""
input orders_arr_rel_insert_input {
  data: [orders_insert_input!]!

  """upsert condition"""
  on_conflict: orders_on_conflict
}

"""aggregate avg on columns"""
type orders_avg_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by avg() on columns of table "orders"
"""
input orders_avg_order_by {
  cancel_block: order_by
  filled_base_amount: order_by
  order_block: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""
Boolean expression to filter rows from the table "orders". All fields are combined with a logical 'AND'.
"""
input orders_bool_exp {
  _and: [orders_bool_exp!]
  _not: orders_bool_exp
  _or: [orders_bool_exp!]
  actor_acct: String_comparison_exp
  cancel_block: bigint_comparison_exp
  cancel_time: timestamptz_comparison_exp
  cancel_tx_sig: String_comparison_exp
  filled_base_amount: bigint_comparison_exp
  is_active: Boolean_comparison_exp
  make: makes_bool_exp
  market: markets_bool_exp
  market_acct: String_comparison_exp
  order_block: bigint_comparison_exp
  order_time: timestamptz_comparison_exp
  order_tx_sig: String_comparison_exp
  quote_price: numeric_comparison_exp
  side: String_comparison_exp
  take: takes_bool_exp
  transaction: transactions_bool_exp
  unfilled_base_amount: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "orders"
"""
enum orders_constraint {
  """
  unique or primary key constraint on columns "order_tx_sig"
  """
  orders_pkey
}

"""
input type for incrementing numeric columns in table "orders"
"""
input orders_inc_input {
  cancel_block: bigint
  filled_base_amount: bigint
  order_block: bigint
  quote_price: numeric
  unfilled_base_amount: bigint
}

"""
input type for inserting data into table "orders"
"""
input orders_insert_input {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamptz
  cancel_tx_sig: String
  filled_base_amount: bigint
  is_active: Boolean
  make: makes_obj_rel_insert_input
  market: markets_obj_rel_insert_input
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  side: String
  take: takes_obj_rel_insert_input
  transaction: transactions_obj_rel_insert_input
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""aggregate max on columns"""
type orders_max_fields {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamptz
  cancel_tx_sig: String
  filled_base_amount: bigint
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "orders"
"""
input orders_max_order_by {
  actor_acct: order_by
  cancel_block: order_by
  cancel_time: order_by
  cancel_tx_sig: order_by
  filled_base_amount: order_by
  market_acct: order_by
  order_block: order_by
  order_time: order_by
  order_tx_sig: order_by
  quote_price: order_by
  side: order_by
  unfilled_base_amount: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type orders_min_fields {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamptz
  cancel_tx_sig: String
  filled_base_amount: bigint
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "orders"
"""
input orders_min_order_by {
  actor_acct: order_by
  cancel_block: order_by
  cancel_time: order_by
  cancel_tx_sig: order_by
  filled_base_amount: order_by
  market_acct: order_by
  order_block: order_by
  order_time: order_by
  order_tx_sig: order_by
  quote_price: order_by
  side: order_by
  unfilled_base_amount: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "orders"
"""
type orders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [orders!]!
}

"""
input type for inserting object relation for remote table "orders"
"""
input orders_obj_rel_insert_input {
  data: orders_insert_input!

  """upsert condition"""
  on_conflict: orders_on_conflict
}

"""
on_conflict condition type for table "orders"
"""
input orders_on_conflict {
  constraint: orders_constraint!
  update_columns: [orders_update_column!]! = []
  where: orders_bool_exp
}

"""Ordering options when selecting data from "orders"."""
input orders_order_by {
  actor_acct: order_by
  cancel_block: order_by
  cancel_time: order_by
  cancel_tx_sig: order_by
  filled_base_amount: order_by
  is_active: order_by
  make: makes_order_by
  market: markets_order_by
  market_acct: order_by
  order_block: order_by
  order_time: order_by
  order_tx_sig: order_by
  quote_price: order_by
  side: order_by
  take: takes_order_by
  transaction: transactions_order_by
  unfilled_base_amount: order_by
  updated_at: order_by
}

"""primary key columns input for table: orders"""
input orders_pk_columns_input {
  order_tx_sig: String!
}

"""
select columns of table "orders"
"""
enum orders_select_column {
  """column name"""
  actor_acct

  """column name"""
  cancel_block

  """column name"""
  cancel_time

  """column name"""
  cancel_tx_sig

  """column name"""
  filled_base_amount

  """column name"""
  is_active

  """column name"""
  market_acct

  """column name"""
  order_block

  """column name"""
  order_time

  """column name"""
  order_tx_sig

  """column name"""
  quote_price

  """column name"""
  side

  """column name"""
  unfilled_base_amount

  """column name"""
  updated_at
}

"""
select "orders_aggregate_bool_exp_bool_and_arguments_columns" columns of table "orders"
"""
enum orders_select_column_orders_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_active
}

"""
select "orders_aggregate_bool_exp_bool_or_arguments_columns" columns of table "orders"
"""
enum orders_select_column_orders_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_active
}

"""
input type for updating data in table "orders"
"""
input orders_set_input {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamptz
  cancel_tx_sig: String
  filled_base_amount: bigint
  is_active: Boolean
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type orders_stddev_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by stddev() on columns of table "orders"
"""
input orders_stddev_order_by {
  cancel_block: order_by
  filled_base_amount: order_by
  order_block: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""aggregate stddev_pop on columns"""
type orders_stddev_pop_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by stddev_pop() on columns of table "orders"
"""
input orders_stddev_pop_order_by {
  cancel_block: order_by
  filled_base_amount: order_by
  order_block: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""aggregate stddev_samp on columns"""
type orders_stddev_samp_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by stddev_samp() on columns of table "orders"
"""
input orders_stddev_samp_order_by {
  cancel_block: order_by
  filled_base_amount: order_by
  order_block: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""
Streaming cursor of the table "orders"
"""
input orders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: orders_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input orders_stream_cursor_value_input {
  actor_acct: String
  cancel_block: bigint
  cancel_time: timestamptz
  cancel_tx_sig: String
  filled_base_amount: bigint
  is_active: Boolean
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  side: String
  unfilled_base_amount: bigint
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type orders_sum_fields {
  cancel_block: bigint
  filled_base_amount: bigint
  order_block: bigint
  quote_price: numeric
  unfilled_base_amount: bigint
}

"""
order by sum() on columns of table "orders"
"""
input orders_sum_order_by {
  cancel_block: order_by
  filled_base_amount: order_by
  order_block: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""
update columns of table "orders"
"""
enum orders_update_column {
  """column name"""
  actor_acct

  """column name"""
  cancel_block

  """column name"""
  cancel_time

  """column name"""
  cancel_tx_sig

  """column name"""
  filled_base_amount

  """column name"""
  is_active

  """column name"""
  market_acct

  """column name"""
  order_block

  """column name"""
  order_time

  """column name"""
  order_tx_sig

  """column name"""
  quote_price

  """column name"""
  side

  """column name"""
  unfilled_base_amount

  """column name"""
  updated_at
}

input orders_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: orders_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: orders_set_input

  """filter the rows which have to be updated"""
  where: orders_bool_exp!
}

"""aggregate var_pop on columns"""
type orders_var_pop_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by var_pop() on columns of table "orders"
"""
input orders_var_pop_order_by {
  cancel_block: order_by
  filled_base_amount: order_by
  order_block: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""aggregate var_samp on columns"""
type orders_var_samp_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by var_samp() on columns of table "orders"
"""
input orders_var_samp_order_by {
  cancel_block: order_by
  filled_base_amount: order_by
  order_block: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""aggregate variance on columns"""
type orders_variance_fields {
  cancel_block: Float
  filled_base_amount: Float
  order_block: Float
  quote_price: Float
  unfilled_base_amount: Float
}

"""
order by variance() on columns of table "orders"
"""
input orders_variance_order_by {
  cancel_block: order_by
  filled_base_amount: order_by
  order_block: order_by
  quote_price: order_by
  unfilled_base_amount: order_by
}

"""
columns and relationships of "prices"
"""
type prices {
  base_amount: bigint
  created_at: timestamptz!
  created_by: String

  """An object relationship"""
  market: markets!
  market_acct: String!
  price: numeric!
  prices_type: String!
  quote_amount: bigint
  updated_slot: bigint!
}

"""
aggregated selection of "prices"
"""
type prices_aggregate {
  aggregate: prices_aggregate_fields
  nodes: [prices!]!
}

input prices_aggregate_bool_exp {
  count: prices_aggregate_bool_exp_count
}

input prices_aggregate_bool_exp_count {
  arguments: [prices_select_column!]
  distinct: Boolean
  filter: prices_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "prices"
"""
type prices_aggregate_fields {
  avg: prices_avg_fields
  count(columns: [prices_select_column!], distinct: Boolean): Int!
  max: prices_max_fields
  min: prices_min_fields
  stddev: prices_stddev_fields
  stddev_pop: prices_stddev_pop_fields
  stddev_samp: prices_stddev_samp_fields
  sum: prices_sum_fields
  var_pop: prices_var_pop_fields
  var_samp: prices_var_samp_fields
  variance: prices_variance_fields
}

"""
order by aggregate values of table "prices"
"""
input prices_aggregate_order_by {
  avg: prices_avg_order_by
  count: order_by
  max: prices_max_order_by
  min: prices_min_order_by
  stddev: prices_stddev_order_by
  stddev_pop: prices_stddev_pop_order_by
  stddev_samp: prices_stddev_samp_order_by
  sum: prices_sum_order_by
  var_pop: prices_var_pop_order_by
  var_samp: prices_var_samp_order_by
  variance: prices_variance_order_by
}

"""
input type for inserting array relation for remote table "prices"
"""
input prices_arr_rel_insert_input {
  data: [prices_insert_input!]!

  """upsert condition"""
  on_conflict: prices_on_conflict
}

"""aggregate avg on columns"""
type prices_avg_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
  updated_slot: Float
}

"""
order by avg() on columns of table "prices"
"""
input prices_avg_order_by {
  base_amount: order_by
  price: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""
Boolean expression to filter rows from the table "prices". All fields are combined with a logical 'AND'.
"""
input prices_bool_exp {
  _and: [prices_bool_exp!]
  _not: prices_bool_exp
  _or: [prices_bool_exp!]
  base_amount: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  market: markets_bool_exp
  market_acct: String_comparison_exp
  price: numeric_comparison_exp
  prices_type: String_comparison_exp
  quote_amount: bigint_comparison_exp
  updated_slot: bigint_comparison_exp
}

"""
columns and relationships of "prices_chart_data"
"""
type prices_chart_data {
  base_amount: bigint
  interv: timestamptz

  """An object relationship"""
  market: markets
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
}

"""
aggregated selection of "prices_chart_data"
"""
type prices_chart_data_aggregate {
  aggregate: prices_chart_data_aggregate_fields
  nodes: [prices_chart_data!]!
}

"""
aggregate fields of "prices_chart_data"
"""
type prices_chart_data_aggregate_fields {
  avg: prices_chart_data_avg_fields
  count(columns: [prices_chart_data_select_column!], distinct: Boolean): Int!
  max: prices_chart_data_max_fields
  min: prices_chart_data_min_fields
  stddev: prices_chart_data_stddev_fields
  stddev_pop: prices_chart_data_stddev_pop_fields
  stddev_samp: prices_chart_data_stddev_samp_fields
  sum: prices_chart_data_sum_fields
  var_pop: prices_chart_data_var_pop_fields
  var_samp: prices_chart_data_var_samp_fields
  variance: prices_chart_data_variance_fields
}

"""aggregate avg on columns"""
type prices_chart_data_avg_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
}

"""
Boolean expression to filter rows from the table "prices_chart_data". All fields are combined with a logical 'AND'.
"""
input prices_chart_data_bool_exp {
  _and: [prices_chart_data_bool_exp!]
  _not: prices_chart_data_bool_exp
  _or: [prices_chart_data_bool_exp!]
  base_amount: bigint_comparison_exp
  interv: timestamptz_comparison_exp
  market: markets_bool_exp
  market_acct: String_comparison_exp
  price: numeric_comparison_exp
  prices_type: String_comparison_exp
  quote_amount: bigint_comparison_exp
}

"""aggregate max on columns"""
type prices_chart_data_max_fields {
  base_amount: bigint
  interv: timestamptz
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
}

"""aggregate min on columns"""
type prices_chart_data_min_fields {
  base_amount: bigint
  interv: timestamptz
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
}

"""Ordering options when selecting data from "prices_chart_data"."""
input prices_chart_data_order_by {
  base_amount: order_by
  interv: order_by
  market: markets_order_by
  market_acct: order_by
  price: order_by
  prices_type: order_by
  quote_amount: order_by
}

"""
select columns of table "prices_chart_data"
"""
enum prices_chart_data_select_column {
  """column name"""
  base_amount

  """column name"""
  interv

  """column name"""
  market_acct

  """column name"""
  price

  """column name"""
  prices_type

  """column name"""
  quote_amount
}

"""aggregate stddev on columns"""
type prices_chart_data_stddev_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
}

"""aggregate stddev_pop on columns"""
type prices_chart_data_stddev_pop_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
}

"""aggregate stddev_samp on columns"""
type prices_chart_data_stddev_samp_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
}

"""
Streaming cursor of the table "prices_chart_data"
"""
input prices_chart_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: prices_chart_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input prices_chart_data_stream_cursor_value_input {
  base_amount: bigint
  interv: timestamptz
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
}

"""aggregate sum on columns"""
type prices_chart_data_sum_fields {
  base_amount: bigint
  price: numeric
  quote_amount: bigint
}

"""aggregate var_pop on columns"""
type prices_chart_data_var_pop_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
}

"""aggregate var_samp on columns"""
type prices_chart_data_var_samp_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
}

"""aggregate variance on columns"""
type prices_chart_data_variance_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
}

"""
unique or primary key constraints on table "prices"
"""
enum prices_constraint {
  """
  unique or primary key constraint on columns "created_at", "market_acct"
  """
  prices_created_at_market_acct_pk
}

"""
input type for incrementing numeric columns in table "prices"
"""
input prices_inc_input {
  base_amount: bigint
  price: numeric
  quote_amount: bigint
  updated_slot: bigint
}

"""
input type for inserting data into table "prices"
"""
input prices_insert_input {
  base_amount: bigint
  created_at: timestamptz
  created_by: String
  market: markets_obj_rel_insert_input
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
  updated_slot: bigint
}

"""aggregate max on columns"""
type prices_max_fields {
  base_amount: bigint
  created_at: timestamptz
  created_by: String
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
  updated_slot: bigint
}

"""
order by max() on columns of table "prices"
"""
input prices_max_order_by {
  base_amount: order_by
  created_at: order_by
  created_by: order_by
  market_acct: order_by
  price: order_by
  prices_type: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""aggregate min on columns"""
type prices_min_fields {
  base_amount: bigint
  created_at: timestamptz
  created_by: String
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
  updated_slot: bigint
}

"""
order by min() on columns of table "prices"
"""
input prices_min_order_by {
  base_amount: order_by
  created_at: order_by
  created_by: order_by
  market_acct: order_by
  price: order_by
  prices_type: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""
response of any mutation on the table "prices"
"""
type prices_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [prices!]!
}

"""
on_conflict condition type for table "prices"
"""
input prices_on_conflict {
  constraint: prices_constraint!
  update_columns: [prices_update_column!]! = []
  where: prices_bool_exp
}

"""Ordering options when selecting data from "prices"."""
input prices_order_by {
  base_amount: order_by
  created_at: order_by
  created_by: order_by
  market: markets_order_by
  market_acct: order_by
  price: order_by
  prices_type: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""primary key columns input for table: prices"""
input prices_pk_columns_input {
  created_at: timestamptz!
  market_acct: String!
}

"""
select columns of table "prices"
"""
enum prices_select_column {
  """column name"""
  base_amount

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  market_acct

  """column name"""
  price

  """column name"""
  prices_type

  """column name"""
  quote_amount

  """column name"""
  updated_slot
}

"""
input type for updating data in table "prices"
"""
input prices_set_input {
  base_amount: bigint
  created_at: timestamptz
  created_by: String
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
  updated_slot: bigint
}

"""aggregate stddev on columns"""
type prices_stddev_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
  updated_slot: Float
}

"""
order by stddev() on columns of table "prices"
"""
input prices_stddev_order_by {
  base_amount: order_by
  price: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""aggregate stddev_pop on columns"""
type prices_stddev_pop_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
  updated_slot: Float
}

"""
order by stddev_pop() on columns of table "prices"
"""
input prices_stddev_pop_order_by {
  base_amount: order_by
  price: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""aggregate stddev_samp on columns"""
type prices_stddev_samp_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
  updated_slot: Float
}

"""
order by stddev_samp() on columns of table "prices"
"""
input prices_stddev_samp_order_by {
  base_amount: order_by
  price: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""
Streaming cursor of the table "prices"
"""
input prices_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: prices_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input prices_stream_cursor_value_input {
  base_amount: bigint
  created_at: timestamptz
  created_by: String
  market_acct: String
  price: numeric
  prices_type: String
  quote_amount: bigint
  updated_slot: bigint
}

"""aggregate sum on columns"""
type prices_sum_fields {
  base_amount: bigint
  price: numeric
  quote_amount: bigint
  updated_slot: bigint
}

"""
order by sum() on columns of table "prices"
"""
input prices_sum_order_by {
  base_amount: order_by
  price: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""
update columns of table "prices"
"""
enum prices_update_column {
  """column name"""
  base_amount

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  market_acct

  """column name"""
  price

  """column name"""
  prices_type

  """column name"""
  quote_amount

  """column name"""
  updated_slot
}

input prices_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: prices_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: prices_set_input

  """filter the rows which have to be updated"""
  where: prices_bool_exp!
}

"""aggregate var_pop on columns"""
type prices_var_pop_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
  updated_slot: Float
}

"""
order by var_pop() on columns of table "prices"
"""
input prices_var_pop_order_by {
  base_amount: order_by
  price: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""aggregate var_samp on columns"""
type prices_var_samp_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
  updated_slot: Float
}

"""
order by var_samp() on columns of table "prices"
"""
input prices_var_samp_order_by {
  base_amount: order_by
  price: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""aggregate variance on columns"""
type prices_variance_fields {
  base_amount: Float
  price: Float
  quote_amount: Float
  updated_slot: Float
}

"""
order by variance() on columns of table "prices"
"""
input prices_variance_order_by {
  base_amount: order_by
  price: order_by
  quote_amount: order_by
  updated_slot: order_by
}

"""
columns and relationships of "program_system"
"""
type program_system {
  autocrat_acct: String!
  conditional_vault_acct: String!
  migrator_acct: String
  pricing_model_acct: String!

  """An object relationship"""
  program: programs!

  """An object relationship"""
  programByConditionalVaultAcct: programs!

  """An object relationship"""
  programByMigratorAcct: programs

  """An object relationship"""
  programByPricingModelAcct: programs!
  system_version: float8!
}

"""
aggregated selection of "program_system"
"""
type program_system_aggregate {
  aggregate: program_system_aggregate_fields
  nodes: [program_system!]!
}

input program_system_aggregate_bool_exp {
  avg: program_system_aggregate_bool_exp_avg
  corr: program_system_aggregate_bool_exp_corr
  count: program_system_aggregate_bool_exp_count
  covar_samp: program_system_aggregate_bool_exp_covar_samp
  max: program_system_aggregate_bool_exp_max
  min: program_system_aggregate_bool_exp_min
  stddev_samp: program_system_aggregate_bool_exp_stddev_samp
  sum: program_system_aggregate_bool_exp_sum
  var_samp: program_system_aggregate_bool_exp_var_samp
}

input program_system_aggregate_bool_exp_avg {
  arguments: program_system_select_column_program_system_aggregate_bool_exp_avg_arguments_columns!
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: float8_comparison_exp!
}

input program_system_aggregate_bool_exp_corr {
  arguments: program_system_aggregate_bool_exp_corr_arguments!
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: float8_comparison_exp!
}

input program_system_aggregate_bool_exp_corr_arguments {
  X: program_system_select_column_program_system_aggregate_bool_exp_corr_arguments_columns!
  Y: program_system_select_column_program_system_aggregate_bool_exp_corr_arguments_columns!
}

input program_system_aggregate_bool_exp_count {
  arguments: [program_system_select_column!]
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: Int_comparison_exp!
}

input program_system_aggregate_bool_exp_covar_samp {
  arguments: program_system_aggregate_bool_exp_covar_samp_arguments!
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: float8_comparison_exp!
}

input program_system_aggregate_bool_exp_covar_samp_arguments {
  X: program_system_select_column_program_system_aggregate_bool_exp_covar_samp_arguments_columns!
  Y: program_system_select_column_program_system_aggregate_bool_exp_covar_samp_arguments_columns!
}

input program_system_aggregate_bool_exp_max {
  arguments: program_system_select_column_program_system_aggregate_bool_exp_max_arguments_columns!
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: float8_comparison_exp!
}

input program_system_aggregate_bool_exp_min {
  arguments: program_system_select_column_program_system_aggregate_bool_exp_min_arguments_columns!
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: float8_comparison_exp!
}

input program_system_aggregate_bool_exp_stddev_samp {
  arguments: program_system_select_column_program_system_aggregate_bool_exp_stddev_samp_arguments_columns!
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: float8_comparison_exp!
}

input program_system_aggregate_bool_exp_sum {
  arguments: program_system_select_column_program_system_aggregate_bool_exp_sum_arguments_columns!
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: float8_comparison_exp!
}

input program_system_aggregate_bool_exp_var_samp {
  arguments: program_system_select_column_program_system_aggregate_bool_exp_var_samp_arguments_columns!
  distinct: Boolean
  filter: program_system_bool_exp
  predicate: float8_comparison_exp!
}

"""
aggregate fields of "program_system"
"""
type program_system_aggregate_fields {
  avg: program_system_avg_fields
  count(columns: [program_system_select_column!], distinct: Boolean): Int!
  max: program_system_max_fields
  min: program_system_min_fields
  stddev: program_system_stddev_fields
  stddev_pop: program_system_stddev_pop_fields
  stddev_samp: program_system_stddev_samp_fields
  sum: program_system_sum_fields
  var_pop: program_system_var_pop_fields
  var_samp: program_system_var_samp_fields
  variance: program_system_variance_fields
}

"""
order by aggregate values of table "program_system"
"""
input program_system_aggregate_order_by {
  avg: program_system_avg_order_by
  count: order_by
  max: program_system_max_order_by
  min: program_system_min_order_by
  stddev: program_system_stddev_order_by
  stddev_pop: program_system_stddev_pop_order_by
  stddev_samp: program_system_stddev_samp_order_by
  sum: program_system_sum_order_by
  var_pop: program_system_var_pop_order_by
  var_samp: program_system_var_samp_order_by
  variance: program_system_variance_order_by
}

"""
input type for inserting array relation for remote table "program_system"
"""
input program_system_arr_rel_insert_input {
  data: [program_system_insert_input!]!

  """upsert condition"""
  on_conflict: program_system_on_conflict
}

"""aggregate avg on columns"""
type program_system_avg_fields {
  system_version: Float
}

"""
order by avg() on columns of table "program_system"
"""
input program_system_avg_order_by {
  system_version: order_by
}

"""
Boolean expression to filter rows from the table "program_system". All fields are combined with a logical 'AND'.
"""
input program_system_bool_exp {
  _and: [program_system_bool_exp!]
  _not: program_system_bool_exp
  _or: [program_system_bool_exp!]
  autocrat_acct: String_comparison_exp
  conditional_vault_acct: String_comparison_exp
  migrator_acct: String_comparison_exp
  pricing_model_acct: String_comparison_exp
  program: programs_bool_exp
  programByConditionalVaultAcct: programs_bool_exp
  programByMigratorAcct: programs_bool_exp
  programByPricingModelAcct: programs_bool_exp
  system_version: float8_comparison_exp
}

"""
unique or primary key constraints on table "program_system"
"""
enum program_system_constraint {
  """
  unique or primary key constraint on columns "system_version"
  """
  program_system_pkey
}

"""
input type for incrementing numeric columns in table "program_system"
"""
input program_system_inc_input {
  system_version: float8
}

"""
input type for inserting data into table "program_system"
"""
input program_system_insert_input {
  autocrat_acct: String
  conditional_vault_acct: String
  migrator_acct: String
  pricing_model_acct: String
  program: programs_obj_rel_insert_input
  programByConditionalVaultAcct: programs_obj_rel_insert_input
  programByMigratorAcct: programs_obj_rel_insert_input
  programByPricingModelAcct: programs_obj_rel_insert_input
  system_version: float8
}

"""aggregate max on columns"""
type program_system_max_fields {
  autocrat_acct: String
  conditional_vault_acct: String
  migrator_acct: String
  pricing_model_acct: String
  system_version: float8
}

"""
order by max() on columns of table "program_system"
"""
input program_system_max_order_by {
  autocrat_acct: order_by
  conditional_vault_acct: order_by
  migrator_acct: order_by
  pricing_model_acct: order_by
  system_version: order_by
}

"""aggregate min on columns"""
type program_system_min_fields {
  autocrat_acct: String
  conditional_vault_acct: String
  migrator_acct: String
  pricing_model_acct: String
  system_version: float8
}

"""
order by min() on columns of table "program_system"
"""
input program_system_min_order_by {
  autocrat_acct: order_by
  conditional_vault_acct: order_by
  migrator_acct: order_by
  pricing_model_acct: order_by
  system_version: order_by
}

"""
response of any mutation on the table "program_system"
"""
type program_system_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [program_system!]!
}

"""
on_conflict condition type for table "program_system"
"""
input program_system_on_conflict {
  constraint: program_system_constraint!
  update_columns: [program_system_update_column!]! = []
  where: program_system_bool_exp
}

"""Ordering options when selecting data from "program_system"."""
input program_system_order_by {
  autocrat_acct: order_by
  conditional_vault_acct: order_by
  migrator_acct: order_by
  pricing_model_acct: order_by
  program: programs_order_by
  programByConditionalVaultAcct: programs_order_by
  programByMigratorAcct: programs_order_by
  programByPricingModelAcct: programs_order_by
  system_version: order_by
}

"""primary key columns input for table: program_system"""
input program_system_pk_columns_input {
  system_version: float8!
}

"""
select columns of table "program_system"
"""
enum program_system_select_column {
  """column name"""
  autocrat_acct

  """column name"""
  conditional_vault_acct

  """column name"""
  migrator_acct

  """column name"""
  pricing_model_acct

  """column name"""
  system_version
}

"""
select "program_system_aggregate_bool_exp_avg_arguments_columns" columns of table "program_system"
"""
enum program_system_select_column_program_system_aggregate_bool_exp_avg_arguments_columns {
  """column name"""
  system_version
}

"""
select "program_system_aggregate_bool_exp_corr_arguments_columns" columns of table "program_system"
"""
enum program_system_select_column_program_system_aggregate_bool_exp_corr_arguments_columns {
  """column name"""
  system_version
}

"""
select "program_system_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "program_system"
"""
enum program_system_select_column_program_system_aggregate_bool_exp_covar_samp_arguments_columns {
  """column name"""
  system_version
}

"""
select "program_system_aggregate_bool_exp_max_arguments_columns" columns of table "program_system"
"""
enum program_system_select_column_program_system_aggregate_bool_exp_max_arguments_columns {
  """column name"""
  system_version
}

"""
select "program_system_aggregate_bool_exp_min_arguments_columns" columns of table "program_system"
"""
enum program_system_select_column_program_system_aggregate_bool_exp_min_arguments_columns {
  """column name"""
  system_version
}

"""
select "program_system_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "program_system"
"""
enum program_system_select_column_program_system_aggregate_bool_exp_stddev_samp_arguments_columns {
  """column name"""
  system_version
}

"""
select "program_system_aggregate_bool_exp_sum_arguments_columns" columns of table "program_system"
"""
enum program_system_select_column_program_system_aggregate_bool_exp_sum_arguments_columns {
  """column name"""
  system_version
}

"""
select "program_system_aggregate_bool_exp_var_samp_arguments_columns" columns of table "program_system"
"""
enum program_system_select_column_program_system_aggregate_bool_exp_var_samp_arguments_columns {
  """column name"""
  system_version
}

"""
input type for updating data in table "program_system"
"""
input program_system_set_input {
  autocrat_acct: String
  conditional_vault_acct: String
  migrator_acct: String
  pricing_model_acct: String
  system_version: float8
}

"""aggregate stddev on columns"""
type program_system_stddev_fields {
  system_version: Float
}

"""
order by stddev() on columns of table "program_system"
"""
input program_system_stddev_order_by {
  system_version: order_by
}

"""aggregate stddev_pop on columns"""
type program_system_stddev_pop_fields {
  system_version: Float
}

"""
order by stddev_pop() on columns of table "program_system"
"""
input program_system_stddev_pop_order_by {
  system_version: order_by
}

"""aggregate stddev_samp on columns"""
type program_system_stddev_samp_fields {
  system_version: Float
}

"""
order by stddev_samp() on columns of table "program_system"
"""
input program_system_stddev_samp_order_by {
  system_version: order_by
}

"""
Streaming cursor of the table "program_system"
"""
input program_system_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: program_system_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input program_system_stream_cursor_value_input {
  autocrat_acct: String
  conditional_vault_acct: String
  migrator_acct: String
  pricing_model_acct: String
  system_version: float8
}

"""aggregate sum on columns"""
type program_system_sum_fields {
  system_version: float8
}

"""
order by sum() on columns of table "program_system"
"""
input program_system_sum_order_by {
  system_version: order_by
}

"""
update columns of table "program_system"
"""
enum program_system_update_column {
  """column name"""
  autocrat_acct

  """column name"""
  conditional_vault_acct

  """column name"""
  migrator_acct

  """column name"""
  pricing_model_acct

  """column name"""
  system_version
}

input program_system_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: program_system_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: program_system_set_input

  """filter the rows which have to be updated"""
  where: program_system_bool_exp!
}

"""aggregate var_pop on columns"""
type program_system_var_pop_fields {
  system_version: Float
}

"""
order by var_pop() on columns of table "program_system"
"""
input program_system_var_pop_order_by {
  system_version: order_by
}

"""aggregate var_samp on columns"""
type program_system_var_samp_fields {
  system_version: Float
}

"""
order by var_samp() on columns of table "program_system"
"""
input program_system_var_samp_order_by {
  system_version: order_by
}

"""aggregate variance on columns"""
type program_system_variance_fields {
  system_version: Float
}

"""
order by variance() on columns of table "program_system"
"""
input program_system_variance_order_by {
  system_version: order_by
}

"""
columns and relationships of "programs"
"""
type programs {
  created_at: timestamptz!

  """An array relationship"""
  daos(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """An aggregate relationship"""
  daos_aggregate(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): daos_aggregate!
  deployed_at: timestamp

  """An array relationship"""
  programSystemsByConditionalVaultAcct(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): [program_system!]!

  """An aggregate relationship"""
  programSystemsByConditionalVaultAcct_aggregate(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): program_system_aggregate!

  """An array relationship"""
  programSystemsByMigratorAcct(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): [program_system!]!

  """An aggregate relationship"""
  programSystemsByMigratorAcct_aggregate(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): program_system_aggregate!

  """An array relationship"""
  programSystemsByPricingModelAcct(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): [program_system!]!

  """An aggregate relationship"""
  programSystemsByPricingModelAcct_aggregate(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): program_system_aggregate!
  program_acct: String!
  program_name: String!

  """An array relationship"""
  program_systems(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): [program_system!]!

  """An aggregate relationship"""
  program_systems_aggregate(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): program_system_aggregate!
  version: float8!
}

"""
aggregated selection of "programs"
"""
type programs_aggregate {
  aggregate: programs_aggregate_fields
  nodes: [programs!]!
}

"""
aggregate fields of "programs"
"""
type programs_aggregate_fields {
  avg: programs_avg_fields
  count(columns: [programs_select_column!], distinct: Boolean): Int!
  max: programs_max_fields
  min: programs_min_fields
  stddev: programs_stddev_fields
  stddev_pop: programs_stddev_pop_fields
  stddev_samp: programs_stddev_samp_fields
  sum: programs_sum_fields
  var_pop: programs_var_pop_fields
  var_samp: programs_var_samp_fields
  variance: programs_variance_fields
}

"""aggregate avg on columns"""
type programs_avg_fields {
  version: Float
}

"""
Boolean expression to filter rows from the table "programs". All fields are combined with a logical 'AND'.
"""
input programs_bool_exp {
  _and: [programs_bool_exp!]
  _not: programs_bool_exp
  _or: [programs_bool_exp!]
  created_at: timestamptz_comparison_exp
  daos: daos_bool_exp
  daos_aggregate: daos_aggregate_bool_exp
  deployed_at: timestamp_comparison_exp
  programSystemsByConditionalVaultAcct: program_system_bool_exp
  programSystemsByConditionalVaultAcct_aggregate: program_system_aggregate_bool_exp
  programSystemsByMigratorAcct: program_system_bool_exp
  programSystemsByMigratorAcct_aggregate: program_system_aggregate_bool_exp
  programSystemsByPricingModelAcct: program_system_bool_exp
  programSystemsByPricingModelAcct_aggregate: program_system_aggregate_bool_exp
  program_acct: String_comparison_exp
  program_name: String_comparison_exp
  program_systems: program_system_bool_exp
  program_systems_aggregate: program_system_aggregate_bool_exp
  version: float8_comparison_exp
}

"""
unique or primary key constraints on table "programs"
"""
enum programs_constraint {
  """
  unique or primary key constraint on columns "version", "program_acct"
  """
  program_version

  """
  unique or primary key constraint on columns "program_acct"
  """
  programs_pkey
}

"""
input type for incrementing numeric columns in table "programs"
"""
input programs_inc_input {
  version: float8
}

"""
input type for inserting data into table "programs"
"""
input programs_insert_input {
  created_at: timestamptz
  daos: daos_arr_rel_insert_input
  deployed_at: timestamp
  programSystemsByConditionalVaultAcct: program_system_arr_rel_insert_input
  programSystemsByMigratorAcct: program_system_arr_rel_insert_input
  programSystemsByPricingModelAcct: program_system_arr_rel_insert_input
  program_acct: String
  program_name: String
  program_systems: program_system_arr_rel_insert_input
  version: float8
}

"""aggregate max on columns"""
type programs_max_fields {
  created_at: timestamptz
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: float8
}

"""aggregate min on columns"""
type programs_min_fields {
  created_at: timestamptz
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: float8
}

"""
response of any mutation on the table "programs"
"""
type programs_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [programs!]!
}

"""
input type for inserting object relation for remote table "programs"
"""
input programs_obj_rel_insert_input {
  data: programs_insert_input!

  """upsert condition"""
  on_conflict: programs_on_conflict
}

"""
on_conflict condition type for table "programs"
"""
input programs_on_conflict {
  constraint: programs_constraint!
  update_columns: [programs_update_column!]! = []
  where: programs_bool_exp
}

"""Ordering options when selecting data from "programs"."""
input programs_order_by {
  created_at: order_by
  daos_aggregate: daos_aggregate_order_by
  deployed_at: order_by
  programSystemsByConditionalVaultAcct_aggregate: program_system_aggregate_order_by
  programSystemsByMigratorAcct_aggregate: program_system_aggregate_order_by
  programSystemsByPricingModelAcct_aggregate: program_system_aggregate_order_by
  program_acct: order_by
  program_name: order_by
  program_systems_aggregate: program_system_aggregate_order_by
  version: order_by
}

"""primary key columns input for table: programs"""
input programs_pk_columns_input {
  program_acct: String!
}

"""
select columns of table "programs"
"""
enum programs_select_column {
  """column name"""
  created_at

  """column name"""
  deployed_at

  """column name"""
  program_acct

  """column name"""
  program_name

  """column name"""
  version
}

"""
input type for updating data in table "programs"
"""
input programs_set_input {
  created_at: timestamptz
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: float8
}

"""aggregate stddev on columns"""
type programs_stddev_fields {
  version: Float
}

"""aggregate stddev_pop on columns"""
type programs_stddev_pop_fields {
  version: Float
}

"""aggregate stddev_samp on columns"""
type programs_stddev_samp_fields {
  version: Float
}

"""
Streaming cursor of the table "programs"
"""
input programs_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: programs_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input programs_stream_cursor_value_input {
  created_at: timestamptz
  deployed_at: timestamp
  program_acct: String
  program_name: String
  version: float8
}

"""aggregate sum on columns"""
type programs_sum_fields {
  version: float8
}

"""
update columns of table "programs"
"""
enum programs_update_column {
  """column name"""
  created_at

  """column name"""
  deployed_at

  """column name"""
  program_acct

  """column name"""
  program_name

  """column name"""
  version
}

input programs_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: programs_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: programs_set_input

  """filter the rows which have to be updated"""
  where: programs_bool_exp!
}

"""aggregate var_pop on columns"""
type programs_var_pop_fields {
  version: Float
}

"""aggregate var_samp on columns"""
type programs_var_samp_fields {
  version: Float
}

"""aggregate variance on columns"""
type programs_variance_fields {
  version: Float
}

"""
columns and relationships of "proposal_bars"
"""
type proposal_bars {
  bar_size: interval!
  bar_start_time: timestamptz!
  fail_base_amount: bigint

  """An object relationship"""
  fail_market: markets
  fail_market_acct: String
  fail_price: numeric
  fail_quote_amount: bigint
  pass_base_amount: bigint

  """An object relationship"""
  pass_market: markets
  pass_market_acct: String
  pass_price: numeric
  pass_quote_amount: bigint
  proposal_acct: String!
}

"""
aggregated selection of "proposal_bars"
"""
type proposal_bars_aggregate {
  aggregate: proposal_bars_aggregate_fields
  nodes: [proposal_bars!]!
}

"""
aggregate fields of "proposal_bars"
"""
type proposal_bars_aggregate_fields {
  avg: proposal_bars_avg_fields
  count(columns: [proposal_bars_select_column!], distinct: Boolean): Int!
  max: proposal_bars_max_fields
  min: proposal_bars_min_fields
  stddev: proposal_bars_stddev_fields
  stddev_pop: proposal_bars_stddev_pop_fields
  stddev_samp: proposal_bars_stddev_samp_fields
  sum: proposal_bars_sum_fields
  var_pop: proposal_bars_var_pop_fields
  var_samp: proposal_bars_var_samp_fields
  variance: proposal_bars_variance_fields
}

"""aggregate avg on columns"""
type proposal_bars_avg_fields {
  fail_base_amount: Float
  fail_price: Float
  fail_quote_amount: Float
  pass_base_amount: Float
  pass_price: Float
  pass_quote_amount: Float
}

"""
Boolean expression to filter rows from the table "proposal_bars". All fields are combined with a logical 'AND'.
"""
input proposal_bars_bool_exp {
  _and: [proposal_bars_bool_exp!]
  _not: proposal_bars_bool_exp
  _or: [proposal_bars_bool_exp!]
  bar_size: interval_comparison_exp
  bar_start_time: timestamptz_comparison_exp
  fail_base_amount: bigint_comparison_exp
  fail_market: markets_bool_exp
  fail_market_acct: String_comparison_exp
  fail_price: numeric_comparison_exp
  fail_quote_amount: bigint_comparison_exp
  pass_base_amount: bigint_comparison_exp
  pass_market: markets_bool_exp
  pass_market_acct: String_comparison_exp
  pass_price: numeric_comparison_exp
  pass_quote_amount: bigint_comparison_exp
  proposal_acct: String_comparison_exp
}

"""
unique or primary key constraints on table "proposal_bars"
"""
enum proposal_bars_constraint {
  """
  unique or primary key constraint on columns "bar_size", "bar_start_time", "proposal_acct"
  """
  proposal_bars_pkey
}

"""
input type for incrementing numeric columns in table "proposal_bars"
"""
input proposal_bars_inc_input {
  fail_base_amount: bigint
  fail_price: numeric
  fail_quote_amount: bigint
  pass_base_amount: bigint
  pass_price: numeric
  pass_quote_amount: bigint
}

"""
input type for inserting data into table "proposal_bars"
"""
input proposal_bars_insert_input {
  bar_size: interval
  bar_start_time: timestamptz
  fail_base_amount: bigint
  fail_market: markets_obj_rel_insert_input
  fail_market_acct: String
  fail_price: numeric
  fail_quote_amount: bigint
  pass_base_amount: bigint
  pass_market: markets_obj_rel_insert_input
  pass_market_acct: String
  pass_price: numeric
  pass_quote_amount: bigint
  proposal_acct: String
}

"""aggregate max on columns"""
type proposal_bars_max_fields {
  bar_start_time: timestamptz
  fail_base_amount: bigint
  fail_market_acct: String
  fail_price: numeric
  fail_quote_amount: bigint
  pass_base_amount: bigint
  pass_market_acct: String
  pass_price: numeric
  pass_quote_amount: bigint
  proposal_acct: String
}

"""aggregate min on columns"""
type proposal_bars_min_fields {
  bar_start_time: timestamptz
  fail_base_amount: bigint
  fail_market_acct: String
  fail_price: numeric
  fail_quote_amount: bigint
  pass_base_amount: bigint
  pass_market_acct: String
  pass_price: numeric
  pass_quote_amount: bigint
  proposal_acct: String
}

"""
response of any mutation on the table "proposal_bars"
"""
type proposal_bars_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [proposal_bars!]!
}

"""
on_conflict condition type for table "proposal_bars"
"""
input proposal_bars_on_conflict {
  constraint: proposal_bars_constraint!
  update_columns: [proposal_bars_update_column!]! = []
  where: proposal_bars_bool_exp
}

"""Ordering options when selecting data from "proposal_bars"."""
input proposal_bars_order_by {
  bar_size: order_by
  bar_start_time: order_by
  fail_base_amount: order_by
  fail_market: markets_order_by
  fail_market_acct: order_by
  fail_price: order_by
  fail_quote_amount: order_by
  pass_base_amount: order_by
  pass_market: markets_order_by
  pass_market_acct: order_by
  pass_price: order_by
  pass_quote_amount: order_by
  proposal_acct: order_by
}

"""primary key columns input for table: proposal_bars"""
input proposal_bars_pk_columns_input {
  bar_size: interval!
  bar_start_time: timestamptz!
  proposal_acct: String!
}

"""
select columns of table "proposal_bars"
"""
enum proposal_bars_select_column {
  """column name"""
  bar_size

  """column name"""
  bar_start_time

  """column name"""
  fail_base_amount

  """column name"""
  fail_market_acct

  """column name"""
  fail_price

  """column name"""
  fail_quote_amount

  """column name"""
  pass_base_amount

  """column name"""
  pass_market_acct

  """column name"""
  pass_price

  """column name"""
  pass_quote_amount

  """column name"""
  proposal_acct
}

"""
input type for updating data in table "proposal_bars"
"""
input proposal_bars_set_input {
  bar_size: interval
  bar_start_time: timestamptz
  fail_base_amount: bigint
  fail_market_acct: String
  fail_price: numeric
  fail_quote_amount: bigint
  pass_base_amount: bigint
  pass_market_acct: String
  pass_price: numeric
  pass_quote_amount: bigint
  proposal_acct: String
}

"""aggregate stddev on columns"""
type proposal_bars_stddev_fields {
  fail_base_amount: Float
  fail_price: Float
  fail_quote_amount: Float
  pass_base_amount: Float
  pass_price: Float
  pass_quote_amount: Float
}

"""aggregate stddev_pop on columns"""
type proposal_bars_stddev_pop_fields {
  fail_base_amount: Float
  fail_price: Float
  fail_quote_amount: Float
  pass_base_amount: Float
  pass_price: Float
  pass_quote_amount: Float
}

"""aggregate stddev_samp on columns"""
type proposal_bars_stddev_samp_fields {
  fail_base_amount: Float
  fail_price: Float
  fail_quote_amount: Float
  pass_base_amount: Float
  pass_price: Float
  pass_quote_amount: Float
}

"""
Streaming cursor of the table "proposal_bars"
"""
input proposal_bars_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: proposal_bars_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input proposal_bars_stream_cursor_value_input {
  bar_size: interval
  bar_start_time: timestamptz
  fail_base_amount: bigint
  fail_market_acct: String
  fail_price: numeric
  fail_quote_amount: bigint
  pass_base_amount: bigint
  pass_market_acct: String
  pass_price: numeric
  pass_quote_amount: bigint
  proposal_acct: String
}

"""aggregate sum on columns"""
type proposal_bars_sum_fields {
  fail_base_amount: bigint
  fail_price: numeric
  fail_quote_amount: bigint
  pass_base_amount: bigint
  pass_price: numeric
  pass_quote_amount: bigint
}

"""
update columns of table "proposal_bars"
"""
enum proposal_bars_update_column {
  """column name"""
  bar_size

  """column name"""
  bar_start_time

  """column name"""
  fail_base_amount

  """column name"""
  fail_market_acct

  """column name"""
  fail_price

  """column name"""
  fail_quote_amount

  """column name"""
  pass_base_amount

  """column name"""
  pass_market_acct

  """column name"""
  pass_price

  """column name"""
  pass_quote_amount

  """column name"""
  proposal_acct
}

input proposal_bars_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: proposal_bars_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: proposal_bars_set_input

  """filter the rows which have to be updated"""
  where: proposal_bars_bool_exp!
}

"""aggregate var_pop on columns"""
type proposal_bars_var_pop_fields {
  fail_base_amount: Float
  fail_price: Float
  fail_quote_amount: Float
  pass_base_amount: Float
  pass_price: Float
  pass_quote_amount: Float
}

"""aggregate var_samp on columns"""
type proposal_bars_var_samp_fields {
  fail_base_amount: Float
  fail_price: Float
  fail_quote_amount: Float
  pass_base_amount: Float
  pass_price: Float
  pass_quote_amount: Float
}

"""aggregate variance on columns"""
type proposal_bars_variance_fields {
  fail_base_amount: Float
  fail_price: Float
  fail_quote_amount: Float
  pass_base_amount: Float
  pass_price: Float
  pass_quote_amount: Float
}

"""
columns and relationships of "proposal_details"
"""
type proposal_details {
  base_cond_vault_acct: String
  categories(
    """JSON select path"""
    path: String
  ): jsonb
  content: String
  description: String
  fail_market_acct: String
  pass_market_acct: String

  """An object relationship"""
  proposal: proposals
  proposal_acct: String
  proposal_id: bigint!
  proposer_acct: String
  quote_cond_vault_acct: String
  slug: String
  title: String
}

"""
aggregated selection of "proposal_details"
"""
type proposal_details_aggregate {
  aggregate: proposal_details_aggregate_fields
  nodes: [proposal_details!]!
}

input proposal_details_aggregate_bool_exp {
  count: proposal_details_aggregate_bool_exp_count
}

input proposal_details_aggregate_bool_exp_count {
  arguments: [proposal_details_select_column!]
  distinct: Boolean
  filter: proposal_details_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "proposal_details"
"""
type proposal_details_aggregate_fields {
  avg: proposal_details_avg_fields
  count(columns: [proposal_details_select_column!], distinct: Boolean): Int!
  max: proposal_details_max_fields
  min: proposal_details_min_fields
  stddev: proposal_details_stddev_fields
  stddev_pop: proposal_details_stddev_pop_fields
  stddev_samp: proposal_details_stddev_samp_fields
  sum: proposal_details_sum_fields
  var_pop: proposal_details_var_pop_fields
  var_samp: proposal_details_var_samp_fields
  variance: proposal_details_variance_fields
}

"""
order by aggregate values of table "proposal_details"
"""
input proposal_details_aggregate_order_by {
  avg: proposal_details_avg_order_by
  count: order_by
  max: proposal_details_max_order_by
  min: proposal_details_min_order_by
  stddev: proposal_details_stddev_order_by
  stddev_pop: proposal_details_stddev_pop_order_by
  stddev_samp: proposal_details_stddev_samp_order_by
  sum: proposal_details_sum_order_by
  var_pop: proposal_details_var_pop_order_by
  var_samp: proposal_details_var_samp_order_by
  variance: proposal_details_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input proposal_details_append_input {
  categories: jsonb
}

"""
input type for inserting array relation for remote table "proposal_details"
"""
input proposal_details_arr_rel_insert_input {
  data: [proposal_details_insert_input!]!

  """upsert condition"""
  on_conflict: proposal_details_on_conflict
}

"""aggregate avg on columns"""
type proposal_details_avg_fields {
  proposal_id: Float
}

"""
order by avg() on columns of table "proposal_details"
"""
input proposal_details_avg_order_by {
  proposal_id: order_by
}

"""
Boolean expression to filter rows from the table "proposal_details". All fields are combined with a logical 'AND'.
"""
input proposal_details_bool_exp {
  _and: [proposal_details_bool_exp!]
  _not: proposal_details_bool_exp
  _or: [proposal_details_bool_exp!]
  base_cond_vault_acct: String_comparison_exp
  categories: jsonb_comparison_exp
  content: String_comparison_exp
  description: String_comparison_exp
  fail_market_acct: String_comparison_exp
  pass_market_acct: String_comparison_exp
  proposal: proposals_bool_exp
  proposal_acct: String_comparison_exp
  proposal_id: bigint_comparison_exp
  proposer_acct: String_comparison_exp
  quote_cond_vault_acct: String_comparison_exp
  slug: String_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "proposal_details"
"""
enum proposal_details_constraint {
  """
  unique or primary key constraint on columns "proposal_id"
  """
  proposal_details_pkey

  """
  unique or primary key constraint on columns "slug"
  """
  proposal_details_slug_unique
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input proposal_details_delete_at_path_input {
  categories: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input proposal_details_delete_elem_input {
  categories: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input proposal_details_delete_key_input {
  categories: String
}

"""
input type for incrementing numeric columns in table "proposal_details"
"""
input proposal_details_inc_input {
  proposal_id: bigint
}

"""
input type for inserting data into table "proposal_details"
"""
input proposal_details_insert_input {
  base_cond_vault_acct: String
  categories: jsonb
  content: String
  description: String
  fail_market_acct: String
  pass_market_acct: String
  proposal: proposals_obj_rel_insert_input
  proposal_acct: String
  proposal_id: bigint
  proposer_acct: String
  quote_cond_vault_acct: String
  slug: String
  title: String
}

"""aggregate max on columns"""
type proposal_details_max_fields {
  base_cond_vault_acct: String
  content: String
  description: String
  fail_market_acct: String
  pass_market_acct: String
  proposal_acct: String
  proposal_id: bigint
  proposer_acct: String
  quote_cond_vault_acct: String
  slug: String
  title: String
}

"""
order by max() on columns of table "proposal_details"
"""
input proposal_details_max_order_by {
  base_cond_vault_acct: order_by
  content: order_by
  description: order_by
  fail_market_acct: order_by
  pass_market_acct: order_by
  proposal_acct: order_by
  proposal_id: order_by
  proposer_acct: order_by
  quote_cond_vault_acct: order_by
  slug: order_by
  title: order_by
}

"""aggregate min on columns"""
type proposal_details_min_fields {
  base_cond_vault_acct: String
  content: String
  description: String
  fail_market_acct: String
  pass_market_acct: String
  proposal_acct: String
  proposal_id: bigint
  proposer_acct: String
  quote_cond_vault_acct: String
  slug: String
  title: String
}

"""
order by min() on columns of table "proposal_details"
"""
input proposal_details_min_order_by {
  base_cond_vault_acct: order_by
  content: order_by
  description: order_by
  fail_market_acct: order_by
  pass_market_acct: order_by
  proposal_acct: order_by
  proposal_id: order_by
  proposer_acct: order_by
  quote_cond_vault_acct: order_by
  slug: order_by
  title: order_by
}

"""
response of any mutation on the table "proposal_details"
"""
type proposal_details_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [proposal_details!]!
}

"""
on_conflict condition type for table "proposal_details"
"""
input proposal_details_on_conflict {
  constraint: proposal_details_constraint!
  update_columns: [proposal_details_update_column!]! = []
  where: proposal_details_bool_exp
}

"""Ordering options when selecting data from "proposal_details"."""
input proposal_details_order_by {
  base_cond_vault_acct: order_by
  categories: order_by
  content: order_by
  description: order_by
  fail_market_acct: order_by
  pass_market_acct: order_by
  proposal: proposals_order_by
  proposal_acct: order_by
  proposal_id: order_by
  proposer_acct: order_by
  quote_cond_vault_acct: order_by
  slug: order_by
  title: order_by
}

"""primary key columns input for table: proposal_details"""
input proposal_details_pk_columns_input {
  proposal_id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input proposal_details_prepend_input {
  categories: jsonb
}

"""
select columns of table "proposal_details"
"""
enum proposal_details_select_column {
  """column name"""
  base_cond_vault_acct

  """column name"""
  categories

  """column name"""
  content

  """column name"""
  description

  """column name"""
  fail_market_acct

  """column name"""
  pass_market_acct

  """column name"""
  proposal_acct

  """column name"""
  proposal_id

  """column name"""
  proposer_acct

  """column name"""
  quote_cond_vault_acct

  """column name"""
  slug

  """column name"""
  title
}

"""
input type for updating data in table "proposal_details"
"""
input proposal_details_set_input {
  base_cond_vault_acct: String
  categories: jsonb
  content: String
  description: String
  fail_market_acct: String
  pass_market_acct: String
  proposal_acct: String
  proposal_id: bigint
  proposer_acct: String
  quote_cond_vault_acct: String
  slug: String
  title: String
}

"""aggregate stddev on columns"""
type proposal_details_stddev_fields {
  proposal_id: Float
}

"""
order by stddev() on columns of table "proposal_details"
"""
input proposal_details_stddev_order_by {
  proposal_id: order_by
}

"""aggregate stddev_pop on columns"""
type proposal_details_stddev_pop_fields {
  proposal_id: Float
}

"""
order by stddev_pop() on columns of table "proposal_details"
"""
input proposal_details_stddev_pop_order_by {
  proposal_id: order_by
}

"""aggregate stddev_samp on columns"""
type proposal_details_stddev_samp_fields {
  proposal_id: Float
}

"""
order by stddev_samp() on columns of table "proposal_details"
"""
input proposal_details_stddev_samp_order_by {
  proposal_id: order_by
}

"""
Streaming cursor of the table "proposal_details"
"""
input proposal_details_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: proposal_details_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input proposal_details_stream_cursor_value_input {
  base_cond_vault_acct: String
  categories: jsonb
  content: String
  description: String
  fail_market_acct: String
  pass_market_acct: String
  proposal_acct: String
  proposal_id: bigint
  proposer_acct: String
  quote_cond_vault_acct: String
  slug: String
  title: String
}

"""aggregate sum on columns"""
type proposal_details_sum_fields {
  proposal_id: bigint
}

"""
order by sum() on columns of table "proposal_details"
"""
input proposal_details_sum_order_by {
  proposal_id: order_by
}

"""
update columns of table "proposal_details"
"""
enum proposal_details_update_column {
  """column name"""
  base_cond_vault_acct

  """column name"""
  categories

  """column name"""
  content

  """column name"""
  description

  """column name"""
  fail_market_acct

  """column name"""
  pass_market_acct

  """column name"""
  proposal_acct

  """column name"""
  proposal_id

  """column name"""
  proposer_acct

  """column name"""
  quote_cond_vault_acct

  """column name"""
  slug

  """column name"""
  title
}

input proposal_details_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: proposal_details_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: proposal_details_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: proposal_details_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: proposal_details_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: proposal_details_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: proposal_details_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: proposal_details_set_input

  """filter the rows which have to be updated"""
  where: proposal_details_bool_exp!
}

"""aggregate var_pop on columns"""
type proposal_details_var_pop_fields {
  proposal_id: Float
}

"""
order by var_pop() on columns of table "proposal_details"
"""
input proposal_details_var_pop_order_by {
  proposal_id: order_by
}

"""aggregate var_samp on columns"""
type proposal_details_var_samp_fields {
  proposal_id: Float
}

"""
order by var_samp() on columns of table "proposal_details"
"""
input proposal_details_var_samp_order_by {
  proposal_id: order_by
}

"""aggregate variance on columns"""
type proposal_details_variance_fields {
  proposal_id: Float
}

"""
order by variance() on columns of table "proposal_details"
"""
input proposal_details_variance_order_by {
  proposal_id: order_by
}

"""
columns and relationships of "proposal_total_trade_volume"
"""
type proposal_total_trade_volume {
  fail_market_acct: String
  fail_volume: numeric
  pass_market_acct: String
  pass_volume: numeric

  """An object relationship"""
  proposalTradeVolume: proposals

  """An object relationship"""
  proposalTradeVolumeFailMarket: markets

  """An object relationship"""
  proposalTradeVolumePassMarket: markets
  proposal_acct: String
}

"""
aggregated selection of "proposal_total_trade_volume"
"""
type proposal_total_trade_volume_aggregate {
  aggregate: proposal_total_trade_volume_aggregate_fields
  nodes: [proposal_total_trade_volume!]!
}

"""
aggregate fields of "proposal_total_trade_volume"
"""
type proposal_total_trade_volume_aggregate_fields {
  avg: proposal_total_trade_volume_avg_fields
  count(columns: [proposal_total_trade_volume_select_column!], distinct: Boolean): Int!
  max: proposal_total_trade_volume_max_fields
  min: proposal_total_trade_volume_min_fields
  stddev: proposal_total_trade_volume_stddev_fields
  stddev_pop: proposal_total_trade_volume_stddev_pop_fields
  stddev_samp: proposal_total_trade_volume_stddev_samp_fields
  sum: proposal_total_trade_volume_sum_fields
  var_pop: proposal_total_trade_volume_var_pop_fields
  var_samp: proposal_total_trade_volume_var_samp_fields
  variance: proposal_total_trade_volume_variance_fields
}

"""aggregate avg on columns"""
type proposal_total_trade_volume_avg_fields {
  fail_volume: Float
  pass_volume: Float
}

"""
Boolean expression to filter rows from the table "proposal_total_trade_volume". All fields are combined with a logical 'AND'.
"""
input proposal_total_trade_volume_bool_exp {
  _and: [proposal_total_trade_volume_bool_exp!]
  _not: proposal_total_trade_volume_bool_exp
  _or: [proposal_total_trade_volume_bool_exp!]
  fail_market_acct: String_comparison_exp
  fail_volume: numeric_comparison_exp
  pass_market_acct: String_comparison_exp
  pass_volume: numeric_comparison_exp
  proposalTradeVolume: proposals_bool_exp
  proposalTradeVolumeFailMarket: markets_bool_exp
  proposalTradeVolumePassMarket: markets_bool_exp
  proposal_acct: String_comparison_exp
}

"""aggregate max on columns"""
type proposal_total_trade_volume_max_fields {
  fail_market_acct: String
  fail_volume: numeric
  pass_market_acct: String
  pass_volume: numeric
  proposal_acct: String
}

"""aggregate min on columns"""
type proposal_total_trade_volume_min_fields {
  fail_market_acct: String
  fail_volume: numeric
  pass_market_acct: String
  pass_volume: numeric
  proposal_acct: String
}

"""
Ordering options when selecting data from "proposal_total_trade_volume".
"""
input proposal_total_trade_volume_order_by {
  fail_market_acct: order_by
  fail_volume: order_by
  pass_market_acct: order_by
  pass_volume: order_by
  proposalTradeVolume: proposals_order_by
  proposalTradeVolumeFailMarket: markets_order_by
  proposalTradeVolumePassMarket: markets_order_by
  proposal_acct: order_by
}

"""
select columns of table "proposal_total_trade_volume"
"""
enum proposal_total_trade_volume_select_column {
  """column name"""
  fail_market_acct

  """column name"""
  fail_volume

  """column name"""
  pass_market_acct

  """column name"""
  pass_volume

  """column name"""
  proposal_acct
}

"""aggregate stddev on columns"""
type proposal_total_trade_volume_stddev_fields {
  fail_volume: Float
  pass_volume: Float
}

"""aggregate stddev_pop on columns"""
type proposal_total_trade_volume_stddev_pop_fields {
  fail_volume: Float
  pass_volume: Float
}

"""aggregate stddev_samp on columns"""
type proposal_total_trade_volume_stddev_samp_fields {
  fail_volume: Float
  pass_volume: Float
}

"""
Streaming cursor of the table "proposal_total_trade_volume"
"""
input proposal_total_trade_volume_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: proposal_total_trade_volume_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input proposal_total_trade_volume_stream_cursor_value_input {
  fail_market_acct: String
  fail_volume: numeric
  pass_market_acct: String
  pass_volume: numeric
  proposal_acct: String
}

"""aggregate sum on columns"""
type proposal_total_trade_volume_sum_fields {
  fail_volume: numeric
  pass_volume: numeric
}

"""aggregate var_pop on columns"""
type proposal_total_trade_volume_var_pop_fields {
  fail_volume: Float
  pass_volume: Float
}

"""aggregate var_samp on columns"""
type proposal_total_trade_volume_var_samp_fields {
  fail_volume: Float
  pass_volume: Float
}

"""aggregate variance on columns"""
type proposal_total_trade_volume_variance_fields {
  fail_volume: Float
  pass_volume: Float
}

"""
columns and relationships of "proposals"
"""
type proposals {
  autocrat_version: float8!
  base_vault: String

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!
  completed_at: timestamptz

  """An object relationship"""
  conditionalVaultByQuoteVault: conditional_vaults

  """An object relationship"""
  conditional_vault: conditional_vaults
  created_at: timestamptz!

  """An object relationship"""
  dao: daos!
  dao_acct: String!
  description_url: String
  end_slot: bigint
  ended_at: timestamptz
  fail_market_acct: String
  initial_slot: bigint!

  """An array relationship"""
  markets(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """An aggregate relationship"""
  markets_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!
  pass_market_acct: String
  pricing_model_fail_acct: String
  pricing_model_pass_acct: String
  proposal_acct: String!

  """An array relationship"""
  proposal_details(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): [proposal_details!]!

  """An aggregate relationship"""
  proposal_details_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): proposal_details_aggregate!
  proposal_num: bigint!
  proposer_acct: String!
  quote_vault: String

  """An array relationship"""
  reactions(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """An aggregate relationship"""
  reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!
  status: String!

  """An array relationship"""
  twaps(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): [twaps!]!

  """An aggregate relationship"""
  twaps_aggregate(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): twaps_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "proposals"
"""
type proposals_aggregate {
  aggregate: proposals_aggregate_fields
  nodes: [proposals!]!
}

input proposals_aggregate_bool_exp {
  avg: proposals_aggregate_bool_exp_avg
  corr: proposals_aggregate_bool_exp_corr
  count: proposals_aggregate_bool_exp_count
  covar_samp: proposals_aggregate_bool_exp_covar_samp
  max: proposals_aggregate_bool_exp_max
  min: proposals_aggregate_bool_exp_min
  stddev_samp: proposals_aggregate_bool_exp_stddev_samp
  sum: proposals_aggregate_bool_exp_sum
  var_samp: proposals_aggregate_bool_exp_var_samp
}

input proposals_aggregate_bool_exp_avg {
  arguments: proposals_select_column_proposals_aggregate_bool_exp_avg_arguments_columns!
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: float8_comparison_exp!
}

input proposals_aggregate_bool_exp_corr {
  arguments: proposals_aggregate_bool_exp_corr_arguments!
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: float8_comparison_exp!
}

input proposals_aggregate_bool_exp_corr_arguments {
  X: proposals_select_column_proposals_aggregate_bool_exp_corr_arguments_columns!
  Y: proposals_select_column_proposals_aggregate_bool_exp_corr_arguments_columns!
}

input proposals_aggregate_bool_exp_count {
  arguments: [proposals_select_column!]
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: Int_comparison_exp!
}

input proposals_aggregate_bool_exp_covar_samp {
  arguments: proposals_aggregate_bool_exp_covar_samp_arguments!
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: float8_comparison_exp!
}

input proposals_aggregate_bool_exp_covar_samp_arguments {
  X: proposals_select_column_proposals_aggregate_bool_exp_covar_samp_arguments_columns!
  Y: proposals_select_column_proposals_aggregate_bool_exp_covar_samp_arguments_columns!
}

input proposals_aggregate_bool_exp_max {
  arguments: proposals_select_column_proposals_aggregate_bool_exp_max_arguments_columns!
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: float8_comparison_exp!
}

input proposals_aggregate_bool_exp_min {
  arguments: proposals_select_column_proposals_aggregate_bool_exp_min_arguments_columns!
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: float8_comparison_exp!
}

input proposals_aggregate_bool_exp_stddev_samp {
  arguments: proposals_select_column_proposals_aggregate_bool_exp_stddev_samp_arguments_columns!
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: float8_comparison_exp!
}

input proposals_aggregate_bool_exp_sum {
  arguments: proposals_select_column_proposals_aggregate_bool_exp_sum_arguments_columns!
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: float8_comparison_exp!
}

input proposals_aggregate_bool_exp_var_samp {
  arguments: proposals_select_column_proposals_aggregate_bool_exp_var_samp_arguments_columns!
  distinct: Boolean
  filter: proposals_bool_exp
  predicate: float8_comparison_exp!
}

"""
aggregate fields of "proposals"
"""
type proposals_aggregate_fields {
  avg: proposals_avg_fields
  count(columns: [proposals_select_column!], distinct: Boolean): Int!
  max: proposals_max_fields
  min: proposals_min_fields
  stddev: proposals_stddev_fields
  stddev_pop: proposals_stddev_pop_fields
  stddev_samp: proposals_stddev_samp_fields
  sum: proposals_sum_fields
  var_pop: proposals_var_pop_fields
  var_samp: proposals_var_samp_fields
  variance: proposals_variance_fields
}

"""
order by aggregate values of table "proposals"
"""
input proposals_aggregate_order_by {
  avg: proposals_avg_order_by
  count: order_by
  max: proposals_max_order_by
  min: proposals_min_order_by
  stddev: proposals_stddev_order_by
  stddev_pop: proposals_stddev_pop_order_by
  stddev_samp: proposals_stddev_samp_order_by
  sum: proposals_sum_order_by
  var_pop: proposals_var_pop_order_by
  var_samp: proposals_var_samp_order_by
  variance: proposals_variance_order_by
}

"""
input type for inserting array relation for remote table "proposals"
"""
input proposals_arr_rel_insert_input {
  data: [proposals_insert_input!]!

  """upsert condition"""
  on_conflict: proposals_on_conflict
}

"""aggregate avg on columns"""
type proposals_avg_fields {
  autocrat_version: Float
  end_slot: Float
  initial_slot: Float
  proposal_num: Float
}

"""
order by avg() on columns of table "proposals"
"""
input proposals_avg_order_by {
  autocrat_version: order_by
  end_slot: order_by
  initial_slot: order_by
  proposal_num: order_by
}

"""
Boolean expression to filter rows from the table "proposals". All fields are combined with a logical 'AND'.
"""
input proposals_bool_exp {
  _and: [proposals_bool_exp!]
  _not: proposals_bool_exp
  _or: [proposals_bool_exp!]
  autocrat_version: float8_comparison_exp
  base_vault: String_comparison_exp
  comments: comments_bool_exp
  comments_aggregate: comments_aggregate_bool_exp
  completed_at: timestamptz_comparison_exp
  conditionalVaultByQuoteVault: conditional_vaults_bool_exp
  conditional_vault: conditional_vaults_bool_exp
  created_at: timestamptz_comparison_exp
  dao: daos_bool_exp
  dao_acct: String_comparison_exp
  description_url: String_comparison_exp
  end_slot: bigint_comparison_exp
  ended_at: timestamptz_comparison_exp
  fail_market_acct: String_comparison_exp
  initial_slot: bigint_comparison_exp
  markets: markets_bool_exp
  markets_aggregate: markets_aggregate_bool_exp
  pass_market_acct: String_comparison_exp
  pricing_model_fail_acct: String_comparison_exp
  pricing_model_pass_acct: String_comparison_exp
  proposal_acct: String_comparison_exp
  proposal_details: proposal_details_bool_exp
  proposal_details_aggregate: proposal_details_aggregate_bool_exp
  proposal_num: bigint_comparison_exp
  proposer_acct: String_comparison_exp
  quote_vault: String_comparison_exp
  reactions: reactions_bool_exp
  reactions_aggregate: reactions_aggregate_bool_exp
  status: String_comparison_exp
  twaps: twaps_bool_exp
  twaps_aggregate: twaps_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "proposals"
"""
enum proposals_constraint {
  """
  unique or primary key constraint on columns "proposal_acct"
  """
  proposals_pkey
}

"""
input type for incrementing numeric columns in table "proposals"
"""
input proposals_inc_input {
  autocrat_version: float8
  end_slot: bigint
  initial_slot: bigint
  proposal_num: bigint
}

"""
input type for inserting data into table "proposals"
"""
input proposals_insert_input {
  autocrat_version: float8
  base_vault: String
  comments: comments_arr_rel_insert_input
  completed_at: timestamptz
  conditionalVaultByQuoteVault: conditional_vaults_obj_rel_insert_input
  conditional_vault: conditional_vaults_obj_rel_insert_input
  created_at: timestamptz
  dao: daos_obj_rel_insert_input
  dao_acct: String
  description_url: String
  end_slot: bigint
  ended_at: timestamptz
  fail_market_acct: String
  initial_slot: bigint
  markets: markets_arr_rel_insert_input
  pass_market_acct: String
  pricing_model_fail_acct: String
  pricing_model_pass_acct: String
  proposal_acct: String
  proposal_details: proposal_details_arr_rel_insert_input
  proposal_num: bigint
  proposer_acct: String
  quote_vault: String
  reactions: reactions_arr_rel_insert_input
  status: String
  twaps: twaps_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type proposals_max_fields {
  autocrat_version: float8
  base_vault: String
  completed_at: timestamptz
  created_at: timestamptz
  dao_acct: String
  description_url: String
  end_slot: bigint
  ended_at: timestamptz
  fail_market_acct: String
  initial_slot: bigint
  pass_market_acct: String
  pricing_model_fail_acct: String
  pricing_model_pass_acct: String
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  quote_vault: String
  status: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "proposals"
"""
input proposals_max_order_by {
  autocrat_version: order_by
  base_vault: order_by
  completed_at: order_by
  created_at: order_by
  dao_acct: order_by
  description_url: order_by
  end_slot: order_by
  ended_at: order_by
  fail_market_acct: order_by
  initial_slot: order_by
  pass_market_acct: order_by
  pricing_model_fail_acct: order_by
  pricing_model_pass_acct: order_by
  proposal_acct: order_by
  proposal_num: order_by
  proposer_acct: order_by
  quote_vault: order_by
  status: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type proposals_min_fields {
  autocrat_version: float8
  base_vault: String
  completed_at: timestamptz
  created_at: timestamptz
  dao_acct: String
  description_url: String
  end_slot: bigint
  ended_at: timestamptz
  fail_market_acct: String
  initial_slot: bigint
  pass_market_acct: String
  pricing_model_fail_acct: String
  pricing_model_pass_acct: String
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  quote_vault: String
  status: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "proposals"
"""
input proposals_min_order_by {
  autocrat_version: order_by
  base_vault: order_by
  completed_at: order_by
  created_at: order_by
  dao_acct: order_by
  description_url: order_by
  end_slot: order_by
  ended_at: order_by
  fail_market_acct: order_by
  initial_slot: order_by
  pass_market_acct: order_by
  pricing_model_fail_acct: order_by
  pricing_model_pass_acct: order_by
  proposal_acct: order_by
  proposal_num: order_by
  proposer_acct: order_by
  quote_vault: order_by
  status: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "proposals"
"""
type proposals_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [proposals!]!
}

"""
input type for inserting object relation for remote table "proposals"
"""
input proposals_obj_rel_insert_input {
  data: proposals_insert_input!

  """upsert condition"""
  on_conflict: proposals_on_conflict
}

"""
on_conflict condition type for table "proposals"
"""
input proposals_on_conflict {
  constraint: proposals_constraint!
  update_columns: [proposals_update_column!]! = []
  where: proposals_bool_exp
}

"""Ordering options when selecting data from "proposals"."""
input proposals_order_by {
  autocrat_version: order_by
  base_vault: order_by
  comments_aggregate: comments_aggregate_order_by
  completed_at: order_by
  conditionalVaultByQuoteVault: conditional_vaults_order_by
  conditional_vault: conditional_vaults_order_by
  created_at: order_by
  dao: daos_order_by
  dao_acct: order_by
  description_url: order_by
  end_slot: order_by
  ended_at: order_by
  fail_market_acct: order_by
  initial_slot: order_by
  markets_aggregate: markets_aggregate_order_by
  pass_market_acct: order_by
  pricing_model_fail_acct: order_by
  pricing_model_pass_acct: order_by
  proposal_acct: order_by
  proposal_details_aggregate: proposal_details_aggregate_order_by
  proposal_num: order_by
  proposer_acct: order_by
  quote_vault: order_by
  reactions_aggregate: reactions_aggregate_order_by
  status: order_by
  twaps_aggregate: twaps_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: proposals"""
input proposals_pk_columns_input {
  proposal_acct: String!
}

"""
select columns of table "proposals"
"""
enum proposals_select_column {
  """column name"""
  autocrat_version

  """column name"""
  base_vault

  """column name"""
  completed_at

  """column name"""
  created_at

  """column name"""
  dao_acct

  """column name"""
  description_url

  """column name"""
  end_slot

  """column name"""
  ended_at

  """column name"""
  fail_market_acct

  """column name"""
  initial_slot

  """column name"""
  pass_market_acct

  """column name"""
  pricing_model_fail_acct

  """column name"""
  pricing_model_pass_acct

  """column name"""
  proposal_acct

  """column name"""
  proposal_num

  """column name"""
  proposer_acct

  """column name"""
  quote_vault

  """column name"""
  status

  """column name"""
  updated_at
}

"""
select "proposals_aggregate_bool_exp_avg_arguments_columns" columns of table "proposals"
"""
enum proposals_select_column_proposals_aggregate_bool_exp_avg_arguments_columns {
  """column name"""
  autocrat_version
}

"""
select "proposals_aggregate_bool_exp_corr_arguments_columns" columns of table "proposals"
"""
enum proposals_select_column_proposals_aggregate_bool_exp_corr_arguments_columns {
  """column name"""
  autocrat_version
}

"""
select "proposals_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "proposals"
"""
enum proposals_select_column_proposals_aggregate_bool_exp_covar_samp_arguments_columns {
  """column name"""
  autocrat_version
}

"""
select "proposals_aggregate_bool_exp_max_arguments_columns" columns of table "proposals"
"""
enum proposals_select_column_proposals_aggregate_bool_exp_max_arguments_columns {
  """column name"""
  autocrat_version
}

"""
select "proposals_aggregate_bool_exp_min_arguments_columns" columns of table "proposals"
"""
enum proposals_select_column_proposals_aggregate_bool_exp_min_arguments_columns {
  """column name"""
  autocrat_version
}

"""
select "proposals_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "proposals"
"""
enum proposals_select_column_proposals_aggregate_bool_exp_stddev_samp_arguments_columns {
  """column name"""
  autocrat_version
}

"""
select "proposals_aggregate_bool_exp_sum_arguments_columns" columns of table "proposals"
"""
enum proposals_select_column_proposals_aggregate_bool_exp_sum_arguments_columns {
  """column name"""
  autocrat_version
}

"""
select "proposals_aggregate_bool_exp_var_samp_arguments_columns" columns of table "proposals"
"""
enum proposals_select_column_proposals_aggregate_bool_exp_var_samp_arguments_columns {
  """column name"""
  autocrat_version
}

"""
input type for updating data in table "proposals"
"""
input proposals_set_input {
  autocrat_version: float8
  base_vault: String
  completed_at: timestamptz
  created_at: timestamptz
  dao_acct: String
  description_url: String
  end_slot: bigint
  ended_at: timestamptz
  fail_market_acct: String
  initial_slot: bigint
  pass_market_acct: String
  pricing_model_fail_acct: String
  pricing_model_pass_acct: String
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  quote_vault: String
  status: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type proposals_stddev_fields {
  autocrat_version: Float
  end_slot: Float
  initial_slot: Float
  proposal_num: Float
}

"""
order by stddev() on columns of table "proposals"
"""
input proposals_stddev_order_by {
  autocrat_version: order_by
  end_slot: order_by
  initial_slot: order_by
  proposal_num: order_by
}

"""aggregate stddev_pop on columns"""
type proposals_stddev_pop_fields {
  autocrat_version: Float
  end_slot: Float
  initial_slot: Float
  proposal_num: Float
}

"""
order by stddev_pop() on columns of table "proposals"
"""
input proposals_stddev_pop_order_by {
  autocrat_version: order_by
  end_slot: order_by
  initial_slot: order_by
  proposal_num: order_by
}

"""aggregate stddev_samp on columns"""
type proposals_stddev_samp_fields {
  autocrat_version: Float
  end_slot: Float
  initial_slot: Float
  proposal_num: Float
}

"""
order by stddev_samp() on columns of table "proposals"
"""
input proposals_stddev_samp_order_by {
  autocrat_version: order_by
  end_slot: order_by
  initial_slot: order_by
  proposal_num: order_by
}

"""
Streaming cursor of the table "proposals"
"""
input proposals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: proposals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input proposals_stream_cursor_value_input {
  autocrat_version: float8
  base_vault: String
  completed_at: timestamptz
  created_at: timestamptz
  dao_acct: String
  description_url: String
  end_slot: bigint
  ended_at: timestamptz
  fail_market_acct: String
  initial_slot: bigint
  pass_market_acct: String
  pricing_model_fail_acct: String
  pricing_model_pass_acct: String
  proposal_acct: String
  proposal_num: bigint
  proposer_acct: String
  quote_vault: String
  status: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type proposals_sum_fields {
  autocrat_version: float8
  end_slot: bigint
  initial_slot: bigint
  proposal_num: bigint
}

"""
order by sum() on columns of table "proposals"
"""
input proposals_sum_order_by {
  autocrat_version: order_by
  end_slot: order_by
  initial_slot: order_by
  proposal_num: order_by
}

"""
update columns of table "proposals"
"""
enum proposals_update_column {
  """column name"""
  autocrat_version

  """column name"""
  base_vault

  """column name"""
  completed_at

  """column name"""
  created_at

  """column name"""
  dao_acct

  """column name"""
  description_url

  """column name"""
  end_slot

  """column name"""
  ended_at

  """column name"""
  fail_market_acct

  """column name"""
  initial_slot

  """column name"""
  pass_market_acct

  """column name"""
  pricing_model_fail_acct

  """column name"""
  pricing_model_pass_acct

  """column name"""
  proposal_acct

  """column name"""
  proposal_num

  """column name"""
  proposer_acct

  """column name"""
  quote_vault

  """column name"""
  status

  """column name"""
  updated_at
}

input proposals_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: proposals_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: proposals_set_input

  """filter the rows which have to be updated"""
  where: proposals_bool_exp!
}

"""aggregate var_pop on columns"""
type proposals_var_pop_fields {
  autocrat_version: Float
  end_slot: Float
  initial_slot: Float
  proposal_num: Float
}

"""
order by var_pop() on columns of table "proposals"
"""
input proposals_var_pop_order_by {
  autocrat_version: order_by
  end_slot: order_by
  initial_slot: order_by
  proposal_num: order_by
}

"""aggregate var_samp on columns"""
type proposals_var_samp_fields {
  autocrat_version: Float
  end_slot: Float
  initial_slot: Float
  proposal_num: Float
}

"""
order by var_samp() on columns of table "proposals"
"""
input proposals_var_samp_order_by {
  autocrat_version: order_by
  end_slot: order_by
  initial_slot: order_by
  proposal_num: order_by
}

"""aggregate variance on columns"""
type proposals_variance_fields {
  autocrat_version: Float
  end_slot: Float
  initial_slot: Float
  proposal_num: Float
}

"""
order by variance() on columns of table "proposals"
"""
input proposals_variance_order_by {
  autocrat_version: order_by
  end_slot: order_by
  initial_slot: order_by
  proposal_num: order_by
}

type query_root {
  """An array relationship"""
  candles(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): [candles!]!

  """An aggregate relationship"""
  candles_aggregate(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): candles_aggregate!

  """fetch data from the table: "candles" using primary key columns"""
  candles_by_pk(candle_duration: Int!, market_acct: String!, timestamp: timestamptz!): candles

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!

  """fetch data from the table: "comments" using primary key columns"""
  comments_by_pk(comment_id: bigint!): comments

  """An array relationship"""
  conditional_vaults(
    """distinct select on columns"""
    distinct_on: [conditional_vaults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conditional_vaults_order_by!]

    """filter the rows returned"""
    where: conditional_vaults_bool_exp
  ): [conditional_vaults!]!

  """An aggregate relationship"""
  conditional_vaults_aggregate(
    """distinct select on columns"""
    distinct_on: [conditional_vaults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conditional_vaults_order_by!]

    """filter the rows returned"""
    where: conditional_vaults_bool_exp
  ): conditional_vaults_aggregate!

  """
  fetch data from the table: "conditional_vaults" using primary key columns
  """
  conditional_vaults_by_pk(cond_vault_acct: String!): conditional_vaults

  """
  fetch data from the table: "dao_details"
  """
  dao_details(
    """distinct select on columns"""
    distinct_on: [dao_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dao_details_order_by!]

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): [dao_details!]!

  """
  fetch aggregated fields from the table: "dao_details"
  """
  dao_details_aggregate(
    """distinct select on columns"""
    distinct_on: [dao_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dao_details_order_by!]

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): dao_details_aggregate!

  """fetch data from the table: "dao_details" using primary key columns"""
  dao_details_by_pk(dao_id: bigint!): dao_details

  """An array relationship"""
  daos(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """An aggregate relationship"""
  daos_aggregate(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): daos_aggregate!

  """fetch data from the table: "daos" using primary key columns"""
  daos_by_pk(dao_acct: String!): daos

  """An array relationship"""
  indexer_account_dependencies(
    """distinct select on columns"""
    distinct_on: [indexer_account_dependencies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_account_dependencies_order_by!]

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): [indexer_account_dependencies!]!

  """An aggregate relationship"""
  indexer_account_dependencies_aggregate(
    """distinct select on columns"""
    distinct_on: [indexer_account_dependencies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_account_dependencies_order_by!]

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): indexer_account_dependencies_aggregate!

  """
  fetch data from the table: "indexer_account_dependencies" using primary key columns
  """
  indexer_account_dependencies_by_pk(acct: String!, name: String!): indexer_account_dependencies

  """
  fetch data from the table: "indexers"
  """
  indexers(
    """distinct select on columns"""
    distinct_on: [indexers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexers_order_by!]

    """filter the rows returned"""
    where: indexers_bool_exp
  ): [indexers!]!

  """
  fetch aggregated fields from the table: "indexers"
  """
  indexers_aggregate(
    """distinct select on columns"""
    distinct_on: [indexers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexers_order_by!]

    """filter the rows returned"""
    where: indexers_bool_exp
  ): indexers_aggregate!

  """fetch data from the table: "indexers" using primary key columns"""
  indexers_by_pk(name: String!): indexers

  """An array relationship"""
  makes(
    """distinct select on columns"""
    distinct_on: [makes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [makes_order_by!]

    """filter the rows returned"""
    where: makes_bool_exp
  ): [makes!]!

  """An aggregate relationship"""
  makes_aggregate(
    """distinct select on columns"""
    distinct_on: [makes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [makes_order_by!]

    """filter the rows returned"""
    where: makes_bool_exp
  ): makes_aggregate!

  """fetch data from the table: "makes" using primary key columns"""
  makes_by_pk(order_tx_sig: String!): makes

  """An array relationship"""
  markets(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """An aggregate relationship"""
  markets_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!

  """fetch data from the table: "markets" using primary key columns"""
  markets_by_pk(market_acct: String!): markets

  """An array relationship"""
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """An aggregate relationship"""
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(order_tx_sig: String!): orders

  """An array relationship"""
  prices(
    """distinct select on columns"""
    distinct_on: [prices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_order_by!]

    """filter the rows returned"""
    where: prices_bool_exp
  ): [prices!]!

  """An aggregate relationship"""
  prices_aggregate(
    """distinct select on columns"""
    distinct_on: [prices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_order_by!]

    """filter the rows returned"""
    where: prices_bool_exp
  ): prices_aggregate!

  """fetch data from the table: "prices" using primary key columns"""
  prices_by_pk(created_at: timestamptz!, market_acct: String!): prices

  """
  fetch data from the table: "prices_chart_data"
  """
  prices_chart_data(
    """distinct select on columns"""
    distinct_on: [prices_chart_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_chart_data_order_by!]

    """filter the rows returned"""
    where: prices_chart_data_bool_exp
  ): [prices_chart_data!]!

  """
  fetch aggregated fields from the table: "prices_chart_data"
  """
  prices_chart_data_aggregate(
    """distinct select on columns"""
    distinct_on: [prices_chart_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_chart_data_order_by!]

    """filter the rows returned"""
    where: prices_chart_data_bool_exp
  ): prices_chart_data_aggregate!

  """
  fetch data from the table: "program_system"
  """
  program_system(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): [program_system!]!

  """
  fetch aggregated fields from the table: "program_system"
  """
  program_system_aggregate(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): program_system_aggregate!

  """fetch data from the table: "program_system" using primary key columns"""
  program_system_by_pk(system_version: float8!): program_system

  """
  fetch data from the table: "programs"
  """
  programs(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """
  fetch aggregated fields from the table: "programs"
  """
  programs_aggregate(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): programs_aggregate!

  """fetch data from the table: "programs" using primary key columns"""
  programs_by_pk(program_acct: String!): programs

  """
  fetch data from the table: "proposal_bars"
  """
  proposal_bars(
    """distinct select on columns"""
    distinct_on: [proposal_bars_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_bars_order_by!]

    """filter the rows returned"""
    where: proposal_bars_bool_exp
  ): [proposal_bars!]!

  """
  fetch aggregated fields from the table: "proposal_bars"
  """
  proposal_bars_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_bars_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_bars_order_by!]

    """filter the rows returned"""
    where: proposal_bars_bool_exp
  ): proposal_bars_aggregate!

  """fetch data from the table: "proposal_bars" using primary key columns"""
  proposal_bars_by_pk(bar_size: interval!, bar_start_time: timestamptz!, proposal_acct: String!): proposal_bars

  """An array relationship"""
  proposal_details(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): [proposal_details!]!

  """An aggregate relationship"""
  proposal_details_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): proposal_details_aggregate!

  """
  fetch data from the table: "proposal_details" using primary key columns
  """
  proposal_details_by_pk(proposal_id: bigint!): proposal_details

  """
  fetch data from the table: "proposal_total_trade_volume"
  """
  proposal_total_trade_volume(
    """distinct select on columns"""
    distinct_on: [proposal_total_trade_volume_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_total_trade_volume_order_by!]

    """filter the rows returned"""
    where: proposal_total_trade_volume_bool_exp
  ): [proposal_total_trade_volume!]!

  """
  fetch aggregated fields from the table: "proposal_total_trade_volume"
  """
  proposal_total_trade_volume_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_total_trade_volume_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_total_trade_volume_order_by!]

    """filter the rows returned"""
    where: proposal_total_trade_volume_bool_exp
  ): proposal_total_trade_volume_aggregate!

  """An array relationship"""
  proposals(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """An aggregate relationship"""
  proposals_aggregate(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): proposals_aggregate!

  """fetch data from the table: "proposals" using primary key columns"""
  proposals_by_pk(proposal_acct: String!): proposals

  """An array relationship"""
  reactions(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """An aggregate relationship"""
  reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!

  """fetch data from the table: "reactions" using primary key columns"""
  reactions_by_pk(proposal_acct: String!, reaction: String!, reactor_acct: String!): reactions

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """An aggregate relationship"""
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!

  """fetch data from the table: "sessions" using primary key columns"""
  sessions_by_pk(id: uuid!): sessions

  """An array relationship"""
  takes(
    """distinct select on columns"""
    distinct_on: [takes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [takes_order_by!]

    """filter the rows returned"""
    where: takes_bool_exp
  ): [takes!]!

  """An aggregate relationship"""
  takes_aggregate(
    """distinct select on columns"""
    distinct_on: [takes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [takes_order_by!]

    """filter the rows returned"""
    where: takes_bool_exp
  ): takes_aggregate!

  """fetch data from the table: "takes" using primary key columns"""
  takes_by_pk(order_tx_sig: String!): takes

  """An array relationship"""
  token_acct_balances(
    """distinct select on columns"""
    distinct_on: [token_acct_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_acct_balances_order_by!]

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): [token_acct_balances!]!

  """An aggregate relationship"""
  token_acct_balances_aggregate(
    """distinct select on columns"""
    distinct_on: [token_acct_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_acct_balances_order_by!]

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): token_acct_balances_aggregate!

  """
  fetch data from the table: "token_acct_balances" using primary key columns
  """
  token_acct_balances_by_pk(amount: bigint!, created_at: timestamptz!, mint_acct: String!, token_acct: String!): token_acct_balances

  """An array relationship"""
  token_accts(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): [token_accts!]!

  """An aggregate relationship"""
  token_accts_aggregate(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): token_accts_aggregate!

  """fetch data from the table: "token_accts" using primary key columns"""
  token_accts_by_pk(token_acct: String!): token_accts

  """
  fetch data from the table: "tokens"
  """
  tokens(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """
  fetch aggregated fields from the table: "tokens"
  """
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): tokens_aggregate!

  """fetch data from the table: "tokens" using primary key columns"""
  tokens_by_pk(mint_acct: String!): tokens

  """An array relationship"""
  transaction_watcher_transactions(
    """distinct select on columns"""
    distinct_on: [transaction_watcher_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watcher_transactions_order_by!]

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): [transaction_watcher_transactions!]!

  """An aggregate relationship"""
  transaction_watcher_transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_watcher_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watcher_transactions_order_by!]

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): transaction_watcher_transactions_aggregate!

  """
  fetch data from the table: "transaction_watcher_transactions" using primary key columns
  """
  transaction_watcher_transactions_by_pk(tx_sig: String!, watcher_acct: String!): transaction_watcher_transactions

  """An array relationship"""
  transaction_watchers(
    """distinct select on columns"""
    distinct_on: [transaction_watchers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watchers_order_by!]

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): [transaction_watchers!]!

  """An aggregate relationship"""
  transaction_watchers_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_watchers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watchers_order_by!]

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): transaction_watchers_aggregate!

  """
  fetch data from the table: "transaction_watchers" using primary key columns
  """
  transaction_watchers_by_pk(acct: String!): transaction_watchers

  """
  fetch data from the table: "transactions"
  """
  transactions(
    """distinct select on columns"""
    distinct_on: [transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transactions_order_by!]

    """filter the rows returned"""
    where: transactions_bool_exp
  ): [transactions!]!

  """
  fetch aggregated fields from the table: "transactions"
  """
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transactions_order_by!]

    """filter the rows returned"""
    where: transactions_bool_exp
  ): transactions_aggregate!

  """fetch data from the table: "transactions" using primary key columns"""
  transactions_by_pk(tx_sig: String!): transactions

  """
  fetch data from the table: "twap_chart_data"
  """
  twap_chart_data(
    """distinct select on columns"""
    distinct_on: [twap_chart_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twap_chart_data_order_by!]

    """filter the rows returned"""
    where: twap_chart_data_bool_exp
  ): [twap_chart_data!]!

  """
  fetch aggregated fields from the table: "twap_chart_data"
  """
  twap_chart_data_aggregate(
    """distinct select on columns"""
    distinct_on: [twap_chart_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twap_chart_data_order_by!]

    """filter the rows returned"""
    where: twap_chart_data_bool_exp
  ): twap_chart_data_aggregate!

  """An array relationship"""
  twaps(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): [twaps!]!

  """An aggregate relationship"""
  twaps_aggregate(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): twaps_aggregate!

  """fetch data from the table: "twaps" using primary key columns"""
  twaps_by_pk(market_acct: String!, updated_slot: bigint!): twaps

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(user_acct: String!): users
}

"""
columns and relationships of "reactions"
"""
type reactions {
  """An object relationship"""
  comment: comments
  comment_id: bigint

  """An object relationship"""
  proposal: proposals!
  proposal_acct: String!
  reaction: String!
  reactor_acct: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "reactions"
"""
type reactions_aggregate {
  aggregate: reactions_aggregate_fields
  nodes: [reactions!]!
}

input reactions_aggregate_bool_exp {
  count: reactions_aggregate_bool_exp_count
}

input reactions_aggregate_bool_exp_count {
  arguments: [reactions_select_column!]
  distinct: Boolean
  filter: reactions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "reactions"
"""
type reactions_aggregate_fields {
  avg: reactions_avg_fields
  count(columns: [reactions_select_column!], distinct: Boolean): Int!
  max: reactions_max_fields
  min: reactions_min_fields
  stddev: reactions_stddev_fields
  stddev_pop: reactions_stddev_pop_fields
  stddev_samp: reactions_stddev_samp_fields
  sum: reactions_sum_fields
  var_pop: reactions_var_pop_fields
  var_samp: reactions_var_samp_fields
  variance: reactions_variance_fields
}

"""
order by aggregate values of table "reactions"
"""
input reactions_aggregate_order_by {
  avg: reactions_avg_order_by
  count: order_by
  max: reactions_max_order_by
  min: reactions_min_order_by
  stddev: reactions_stddev_order_by
  stddev_pop: reactions_stddev_pop_order_by
  stddev_samp: reactions_stddev_samp_order_by
  sum: reactions_sum_order_by
  var_pop: reactions_var_pop_order_by
  var_samp: reactions_var_samp_order_by
  variance: reactions_variance_order_by
}

"""
input type for inserting array relation for remote table "reactions"
"""
input reactions_arr_rel_insert_input {
  data: [reactions_insert_input!]!

  """upsert condition"""
  on_conflict: reactions_on_conflict
}

"""aggregate avg on columns"""
type reactions_avg_fields {
  comment_id: Float
}

"""
order by avg() on columns of table "reactions"
"""
input reactions_avg_order_by {
  comment_id: order_by
}

"""
Boolean expression to filter rows from the table "reactions". All fields are combined with a logical 'AND'.
"""
input reactions_bool_exp {
  _and: [reactions_bool_exp!]
  _not: reactions_bool_exp
  _or: [reactions_bool_exp!]
  comment: comments_bool_exp
  comment_id: bigint_comparison_exp
  proposal: proposals_bool_exp
  proposal_acct: String_comparison_exp
  reaction: String_comparison_exp
  reactor_acct: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "reactions"
"""
enum reactions_constraint {
  """
  unique or primary key constraint on columns "reactor_acct", "proposal_acct", "reaction"
  """
  reactions_proposal_acct_reaction_reactor_acct_pk
}

"""
input type for incrementing numeric columns in table "reactions"
"""
input reactions_inc_input {
  comment_id: bigint
}

"""
input type for inserting data into table "reactions"
"""
input reactions_insert_input {
  comment: comments_obj_rel_insert_input
  comment_id: bigint
  proposal: proposals_obj_rel_insert_input
  proposal_acct: String
  reaction: String
  reactor_acct: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type reactions_max_fields {
  comment_id: bigint
  proposal_acct: String
  reaction: String
  reactor_acct: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "reactions"
"""
input reactions_max_order_by {
  comment_id: order_by
  proposal_acct: order_by
  reaction: order_by
  reactor_acct: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type reactions_min_fields {
  comment_id: bigint
  proposal_acct: String
  reaction: String
  reactor_acct: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "reactions"
"""
input reactions_min_order_by {
  comment_id: order_by
  proposal_acct: order_by
  reaction: order_by
  reactor_acct: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "reactions"
"""
type reactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [reactions!]!
}

"""
on_conflict condition type for table "reactions"
"""
input reactions_on_conflict {
  constraint: reactions_constraint!
  update_columns: [reactions_update_column!]! = []
  where: reactions_bool_exp
}

"""Ordering options when selecting data from "reactions"."""
input reactions_order_by {
  comment: comments_order_by
  comment_id: order_by
  proposal: proposals_order_by
  proposal_acct: order_by
  reaction: order_by
  reactor_acct: order_by
  updated_at: order_by
}

"""primary key columns input for table: reactions"""
input reactions_pk_columns_input {
  proposal_acct: String!
  reaction: String!
  reactor_acct: String!
}

"""
select columns of table "reactions"
"""
enum reactions_select_column {
  """column name"""
  comment_id

  """column name"""
  proposal_acct

  """column name"""
  reaction

  """column name"""
  reactor_acct

  """column name"""
  updated_at
}

"""
input type for updating data in table "reactions"
"""
input reactions_set_input {
  comment_id: bigint
  proposal_acct: String
  reaction: String
  reactor_acct: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type reactions_stddev_fields {
  comment_id: Float
}

"""
order by stddev() on columns of table "reactions"
"""
input reactions_stddev_order_by {
  comment_id: order_by
}

"""aggregate stddev_pop on columns"""
type reactions_stddev_pop_fields {
  comment_id: Float
}

"""
order by stddev_pop() on columns of table "reactions"
"""
input reactions_stddev_pop_order_by {
  comment_id: order_by
}

"""aggregate stddev_samp on columns"""
type reactions_stddev_samp_fields {
  comment_id: Float
}

"""
order by stddev_samp() on columns of table "reactions"
"""
input reactions_stddev_samp_order_by {
  comment_id: order_by
}

"""
Streaming cursor of the table "reactions"
"""
input reactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: reactions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input reactions_stream_cursor_value_input {
  comment_id: bigint
  proposal_acct: String
  reaction: String
  reactor_acct: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type reactions_sum_fields {
  comment_id: bigint
}

"""
order by sum() on columns of table "reactions"
"""
input reactions_sum_order_by {
  comment_id: order_by
}

"""
update columns of table "reactions"
"""
enum reactions_update_column {
  """column name"""
  comment_id

  """column name"""
  proposal_acct

  """column name"""
  reaction

  """column name"""
  reactor_acct

  """column name"""
  updated_at
}

input reactions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: reactions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: reactions_set_input

  """filter the rows which have to be updated"""
  where: reactions_bool_exp!
}

"""aggregate var_pop on columns"""
type reactions_var_pop_fields {
  comment_id: Float
}

"""
order by var_pop() on columns of table "reactions"
"""
input reactions_var_pop_order_by {
  comment_id: order_by
}

"""aggregate var_samp on columns"""
type reactions_var_samp_fields {
  comment_id: Float
}

"""
order by var_samp() on columns of table "reactions"
"""
input reactions_var_samp_order_by {
  comment_id: order_by
}

"""aggregate variance on columns"""
type reactions_variance_fields {
  comment_id: Float
}

"""
order by variance() on columns of table "reactions"
"""
input reactions_variance_order_by {
  comment_id: order_by
}

"""
columns and relationships of "sessions"
"""
type sessions {
  created_at: timestamptz!
  expires_at: timestamp
  id: uuid!

  """An object relationship"""
  user: users
  user_acct: String
}

"""
aggregated selection of "sessions"
"""
type sessions_aggregate {
  aggregate: sessions_aggregate_fields
  nodes: [sessions!]!
}

input sessions_aggregate_bool_exp {
  count: sessions_aggregate_bool_exp_count
}

input sessions_aggregate_bool_exp_count {
  arguments: [sessions_select_column!]
  distinct: Boolean
  filter: sessions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "sessions"
"""
type sessions_aggregate_fields {
  count(columns: [sessions_select_column!], distinct: Boolean): Int!
  max: sessions_max_fields
  min: sessions_min_fields
}

"""
order by aggregate values of table "sessions"
"""
input sessions_aggregate_order_by {
  count: order_by
  max: sessions_max_order_by
  min: sessions_min_order_by
}

"""
input type for inserting array relation for remote table "sessions"
"""
input sessions_arr_rel_insert_input {
  data: [sessions_insert_input!]!

  """upsert condition"""
  on_conflict: sessions_on_conflict
}

"""
Boolean expression to filter rows from the table "sessions". All fields are combined with a logical 'AND'.
"""
input sessions_bool_exp {
  _and: [sessions_bool_exp!]
  _not: sessions_bool_exp
  _or: [sessions_bool_exp!]
  created_at: timestamptz_comparison_exp
  expires_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  user: users_bool_exp
  user_acct: String_comparison_exp
}

"""
unique or primary key constraints on table "sessions"
"""
enum sessions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  sessions_pkey
}

"""
input type for inserting data into table "sessions"
"""
input sessions_insert_input {
  created_at: timestamptz
  expires_at: timestamp
  id: uuid
  user: users_obj_rel_insert_input
  user_acct: String
}

"""aggregate max on columns"""
type sessions_max_fields {
  created_at: timestamptz
  expires_at: timestamp
  id: uuid
  user_acct: String
}

"""
order by max() on columns of table "sessions"
"""
input sessions_max_order_by {
  created_at: order_by
  expires_at: order_by
  id: order_by
  user_acct: order_by
}

"""aggregate min on columns"""
type sessions_min_fields {
  created_at: timestamptz
  expires_at: timestamp
  id: uuid
  user_acct: String
}

"""
order by min() on columns of table "sessions"
"""
input sessions_min_order_by {
  created_at: order_by
  expires_at: order_by
  id: order_by
  user_acct: order_by
}

"""
response of any mutation on the table "sessions"
"""
type sessions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sessions!]!
}

"""
on_conflict condition type for table "sessions"
"""
input sessions_on_conflict {
  constraint: sessions_constraint!
  update_columns: [sessions_update_column!]! = []
  where: sessions_bool_exp
}

"""Ordering options when selecting data from "sessions"."""
input sessions_order_by {
  created_at: order_by
  expires_at: order_by
  id: order_by
  user: users_order_by
  user_acct: order_by
}

"""primary key columns input for table: sessions"""
input sessions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "sessions"
"""
enum sessions_select_column {
  """column name"""
  created_at

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  user_acct
}

"""
input type for updating data in table "sessions"
"""
input sessions_set_input {
  created_at: timestamptz
  expires_at: timestamp
  id: uuid
  user_acct: String
}

"""
Streaming cursor of the table "sessions"
"""
input sessions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: sessions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input sessions_stream_cursor_value_input {
  created_at: timestamptz
  expires_at: timestamp
  id: uuid
  user_acct: String
}

"""
update columns of table "sessions"
"""
enum sessions_update_column {
  """column name"""
  created_at

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  user_acct
}

input sessions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: sessions_set_input

  """filter the rows which have to be updated"""
  where: sessions_bool_exp!
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type subscription_root {
  """An array relationship"""
  candles(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): [candles!]!

  """An aggregate relationship"""
  candles_aggregate(
    """distinct select on columns"""
    distinct_on: [candles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [candles_order_by!]

    """filter the rows returned"""
    where: candles_bool_exp
  ): candles_aggregate!

  """fetch data from the table: "candles" using primary key columns"""
  candles_by_pk(candle_duration: Int!, market_acct: String!, timestamp: timestamptz!): candles

  """
  fetch data from the table in a streaming manner: "candles"
  """
  candles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [candles_stream_cursor_input]!

    """filter the rows returned"""
    where: candles_bool_exp
  ): [candles!]!

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!

  """fetch data from the table: "comments" using primary key columns"""
  comments_by_pk(comment_id: bigint!): comments

  """
  fetch data from the table in a streaming manner: "comments"
  """
  comments_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [comments_stream_cursor_input]!

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An array relationship"""
  conditional_vaults(
    """distinct select on columns"""
    distinct_on: [conditional_vaults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conditional_vaults_order_by!]

    """filter the rows returned"""
    where: conditional_vaults_bool_exp
  ): [conditional_vaults!]!

  """An aggregate relationship"""
  conditional_vaults_aggregate(
    """distinct select on columns"""
    distinct_on: [conditional_vaults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conditional_vaults_order_by!]

    """filter the rows returned"""
    where: conditional_vaults_bool_exp
  ): conditional_vaults_aggregate!

  """
  fetch data from the table: "conditional_vaults" using primary key columns
  """
  conditional_vaults_by_pk(cond_vault_acct: String!): conditional_vaults

  """
  fetch data from the table in a streaming manner: "conditional_vaults"
  """
  conditional_vaults_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [conditional_vaults_stream_cursor_input]!

    """filter the rows returned"""
    where: conditional_vaults_bool_exp
  ): [conditional_vaults!]!

  """
  fetch data from the table: "dao_details"
  """
  dao_details(
    """distinct select on columns"""
    distinct_on: [dao_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dao_details_order_by!]

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): [dao_details!]!

  """
  fetch aggregated fields from the table: "dao_details"
  """
  dao_details_aggregate(
    """distinct select on columns"""
    distinct_on: [dao_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dao_details_order_by!]

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): dao_details_aggregate!

  """fetch data from the table: "dao_details" using primary key columns"""
  dao_details_by_pk(dao_id: bigint!): dao_details

  """
  fetch data from the table in a streaming manner: "dao_details"
  """
  dao_details_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [dao_details_stream_cursor_input]!

    """filter the rows returned"""
    where: dao_details_bool_exp
  ): [dao_details!]!

  """An array relationship"""
  daos(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """An aggregate relationship"""
  daos_aggregate(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): daos_aggregate!

  """fetch data from the table: "daos" using primary key columns"""
  daos_by_pk(dao_acct: String!): daos

  """
  fetch data from the table in a streaming manner: "daos"
  """
  daos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [daos_stream_cursor_input]!

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """An array relationship"""
  indexer_account_dependencies(
    """distinct select on columns"""
    distinct_on: [indexer_account_dependencies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_account_dependencies_order_by!]

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): [indexer_account_dependencies!]!

  """An aggregate relationship"""
  indexer_account_dependencies_aggregate(
    """distinct select on columns"""
    distinct_on: [indexer_account_dependencies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_account_dependencies_order_by!]

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): indexer_account_dependencies_aggregate!

  """
  fetch data from the table: "indexer_account_dependencies" using primary key columns
  """
  indexer_account_dependencies_by_pk(acct: String!, name: String!): indexer_account_dependencies

  """
  fetch data from the table in a streaming manner: "indexer_account_dependencies"
  """
  indexer_account_dependencies_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [indexer_account_dependencies_stream_cursor_input]!

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): [indexer_account_dependencies!]!

  """
  fetch data from the table: "indexers"
  """
  indexers(
    """distinct select on columns"""
    distinct_on: [indexers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexers_order_by!]

    """filter the rows returned"""
    where: indexers_bool_exp
  ): [indexers!]!

  """
  fetch aggregated fields from the table: "indexers"
  """
  indexers_aggregate(
    """distinct select on columns"""
    distinct_on: [indexers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexers_order_by!]

    """filter the rows returned"""
    where: indexers_bool_exp
  ): indexers_aggregate!

  """fetch data from the table: "indexers" using primary key columns"""
  indexers_by_pk(name: String!): indexers

  """
  fetch data from the table in a streaming manner: "indexers"
  """
  indexers_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [indexers_stream_cursor_input]!

    """filter the rows returned"""
    where: indexers_bool_exp
  ): [indexers!]!

  """An array relationship"""
  makes(
    """distinct select on columns"""
    distinct_on: [makes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [makes_order_by!]

    """filter the rows returned"""
    where: makes_bool_exp
  ): [makes!]!

  """An aggregate relationship"""
  makes_aggregate(
    """distinct select on columns"""
    distinct_on: [makes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [makes_order_by!]

    """filter the rows returned"""
    where: makes_bool_exp
  ): makes_aggregate!

  """fetch data from the table: "makes" using primary key columns"""
  makes_by_pk(order_tx_sig: String!): makes

  """
  fetch data from the table in a streaming manner: "makes"
  """
  makes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [makes_stream_cursor_input]!

    """filter the rows returned"""
    where: makes_bool_exp
  ): [makes!]!

  """An array relationship"""
  markets(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """An aggregate relationship"""
  markets_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!

  """fetch data from the table: "markets" using primary key columns"""
  markets_by_pk(market_acct: String!): markets

  """
  fetch data from the table in a streaming manner: "markets"
  """
  markets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [markets_stream_cursor_input]!

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """An array relationship"""
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """An aggregate relationship"""
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): orders_aggregate!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(order_tx_sig: String!): orders

  """
  fetch data from the table in a streaming manner: "orders"
  """
  orders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [orders_stream_cursor_input]!

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """An array relationship"""
  prices(
    """distinct select on columns"""
    distinct_on: [prices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_order_by!]

    """filter the rows returned"""
    where: prices_bool_exp
  ): [prices!]!

  """An aggregate relationship"""
  prices_aggregate(
    """distinct select on columns"""
    distinct_on: [prices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_order_by!]

    """filter the rows returned"""
    where: prices_bool_exp
  ): prices_aggregate!

  """fetch data from the table: "prices" using primary key columns"""
  prices_by_pk(created_at: timestamptz!, market_acct: String!): prices

  """
  fetch data from the table: "prices_chart_data"
  """
  prices_chart_data(
    """distinct select on columns"""
    distinct_on: [prices_chart_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_chart_data_order_by!]

    """filter the rows returned"""
    where: prices_chart_data_bool_exp
  ): [prices_chart_data!]!

  """
  fetch aggregated fields from the table: "prices_chart_data"
  """
  prices_chart_data_aggregate(
    """distinct select on columns"""
    distinct_on: [prices_chart_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prices_chart_data_order_by!]

    """filter the rows returned"""
    where: prices_chart_data_bool_exp
  ): prices_chart_data_aggregate!

  """
  fetch data from the table in a streaming manner: "prices_chart_data"
  """
  prices_chart_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [prices_chart_data_stream_cursor_input]!

    """filter the rows returned"""
    where: prices_chart_data_bool_exp
  ): [prices_chart_data!]!

  """
  fetch data from the table in a streaming manner: "prices"
  """
  prices_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [prices_stream_cursor_input]!

    """filter the rows returned"""
    where: prices_bool_exp
  ): [prices!]!

  """
  fetch data from the table: "program_system"
  """
  program_system(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): [program_system!]!

  """
  fetch aggregated fields from the table: "program_system"
  """
  program_system_aggregate(
    """distinct select on columns"""
    distinct_on: [program_system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_system_order_by!]

    """filter the rows returned"""
    where: program_system_bool_exp
  ): program_system_aggregate!

  """fetch data from the table: "program_system" using primary key columns"""
  program_system_by_pk(system_version: float8!): program_system

  """
  fetch data from the table in a streaming manner: "program_system"
  """
  program_system_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [program_system_stream_cursor_input]!

    """filter the rows returned"""
    where: program_system_bool_exp
  ): [program_system!]!

  """
  fetch data from the table: "programs"
  """
  programs(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """
  fetch aggregated fields from the table: "programs"
  """
  programs_aggregate(
    """distinct select on columns"""
    distinct_on: [programs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [programs_order_by!]

    """filter the rows returned"""
    where: programs_bool_exp
  ): programs_aggregate!

  """fetch data from the table: "programs" using primary key columns"""
  programs_by_pk(program_acct: String!): programs

  """
  fetch data from the table in a streaming manner: "programs"
  """
  programs_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [programs_stream_cursor_input]!

    """filter the rows returned"""
    where: programs_bool_exp
  ): [programs!]!

  """
  fetch data from the table: "proposal_bars"
  """
  proposal_bars(
    """distinct select on columns"""
    distinct_on: [proposal_bars_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_bars_order_by!]

    """filter the rows returned"""
    where: proposal_bars_bool_exp
  ): [proposal_bars!]!

  """
  fetch aggregated fields from the table: "proposal_bars"
  """
  proposal_bars_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_bars_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_bars_order_by!]

    """filter the rows returned"""
    where: proposal_bars_bool_exp
  ): proposal_bars_aggregate!

  """fetch data from the table: "proposal_bars" using primary key columns"""
  proposal_bars_by_pk(bar_size: interval!, bar_start_time: timestamptz!, proposal_acct: String!): proposal_bars

  """
  fetch data from the table in a streaming manner: "proposal_bars"
  """
  proposal_bars_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [proposal_bars_stream_cursor_input]!

    """filter the rows returned"""
    where: proposal_bars_bool_exp
  ): [proposal_bars!]!

  """An array relationship"""
  proposal_details(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): [proposal_details!]!

  """An aggregate relationship"""
  proposal_details_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_details_order_by!]

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): proposal_details_aggregate!

  """
  fetch data from the table: "proposal_details" using primary key columns
  """
  proposal_details_by_pk(proposal_id: bigint!): proposal_details

  """
  fetch data from the table in a streaming manner: "proposal_details"
  """
  proposal_details_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [proposal_details_stream_cursor_input]!

    """filter the rows returned"""
    where: proposal_details_bool_exp
  ): [proposal_details!]!

  """
  fetch data from the table: "proposal_total_trade_volume"
  """
  proposal_total_trade_volume(
    """distinct select on columns"""
    distinct_on: [proposal_total_trade_volume_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_total_trade_volume_order_by!]

    """filter the rows returned"""
    where: proposal_total_trade_volume_bool_exp
  ): [proposal_total_trade_volume!]!

  """
  fetch aggregated fields from the table: "proposal_total_trade_volume"
  """
  proposal_total_trade_volume_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_total_trade_volume_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_total_trade_volume_order_by!]

    """filter the rows returned"""
    where: proposal_total_trade_volume_bool_exp
  ): proposal_total_trade_volume_aggregate!

  """
  fetch data from the table in a streaming manner: "proposal_total_trade_volume"
  """
  proposal_total_trade_volume_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [proposal_total_trade_volume_stream_cursor_input]!

    """filter the rows returned"""
    where: proposal_total_trade_volume_bool_exp
  ): [proposal_total_trade_volume!]!

  """An array relationship"""
  proposals(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """An aggregate relationship"""
  proposals_aggregate(
    """distinct select on columns"""
    distinct_on: [proposals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposals_order_by!]

    """filter the rows returned"""
    where: proposals_bool_exp
  ): proposals_aggregate!

  """fetch data from the table: "proposals" using primary key columns"""
  proposals_by_pk(proposal_acct: String!): proposals

  """
  fetch data from the table in a streaming manner: "proposals"
  """
  proposals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [proposals_stream_cursor_input]!

    """filter the rows returned"""
    where: proposals_bool_exp
  ): [proposals!]!

  """An array relationship"""
  reactions(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """An aggregate relationship"""
  reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!

  """fetch data from the table: "reactions" using primary key columns"""
  reactions_by_pk(proposal_acct: String!, reaction: String!, reactor_acct: String!): reactions

  """
  fetch data from the table in a streaming manner: "reactions"
  """
  reactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [reactions_stream_cursor_input]!

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """An aggregate relationship"""
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!

  """fetch data from the table: "sessions" using primary key columns"""
  sessions_by_pk(id: uuid!): sessions

  """
  fetch data from the table in a streaming manner: "sessions"
  """
  sessions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [sessions_stream_cursor_input]!

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """An array relationship"""
  takes(
    """distinct select on columns"""
    distinct_on: [takes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [takes_order_by!]

    """filter the rows returned"""
    where: takes_bool_exp
  ): [takes!]!

  """An aggregate relationship"""
  takes_aggregate(
    """distinct select on columns"""
    distinct_on: [takes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [takes_order_by!]

    """filter the rows returned"""
    where: takes_bool_exp
  ): takes_aggregate!

  """fetch data from the table: "takes" using primary key columns"""
  takes_by_pk(order_tx_sig: String!): takes

  """
  fetch data from the table in a streaming manner: "takes"
  """
  takes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [takes_stream_cursor_input]!

    """filter the rows returned"""
    where: takes_bool_exp
  ): [takes!]!

  """An array relationship"""
  token_acct_balances(
    """distinct select on columns"""
    distinct_on: [token_acct_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_acct_balances_order_by!]

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): [token_acct_balances!]!

  """An aggregate relationship"""
  token_acct_balances_aggregate(
    """distinct select on columns"""
    distinct_on: [token_acct_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_acct_balances_order_by!]

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): token_acct_balances_aggregate!

  """
  fetch data from the table: "token_acct_balances" using primary key columns
  """
  token_acct_balances_by_pk(amount: bigint!, created_at: timestamptz!, mint_acct: String!, token_acct: String!): token_acct_balances

  """
  fetch data from the table in a streaming manner: "token_acct_balances"
  """
  token_acct_balances_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_acct_balances_stream_cursor_input]!

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): [token_acct_balances!]!

  """An array relationship"""
  token_accts(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): [token_accts!]!

  """An aggregate relationship"""
  token_accts_aggregate(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): token_accts_aggregate!

  """fetch data from the table: "token_accts" using primary key columns"""
  token_accts_by_pk(token_acct: String!): token_accts

  """
  fetch data from the table in a streaming manner: "token_accts"
  """
  token_accts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [token_accts_stream_cursor_input]!

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): [token_accts!]!

  """
  fetch data from the table: "tokens"
  """
  tokens(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """
  fetch aggregated fields from the table: "tokens"
  """
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tokens_order_by!]

    """filter the rows returned"""
    where: tokens_bool_exp
  ): tokens_aggregate!

  """fetch data from the table: "tokens" using primary key columns"""
  tokens_by_pk(mint_acct: String!): tokens

  """
  fetch data from the table in a streaming manner: "tokens"
  """
  tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tokens_stream_cursor_input]!

    """filter the rows returned"""
    where: tokens_bool_exp
  ): [tokens!]!

  """An array relationship"""
  transaction_watcher_transactions(
    """distinct select on columns"""
    distinct_on: [transaction_watcher_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watcher_transactions_order_by!]

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): [transaction_watcher_transactions!]!

  """An aggregate relationship"""
  transaction_watcher_transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_watcher_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watcher_transactions_order_by!]

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): transaction_watcher_transactions_aggregate!

  """
  fetch data from the table: "transaction_watcher_transactions" using primary key columns
  """
  transaction_watcher_transactions_by_pk(tx_sig: String!, watcher_acct: String!): transaction_watcher_transactions

  """
  fetch data from the table in a streaming manner: "transaction_watcher_transactions"
  """
  transaction_watcher_transactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [transaction_watcher_transactions_stream_cursor_input]!

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): [transaction_watcher_transactions!]!

  """An array relationship"""
  transaction_watchers(
    """distinct select on columns"""
    distinct_on: [transaction_watchers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watchers_order_by!]

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): [transaction_watchers!]!

  """An aggregate relationship"""
  transaction_watchers_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_watchers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watchers_order_by!]

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): transaction_watchers_aggregate!

  """
  fetch data from the table: "transaction_watchers" using primary key columns
  """
  transaction_watchers_by_pk(acct: String!): transaction_watchers

  """
  fetch data from the table in a streaming manner: "transaction_watchers"
  """
  transaction_watchers_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [transaction_watchers_stream_cursor_input]!

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): [transaction_watchers!]!

  """
  fetch data from the table: "transactions"
  """
  transactions(
    """distinct select on columns"""
    distinct_on: [transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transactions_order_by!]

    """filter the rows returned"""
    where: transactions_bool_exp
  ): [transactions!]!

  """
  fetch aggregated fields from the table: "transactions"
  """
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transactions_order_by!]

    """filter the rows returned"""
    where: transactions_bool_exp
  ): transactions_aggregate!

  """fetch data from the table: "transactions" using primary key columns"""
  transactions_by_pk(tx_sig: String!): transactions

  """
  fetch data from the table in a streaming manner: "transactions"
  """
  transactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [transactions_stream_cursor_input]!

    """filter the rows returned"""
    where: transactions_bool_exp
  ): [transactions!]!

  """
  fetch data from the table: "twap_chart_data"
  """
  twap_chart_data(
    """distinct select on columns"""
    distinct_on: [twap_chart_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twap_chart_data_order_by!]

    """filter the rows returned"""
    where: twap_chart_data_bool_exp
  ): [twap_chart_data!]!

  """
  fetch aggregated fields from the table: "twap_chart_data"
  """
  twap_chart_data_aggregate(
    """distinct select on columns"""
    distinct_on: [twap_chart_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twap_chart_data_order_by!]

    """filter the rows returned"""
    where: twap_chart_data_bool_exp
  ): twap_chart_data_aggregate!

  """
  fetch data from the table in a streaming manner: "twap_chart_data"
  """
  twap_chart_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [twap_chart_data_stream_cursor_input]!

    """filter the rows returned"""
    where: twap_chart_data_bool_exp
  ): [twap_chart_data!]!

  """An array relationship"""
  twaps(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): [twaps!]!

  """An aggregate relationship"""
  twaps_aggregate(
    """distinct select on columns"""
    distinct_on: [twaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [twaps_order_by!]

    """filter the rows returned"""
    where: twaps_bool_exp
  ): twaps_aggregate!

  """fetch data from the table: "twaps" using primary key columns"""
  twaps_by_pk(market_acct: String!, updated_slot: bigint!): twaps

  """
  fetch data from the table in a streaming manner: "twaps"
  """
  twaps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [twaps_stream_cursor_input]!

    """filter the rows returned"""
    where: twaps_bool_exp
  ): [twaps!]!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(user_acct: String!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

"""
columns and relationships of "takes"
"""
type takes {
  base_amount: bigint!

  """An object relationship"""
  make: makes
  maker_base_fee: bigint
  maker_order_tx_sig: String
  maker_quote_fee: bigint

  """An object relationship"""
  market: markets!
  market_acct: String!

  """An object relationship"""
  order: orders!
  order_block: bigint!
  order_time: timestamptz!
  order_tx_sig: String!
  quote_price: numeric!
  taker_base_fee: bigint!
  taker_quote_fee: bigint!
}

"""
aggregated selection of "takes"
"""
type takes_aggregate {
  aggregate: takes_aggregate_fields
  nodes: [takes!]!
}

input takes_aggregate_bool_exp {
  count: takes_aggregate_bool_exp_count
}

input takes_aggregate_bool_exp_count {
  arguments: [takes_select_column!]
  distinct: Boolean
  filter: takes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "takes"
"""
type takes_aggregate_fields {
  avg: takes_avg_fields
  count(columns: [takes_select_column!], distinct: Boolean): Int!
  max: takes_max_fields
  min: takes_min_fields
  stddev: takes_stddev_fields
  stddev_pop: takes_stddev_pop_fields
  stddev_samp: takes_stddev_samp_fields
  sum: takes_sum_fields
  var_pop: takes_var_pop_fields
  var_samp: takes_var_samp_fields
  variance: takes_variance_fields
}

"""
order by aggregate values of table "takes"
"""
input takes_aggregate_order_by {
  avg: takes_avg_order_by
  count: order_by
  max: takes_max_order_by
  min: takes_min_order_by
  stddev: takes_stddev_order_by
  stddev_pop: takes_stddev_pop_order_by
  stddev_samp: takes_stddev_samp_order_by
  sum: takes_sum_order_by
  var_pop: takes_var_pop_order_by
  var_samp: takes_var_samp_order_by
  variance: takes_variance_order_by
}

"""
input type for inserting array relation for remote table "takes"
"""
input takes_arr_rel_insert_input {
  data: [takes_insert_input!]!

  """upsert condition"""
  on_conflict: takes_on_conflict
}

"""aggregate avg on columns"""
type takes_avg_fields {
  base_amount: Float
  maker_base_fee: Float
  maker_quote_fee: Float
  order_block: Float
  quote_price: Float
  taker_base_fee: Float
  taker_quote_fee: Float
}

"""
order by avg() on columns of table "takes"
"""
input takes_avg_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_quote_fee: order_by
  order_block: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""
Boolean expression to filter rows from the table "takes". All fields are combined with a logical 'AND'.
"""
input takes_bool_exp {
  _and: [takes_bool_exp!]
  _not: takes_bool_exp
  _or: [takes_bool_exp!]
  base_amount: bigint_comparison_exp
  make: makes_bool_exp
  maker_base_fee: bigint_comparison_exp
  maker_order_tx_sig: String_comparison_exp
  maker_quote_fee: bigint_comparison_exp
  market: markets_bool_exp
  market_acct: String_comparison_exp
  order: orders_bool_exp
  order_block: bigint_comparison_exp
  order_time: timestamptz_comparison_exp
  order_tx_sig: String_comparison_exp
  quote_price: numeric_comparison_exp
  taker_base_fee: bigint_comparison_exp
  taker_quote_fee: bigint_comparison_exp
}

"""
unique or primary key constraints on table "takes"
"""
enum takes_constraint {
  """
  unique or primary key constraint on columns "order_tx_sig"
  """
  takes_pkey
}

"""
input type for incrementing numeric columns in table "takes"
"""
input takes_inc_input {
  base_amount: bigint
  maker_base_fee: bigint
  maker_quote_fee: bigint
  order_block: bigint
  quote_price: numeric
  taker_base_fee: bigint
  taker_quote_fee: bigint
}

"""
input type for inserting data into table "takes"
"""
input takes_insert_input {
  base_amount: bigint
  make: makes_obj_rel_insert_input
  maker_base_fee: bigint
  maker_order_tx_sig: String
  maker_quote_fee: bigint
  market: markets_obj_rel_insert_input
  market_acct: String
  order: orders_obj_rel_insert_input
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  taker_base_fee: bigint
  taker_quote_fee: bigint
}

"""aggregate max on columns"""
type takes_max_fields {
  base_amount: bigint
  maker_base_fee: bigint
  maker_order_tx_sig: String
  maker_quote_fee: bigint
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  taker_base_fee: bigint
  taker_quote_fee: bigint
}

"""
order by max() on columns of table "takes"
"""
input takes_max_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_order_tx_sig: order_by
  maker_quote_fee: order_by
  market_acct: order_by
  order_block: order_by
  order_time: order_by
  order_tx_sig: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""aggregate min on columns"""
type takes_min_fields {
  base_amount: bigint
  maker_base_fee: bigint
  maker_order_tx_sig: String
  maker_quote_fee: bigint
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  taker_base_fee: bigint
  taker_quote_fee: bigint
}

"""
order by min() on columns of table "takes"
"""
input takes_min_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_order_tx_sig: order_by
  maker_quote_fee: order_by
  market_acct: order_by
  order_block: order_by
  order_time: order_by
  order_tx_sig: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""
response of any mutation on the table "takes"
"""
type takes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [takes!]!
}

"""
input type for inserting object relation for remote table "takes"
"""
input takes_obj_rel_insert_input {
  data: takes_insert_input!

  """upsert condition"""
  on_conflict: takes_on_conflict
}

"""
on_conflict condition type for table "takes"
"""
input takes_on_conflict {
  constraint: takes_constraint!
  update_columns: [takes_update_column!]! = []
  where: takes_bool_exp
}

"""Ordering options when selecting data from "takes"."""
input takes_order_by {
  base_amount: order_by
  make: makes_order_by
  maker_base_fee: order_by
  maker_order_tx_sig: order_by
  maker_quote_fee: order_by
  market: markets_order_by
  market_acct: order_by
  order: orders_order_by
  order_block: order_by
  order_time: order_by
  order_tx_sig: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""primary key columns input for table: takes"""
input takes_pk_columns_input {
  order_tx_sig: String!
}

"""
select columns of table "takes"
"""
enum takes_select_column {
  """column name"""
  base_amount

  """column name"""
  maker_base_fee

  """column name"""
  maker_order_tx_sig

  """column name"""
  maker_quote_fee

  """column name"""
  market_acct

  """column name"""
  order_block

  """column name"""
  order_time

  """column name"""
  order_tx_sig

  """column name"""
  quote_price

  """column name"""
  taker_base_fee

  """column name"""
  taker_quote_fee
}

"""
input type for updating data in table "takes"
"""
input takes_set_input {
  base_amount: bigint
  maker_base_fee: bigint
  maker_order_tx_sig: String
  maker_quote_fee: bigint
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  taker_base_fee: bigint
  taker_quote_fee: bigint
}

"""aggregate stddev on columns"""
type takes_stddev_fields {
  base_amount: Float
  maker_base_fee: Float
  maker_quote_fee: Float
  order_block: Float
  quote_price: Float
  taker_base_fee: Float
  taker_quote_fee: Float
}

"""
order by stddev() on columns of table "takes"
"""
input takes_stddev_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_quote_fee: order_by
  order_block: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""aggregate stddev_pop on columns"""
type takes_stddev_pop_fields {
  base_amount: Float
  maker_base_fee: Float
  maker_quote_fee: Float
  order_block: Float
  quote_price: Float
  taker_base_fee: Float
  taker_quote_fee: Float
}

"""
order by stddev_pop() on columns of table "takes"
"""
input takes_stddev_pop_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_quote_fee: order_by
  order_block: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""aggregate stddev_samp on columns"""
type takes_stddev_samp_fields {
  base_amount: Float
  maker_base_fee: Float
  maker_quote_fee: Float
  order_block: Float
  quote_price: Float
  taker_base_fee: Float
  taker_quote_fee: Float
}

"""
order by stddev_samp() on columns of table "takes"
"""
input takes_stddev_samp_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_quote_fee: order_by
  order_block: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""
Streaming cursor of the table "takes"
"""
input takes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: takes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input takes_stream_cursor_value_input {
  base_amount: bigint
  maker_base_fee: bigint
  maker_order_tx_sig: String
  maker_quote_fee: bigint
  market_acct: String
  order_block: bigint
  order_time: timestamptz
  order_tx_sig: String
  quote_price: numeric
  taker_base_fee: bigint
  taker_quote_fee: bigint
}

"""aggregate sum on columns"""
type takes_sum_fields {
  base_amount: bigint
  maker_base_fee: bigint
  maker_quote_fee: bigint
  order_block: bigint
  quote_price: numeric
  taker_base_fee: bigint
  taker_quote_fee: bigint
}

"""
order by sum() on columns of table "takes"
"""
input takes_sum_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_quote_fee: order_by
  order_block: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""
update columns of table "takes"
"""
enum takes_update_column {
  """column name"""
  base_amount

  """column name"""
  maker_base_fee

  """column name"""
  maker_order_tx_sig

  """column name"""
  maker_quote_fee

  """column name"""
  market_acct

  """column name"""
  order_block

  """column name"""
  order_time

  """column name"""
  order_tx_sig

  """column name"""
  quote_price

  """column name"""
  taker_base_fee

  """column name"""
  taker_quote_fee
}

input takes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: takes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: takes_set_input

  """filter the rows which have to be updated"""
  where: takes_bool_exp!
}

"""aggregate var_pop on columns"""
type takes_var_pop_fields {
  base_amount: Float
  maker_base_fee: Float
  maker_quote_fee: Float
  order_block: Float
  quote_price: Float
  taker_base_fee: Float
  taker_quote_fee: Float
}

"""
order by var_pop() on columns of table "takes"
"""
input takes_var_pop_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_quote_fee: order_by
  order_block: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""aggregate var_samp on columns"""
type takes_var_samp_fields {
  base_amount: Float
  maker_base_fee: Float
  maker_quote_fee: Float
  order_block: Float
  quote_price: Float
  taker_base_fee: Float
  taker_quote_fee: Float
}

"""
order by var_samp() on columns of table "takes"
"""
input takes_var_samp_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_quote_fee: order_by
  order_block: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

"""aggregate variance on columns"""
type takes_variance_fields {
  base_amount: Float
  maker_base_fee: Float
  maker_quote_fee: Float
  order_block: Float
  quote_price: Float
  taker_base_fee: Float
  taker_quote_fee: Float
}

"""
order by variance() on columns of table "takes"
"""
input takes_variance_order_by {
  base_amount: order_by
  maker_base_fee: order_by
  maker_quote_fee: order_by
  order_block: order_by
  quote_price: order_by
  taker_base_fee: order_by
  taker_quote_fee: order_by
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "token_acct_balances"
"""
type token_acct_balances {
  amount: bigint!
  created_at: timestamptz!
  delta: bigint!
  mint_acct: String!
  owner_acct: String!
  slot: bigint

  """An object relationship"""
  token: tokens!

  """An object relationship"""
  tokenAcctByTokenAcct: token_accts!
  token_acct: String!
  tx_sig: String
}

"""
aggregated selection of "token_acct_balances"
"""
type token_acct_balances_aggregate {
  aggregate: token_acct_balances_aggregate_fields
  nodes: [token_acct_balances!]!
}

input token_acct_balances_aggregate_bool_exp {
  count: token_acct_balances_aggregate_bool_exp_count
}

input token_acct_balances_aggregate_bool_exp_count {
  arguments: [token_acct_balances_select_column!]
  distinct: Boolean
  filter: token_acct_balances_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "token_acct_balances"
"""
type token_acct_balances_aggregate_fields {
  avg: token_acct_balances_avg_fields
  count(columns: [token_acct_balances_select_column!], distinct: Boolean): Int!
  max: token_acct_balances_max_fields
  min: token_acct_balances_min_fields
  stddev: token_acct_balances_stddev_fields
  stddev_pop: token_acct_balances_stddev_pop_fields
  stddev_samp: token_acct_balances_stddev_samp_fields
  sum: token_acct_balances_sum_fields
  var_pop: token_acct_balances_var_pop_fields
  var_samp: token_acct_balances_var_samp_fields
  variance: token_acct_balances_variance_fields
}

"""
order by aggregate values of table "token_acct_balances"
"""
input token_acct_balances_aggregate_order_by {
  avg: token_acct_balances_avg_order_by
  count: order_by
  max: token_acct_balances_max_order_by
  min: token_acct_balances_min_order_by
  stddev: token_acct_balances_stddev_order_by
  stddev_pop: token_acct_balances_stddev_pop_order_by
  stddev_samp: token_acct_balances_stddev_samp_order_by
  sum: token_acct_balances_sum_order_by
  var_pop: token_acct_balances_var_pop_order_by
  var_samp: token_acct_balances_var_samp_order_by
  variance: token_acct_balances_variance_order_by
}

"""
input type for inserting array relation for remote table "token_acct_balances"
"""
input token_acct_balances_arr_rel_insert_input {
  data: [token_acct_balances_insert_input!]!

  """upsert condition"""
  on_conflict: token_acct_balances_on_conflict
}

"""aggregate avg on columns"""
type token_acct_balances_avg_fields {
  amount: Float
  delta: Float
  slot: Float
}

"""
order by avg() on columns of table "token_acct_balances"
"""
input token_acct_balances_avg_order_by {
  amount: order_by
  delta: order_by
  slot: order_by
}

"""
Boolean expression to filter rows from the table "token_acct_balances". All fields are combined with a logical 'AND'.
"""
input token_acct_balances_bool_exp {
  _and: [token_acct_balances_bool_exp!]
  _not: token_acct_balances_bool_exp
  _or: [token_acct_balances_bool_exp!]
  amount: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  delta: bigint_comparison_exp
  mint_acct: String_comparison_exp
  owner_acct: String_comparison_exp
  slot: bigint_comparison_exp
  token: tokens_bool_exp
  tokenAcctByTokenAcct: token_accts_bool_exp
  token_acct: String_comparison_exp
  tx_sig: String_comparison_exp
}

"""
unique or primary key constraints on table "token_acct_balances"
"""
enum token_acct_balances_constraint {
  """
  unique or primary key constraint on columns "mint_acct", "created_at", "amount", "token_acct"
  """
  token_acct_balances_token_acct_mint_acct_amount_created_at_pk
}

"""
input type for incrementing numeric columns in table "token_acct_balances"
"""
input token_acct_balances_inc_input {
  amount: bigint
  delta: bigint
  slot: bigint
}

"""
input type for inserting data into table "token_acct_balances"
"""
input token_acct_balances_insert_input {
  amount: bigint
  created_at: timestamptz
  delta: bigint
  mint_acct: String
  owner_acct: String
  slot: bigint
  token: tokens_obj_rel_insert_input
  tokenAcctByTokenAcct: token_accts_obj_rel_insert_input
  token_acct: String
  tx_sig: String
}

"""aggregate max on columns"""
type token_acct_balances_max_fields {
  amount: bigint
  created_at: timestamptz
  delta: bigint
  mint_acct: String
  owner_acct: String
  slot: bigint
  token_acct: String
  tx_sig: String
}

"""
order by max() on columns of table "token_acct_balances"
"""
input token_acct_balances_max_order_by {
  amount: order_by
  created_at: order_by
  delta: order_by
  mint_acct: order_by
  owner_acct: order_by
  slot: order_by
  token_acct: order_by
  tx_sig: order_by
}

"""aggregate min on columns"""
type token_acct_balances_min_fields {
  amount: bigint
  created_at: timestamptz
  delta: bigint
  mint_acct: String
  owner_acct: String
  slot: bigint
  token_acct: String
  tx_sig: String
}

"""
order by min() on columns of table "token_acct_balances"
"""
input token_acct_balances_min_order_by {
  amount: order_by
  created_at: order_by
  delta: order_by
  mint_acct: order_by
  owner_acct: order_by
  slot: order_by
  token_acct: order_by
  tx_sig: order_by
}

"""
response of any mutation on the table "token_acct_balances"
"""
type token_acct_balances_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_acct_balances!]!
}

"""
on_conflict condition type for table "token_acct_balances"
"""
input token_acct_balances_on_conflict {
  constraint: token_acct_balances_constraint!
  update_columns: [token_acct_balances_update_column!]! = []
  where: token_acct_balances_bool_exp
}

"""Ordering options when selecting data from "token_acct_balances"."""
input token_acct_balances_order_by {
  amount: order_by
  created_at: order_by
  delta: order_by
  mint_acct: order_by
  owner_acct: order_by
  slot: order_by
  token: tokens_order_by
  tokenAcctByTokenAcct: token_accts_order_by
  token_acct: order_by
  tx_sig: order_by
}

"""primary key columns input for table: token_acct_balances"""
input token_acct_balances_pk_columns_input {
  amount: bigint!
  created_at: timestamptz!
  mint_acct: String!
  token_acct: String!
}

"""
select columns of table "token_acct_balances"
"""
enum token_acct_balances_select_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  delta

  """column name"""
  mint_acct

  """column name"""
  owner_acct

  """column name"""
  slot

  """column name"""
  token_acct

  """column name"""
  tx_sig
}

"""
input type for updating data in table "token_acct_balances"
"""
input token_acct_balances_set_input {
  amount: bigint
  created_at: timestamptz
  delta: bigint
  mint_acct: String
  owner_acct: String
  slot: bigint
  token_acct: String
  tx_sig: String
}

"""aggregate stddev on columns"""
type token_acct_balances_stddev_fields {
  amount: Float
  delta: Float
  slot: Float
}

"""
order by stddev() on columns of table "token_acct_balances"
"""
input token_acct_balances_stddev_order_by {
  amount: order_by
  delta: order_by
  slot: order_by
}

"""aggregate stddev_pop on columns"""
type token_acct_balances_stddev_pop_fields {
  amount: Float
  delta: Float
  slot: Float
}

"""
order by stddev_pop() on columns of table "token_acct_balances"
"""
input token_acct_balances_stddev_pop_order_by {
  amount: order_by
  delta: order_by
  slot: order_by
}

"""aggregate stddev_samp on columns"""
type token_acct_balances_stddev_samp_fields {
  amount: Float
  delta: Float
  slot: Float
}

"""
order by stddev_samp() on columns of table "token_acct_balances"
"""
input token_acct_balances_stddev_samp_order_by {
  amount: order_by
  delta: order_by
  slot: order_by
}

"""
Streaming cursor of the table "token_acct_balances"
"""
input token_acct_balances_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_acct_balances_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_acct_balances_stream_cursor_value_input {
  amount: bigint
  created_at: timestamptz
  delta: bigint
  mint_acct: String
  owner_acct: String
  slot: bigint
  token_acct: String
  tx_sig: String
}

"""aggregate sum on columns"""
type token_acct_balances_sum_fields {
  amount: bigint
  delta: bigint
  slot: bigint
}

"""
order by sum() on columns of table "token_acct_balances"
"""
input token_acct_balances_sum_order_by {
  amount: order_by
  delta: order_by
  slot: order_by
}

"""
update columns of table "token_acct_balances"
"""
enum token_acct_balances_update_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  delta

  """column name"""
  mint_acct

  """column name"""
  owner_acct

  """column name"""
  slot

  """column name"""
  token_acct

  """column name"""
  tx_sig
}

input token_acct_balances_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_acct_balances_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_acct_balances_set_input

  """filter the rows which have to be updated"""
  where: token_acct_balances_bool_exp!
}

"""aggregate var_pop on columns"""
type token_acct_balances_var_pop_fields {
  amount: Float
  delta: Float
  slot: Float
}

"""
order by var_pop() on columns of table "token_acct_balances"
"""
input token_acct_balances_var_pop_order_by {
  amount: order_by
  delta: order_by
  slot: order_by
}

"""aggregate var_samp on columns"""
type token_acct_balances_var_samp_fields {
  amount: Float
  delta: Float
  slot: Float
}

"""
order by var_samp() on columns of table "token_acct_balances"
"""
input token_acct_balances_var_samp_order_by {
  amount: order_by
  delta: order_by
  slot: order_by
}

"""aggregate variance on columns"""
type token_acct_balances_variance_fields {
  amount: Float
  delta: Float
  slot: Float
}

"""
order by variance() on columns of table "token_acct_balances"
"""
input token_acct_balances_variance_order_by {
  amount: order_by
  delta: order_by
  slot: order_by
}

scalar token_acct_status

"""
Boolean expression to compare columns of type "token_acct_status". All fields are combined with logical 'AND'.
"""
input token_acct_status_comparison_exp {
  _eq: token_acct_status
  _gt: token_acct_status
  _gte: token_acct_status
  _in: [token_acct_status!]
  _is_null: Boolean
  _lt: token_acct_status
  _lte: token_acct_status
  _neq: token_acct_status
  _nin: [token_acct_status!]
}

"""
columns and relationships of "token_accts"
"""
type token_accts {
  amount: bigint!

  """An array relationship"""
  markets(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """An array relationship"""
  marketsByBidsTokenAcct(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """An aggregate relationship"""
  marketsByBidsTokenAcct_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!

  """An aggregate relationship"""
  markets_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!
  mint_acct: String!
  owner_acct: String!
  status: token_acct_status

  """An object relationship"""
  token: tokens!
  token_acct: String!

  """An array relationship"""
  token_acct_balances(
    """distinct select on columns"""
    distinct_on: [token_acct_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_acct_balances_order_by!]

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): [token_acct_balances!]!

  """An aggregate relationship"""
  token_acct_balances_aggregate(
    """distinct select on columns"""
    distinct_on: [token_acct_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_acct_balances_order_by!]

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): token_acct_balances_aggregate!
  updated_at: timestamptz
}

"""
aggregated selection of "token_accts"
"""
type token_accts_aggregate {
  aggregate: token_accts_aggregate_fields
  nodes: [token_accts!]!
}

input token_accts_aggregate_bool_exp {
  count: token_accts_aggregate_bool_exp_count
}

input token_accts_aggregate_bool_exp_count {
  arguments: [token_accts_select_column!]
  distinct: Boolean
  filter: token_accts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "token_accts"
"""
type token_accts_aggregate_fields {
  avg: token_accts_avg_fields
  count(columns: [token_accts_select_column!], distinct: Boolean): Int!
  max: token_accts_max_fields
  min: token_accts_min_fields
  stddev: token_accts_stddev_fields
  stddev_pop: token_accts_stddev_pop_fields
  stddev_samp: token_accts_stddev_samp_fields
  sum: token_accts_sum_fields
  var_pop: token_accts_var_pop_fields
  var_samp: token_accts_var_samp_fields
  variance: token_accts_variance_fields
}

"""
order by aggregate values of table "token_accts"
"""
input token_accts_aggregate_order_by {
  avg: token_accts_avg_order_by
  count: order_by
  max: token_accts_max_order_by
  min: token_accts_min_order_by
  stddev: token_accts_stddev_order_by
  stddev_pop: token_accts_stddev_pop_order_by
  stddev_samp: token_accts_stddev_samp_order_by
  sum: token_accts_sum_order_by
  var_pop: token_accts_var_pop_order_by
  var_samp: token_accts_var_samp_order_by
  variance: token_accts_variance_order_by
}

"""
input type for inserting array relation for remote table "token_accts"
"""
input token_accts_arr_rel_insert_input {
  data: [token_accts_insert_input!]!

  """upsert condition"""
  on_conflict: token_accts_on_conflict
}

"""aggregate avg on columns"""
type token_accts_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "token_accts"
"""
input token_accts_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "token_accts". All fields are combined with a logical 'AND'.
"""
input token_accts_bool_exp {
  _and: [token_accts_bool_exp!]
  _not: token_accts_bool_exp
  _or: [token_accts_bool_exp!]
  amount: bigint_comparison_exp
  markets: markets_bool_exp
  marketsByBidsTokenAcct: markets_bool_exp
  marketsByBidsTokenAcct_aggregate: markets_aggregate_bool_exp
  markets_aggregate: markets_aggregate_bool_exp
  mint_acct: String_comparison_exp
  owner_acct: String_comparison_exp
  status: token_acct_status_comparison_exp
  token: tokens_bool_exp
  token_acct: String_comparison_exp
  token_acct_balances: token_acct_balances_bool_exp
  token_acct_balances_aggregate: token_acct_balances_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "token_accts"
"""
enum token_accts_constraint {
  """
  unique or primary key constraint on columns "token_acct"
  """
  token_accts_pkey
}

"""
input type for incrementing numeric columns in table "token_accts"
"""
input token_accts_inc_input {
  amount: bigint
}

"""
input type for inserting data into table "token_accts"
"""
input token_accts_insert_input {
  amount: bigint
  markets: markets_arr_rel_insert_input
  marketsByBidsTokenAcct: markets_arr_rel_insert_input
  mint_acct: String
  owner_acct: String
  status: token_acct_status
  token: tokens_obj_rel_insert_input
  token_acct: String
  token_acct_balances: token_acct_balances_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type token_accts_max_fields {
  amount: bigint
  mint_acct: String
  owner_acct: String
  status: token_acct_status
  token_acct: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "token_accts"
"""
input token_accts_max_order_by {
  amount: order_by
  mint_acct: order_by
  owner_acct: order_by
  status: order_by
  token_acct: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type token_accts_min_fields {
  amount: bigint
  mint_acct: String
  owner_acct: String
  status: token_acct_status
  token_acct: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "token_accts"
"""
input token_accts_min_order_by {
  amount: order_by
  mint_acct: order_by
  owner_acct: order_by
  status: order_by
  token_acct: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "token_accts"
"""
type token_accts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [token_accts!]!
}

"""
input type for inserting object relation for remote table "token_accts"
"""
input token_accts_obj_rel_insert_input {
  data: token_accts_insert_input!

  """upsert condition"""
  on_conflict: token_accts_on_conflict
}

"""
on_conflict condition type for table "token_accts"
"""
input token_accts_on_conflict {
  constraint: token_accts_constraint!
  update_columns: [token_accts_update_column!]! = []
  where: token_accts_bool_exp
}

"""Ordering options when selecting data from "token_accts"."""
input token_accts_order_by {
  amount: order_by
  marketsByBidsTokenAcct_aggregate: markets_aggregate_order_by
  markets_aggregate: markets_aggregate_order_by
  mint_acct: order_by
  owner_acct: order_by
  status: order_by
  token: tokens_order_by
  token_acct: order_by
  token_acct_balances_aggregate: token_acct_balances_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: token_accts"""
input token_accts_pk_columns_input {
  token_acct: String!
}

"""
select columns of table "token_accts"
"""
enum token_accts_select_column {
  """column name"""
  amount

  """column name"""
  mint_acct

  """column name"""
  owner_acct

  """column name"""
  status

  """column name"""
  token_acct

  """column name"""
  updated_at
}

"""
input type for updating data in table "token_accts"
"""
input token_accts_set_input {
  amount: bigint
  mint_acct: String
  owner_acct: String
  status: token_acct_status
  token_acct: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type token_accts_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "token_accts"
"""
input token_accts_stddev_order_by {
  amount: order_by
}

"""aggregate stddev_pop on columns"""
type token_accts_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "token_accts"
"""
input token_accts_stddev_pop_order_by {
  amount: order_by
}

"""aggregate stddev_samp on columns"""
type token_accts_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "token_accts"
"""
input token_accts_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "token_accts"
"""
input token_accts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: token_accts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input token_accts_stream_cursor_value_input {
  amount: bigint
  mint_acct: String
  owner_acct: String
  status: token_acct_status
  token_acct: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type token_accts_sum_fields {
  amount: bigint
}

"""
order by sum() on columns of table "token_accts"
"""
input token_accts_sum_order_by {
  amount: order_by
}

"""
update columns of table "token_accts"
"""
enum token_accts_update_column {
  """column name"""
  amount

  """column name"""
  mint_acct

  """column name"""
  owner_acct

  """column name"""
  status

  """column name"""
  token_acct

  """column name"""
  updated_at
}

input token_accts_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: token_accts_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: token_accts_set_input

  """filter the rows which have to be updated"""
  where: token_accts_bool_exp!
}

"""aggregate var_pop on columns"""
type token_accts_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "token_accts"
"""
input token_accts_var_pop_order_by {
  amount: order_by
}

"""aggregate var_samp on columns"""
type token_accts_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "token_accts"
"""
input token_accts_var_samp_order_by {
  amount: order_by
}

"""aggregate variance on columns"""
type token_accts_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "token_accts"
"""
input token_accts_variance_order_by {
  amount: order_by
}

"""
columns and relationships of "tokens"
"""
type tokens {
  """An array relationship"""
  conditional_vaults(
    """distinct select on columns"""
    distinct_on: [conditional_vaults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conditional_vaults_order_by!]

    """filter the rows returned"""
    where: conditional_vaults_bool_exp
  ): [conditional_vaults!]!

  """An aggregate relationship"""
  conditional_vaults_aggregate(
    """distinct select on columns"""
    distinct_on: [conditional_vaults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conditional_vaults_order_by!]

    """filter the rows returned"""
    where: conditional_vaults_bool_exp
  ): conditional_vaults_aggregate!

  """An array relationship"""
  daos(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """An array relationship"""
  daosByQuoteAcct(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): [daos!]!

  """An aggregate relationship"""
  daosByQuoteAcct_aggregate(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): daos_aggregate!

  """An aggregate relationship"""
  daos_aggregate(
    """distinct select on columns"""
    distinct_on: [daos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [daos_order_by!]

    """filter the rows returned"""
    where: daos_bool_exp
  ): daos_aggregate!
  decimals: smallint!
  image_url: String

  """An array relationship"""
  markets(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """An array relationship"""
  marketsByQuoteMintAcct(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): [markets!]!

  """An aggregate relationship"""
  marketsByQuoteMintAcct_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!

  """An aggregate relationship"""
  markets_aggregate(
    """distinct select on columns"""
    distinct_on: [markets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [markets_order_by!]

    """filter the rows returned"""
    where: markets_bool_exp
  ): markets_aggregate!
  mint_acct: String!
  name: String!
  supply: bigint!
  symbol: String!

  """An array relationship"""
  token_acct_balances(
    """distinct select on columns"""
    distinct_on: [token_acct_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_acct_balances_order_by!]

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): [token_acct_balances!]!

  """An aggregate relationship"""
  token_acct_balances_aggregate(
    """distinct select on columns"""
    distinct_on: [token_acct_balances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_acct_balances_order_by!]

    """filter the rows returned"""
    where: token_acct_balances_bool_exp
  ): token_acct_balances_aggregate!

  """An array relationship"""
  token_accts(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): [token_accts!]!

  """An aggregate relationship"""
  token_accts_aggregate(
    """distinct select on columns"""
    distinct_on: [token_accts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [token_accts_order_by!]

    """filter the rows returned"""
    where: token_accts_bool_exp
  ): token_accts_aggregate!
  updated_at: timestamptz!

  """An object relationship"""
  vault_by_finalize: conditional_vaults

  """An object relationship"""
  vault_by_revert: conditional_vaults
}

"""
aggregated selection of "tokens"
"""
type tokens_aggregate {
  aggregate: tokens_aggregate_fields
  nodes: [tokens!]!
}

"""
aggregate fields of "tokens"
"""
type tokens_aggregate_fields {
  avg: tokens_avg_fields
  count(columns: [tokens_select_column!], distinct: Boolean): Int!
  max: tokens_max_fields
  min: tokens_min_fields
  stddev: tokens_stddev_fields
  stddev_pop: tokens_stddev_pop_fields
  stddev_samp: tokens_stddev_samp_fields
  sum: tokens_sum_fields
  var_pop: tokens_var_pop_fields
  var_samp: tokens_var_samp_fields
  variance: tokens_variance_fields
}

"""aggregate avg on columns"""
type tokens_avg_fields {
  decimals: Float
  supply: Float
}

"""
Boolean expression to filter rows from the table "tokens". All fields are combined with a logical 'AND'.
"""
input tokens_bool_exp {
  _and: [tokens_bool_exp!]
  _not: tokens_bool_exp
  _or: [tokens_bool_exp!]
  conditional_vaults: conditional_vaults_bool_exp
  conditional_vaults_aggregate: conditional_vaults_aggregate_bool_exp
  daos: daos_bool_exp
  daosByQuoteAcct: daos_bool_exp
  daosByQuoteAcct_aggregate: daos_aggregate_bool_exp
  daos_aggregate: daos_aggregate_bool_exp
  decimals: smallint_comparison_exp
  image_url: String_comparison_exp
  markets: markets_bool_exp
  marketsByQuoteMintAcct: markets_bool_exp
  marketsByQuoteMintAcct_aggregate: markets_aggregate_bool_exp
  markets_aggregate: markets_aggregate_bool_exp
  mint_acct: String_comparison_exp
  name: String_comparison_exp
  supply: bigint_comparison_exp
  symbol: String_comparison_exp
  token_acct_balances: token_acct_balances_bool_exp
  token_acct_balances_aggregate: token_acct_balances_aggregate_bool_exp
  token_accts: token_accts_bool_exp
  token_accts_aggregate: token_accts_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
  vault_by_finalize: conditional_vaults_bool_exp
  vault_by_revert: conditional_vaults_bool_exp
}

"""
unique or primary key constraints on table "tokens"
"""
enum tokens_constraint {
  """
  unique or primary key constraint on columns "mint_acct"
  """
  tokens_pkey
}

"""
input type for incrementing numeric columns in table "tokens"
"""
input tokens_inc_input {
  decimals: smallint
  supply: bigint
}

"""
input type for inserting data into table "tokens"
"""
input tokens_insert_input {
  conditional_vaults: conditional_vaults_arr_rel_insert_input
  daos: daos_arr_rel_insert_input
  daosByQuoteAcct: daos_arr_rel_insert_input
  decimals: smallint
  image_url: String
  markets: markets_arr_rel_insert_input
  marketsByQuoteMintAcct: markets_arr_rel_insert_input
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  token_acct_balances: token_acct_balances_arr_rel_insert_input
  token_accts: token_accts_arr_rel_insert_input
  updated_at: timestamptz
  vault_by_finalize: conditional_vaults_obj_rel_insert_input
  vault_by_revert: conditional_vaults_obj_rel_insert_input
}

"""aggregate max on columns"""
type tokens_max_fields {
  decimals: smallint
  image_url: String
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type tokens_min_fields {
  decimals: smallint
  image_url: String
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "tokens"
"""
type tokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tokens!]!
}

"""
input type for inserting object relation for remote table "tokens"
"""
input tokens_obj_rel_insert_input {
  data: tokens_insert_input!

  """upsert condition"""
  on_conflict: tokens_on_conflict
}

"""
on_conflict condition type for table "tokens"
"""
input tokens_on_conflict {
  constraint: tokens_constraint!
  update_columns: [tokens_update_column!]! = []
  where: tokens_bool_exp
}

"""Ordering options when selecting data from "tokens"."""
input tokens_order_by {
  conditional_vaults_aggregate: conditional_vaults_aggregate_order_by
  daosByQuoteAcct_aggregate: daos_aggregate_order_by
  daos_aggregate: daos_aggregate_order_by
  decimals: order_by
  image_url: order_by
  marketsByQuoteMintAcct_aggregate: markets_aggregate_order_by
  markets_aggregate: markets_aggregate_order_by
  mint_acct: order_by
  name: order_by
  supply: order_by
  symbol: order_by
  token_acct_balances_aggregate: token_acct_balances_aggregate_order_by
  token_accts_aggregate: token_accts_aggregate_order_by
  updated_at: order_by
  vault_by_finalize: conditional_vaults_order_by
  vault_by_revert: conditional_vaults_order_by
}

"""primary key columns input for table: tokens"""
input tokens_pk_columns_input {
  mint_acct: String!
}

"""
select columns of table "tokens"
"""
enum tokens_select_column {
  """column name"""
  decimals

  """column name"""
  image_url

  """column name"""
  mint_acct

  """column name"""
  name

  """column name"""
  supply

  """column name"""
  symbol

  """column name"""
  updated_at
}

"""
input type for updating data in table "tokens"
"""
input tokens_set_input {
  decimals: smallint
  image_url: String
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type tokens_stddev_fields {
  decimals: Float
  supply: Float
}

"""aggregate stddev_pop on columns"""
type tokens_stddev_pop_fields {
  decimals: Float
  supply: Float
}

"""aggregate stddev_samp on columns"""
type tokens_stddev_samp_fields {
  decimals: Float
  supply: Float
}

"""
Streaming cursor of the table "tokens"
"""
input tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tokens_stream_cursor_value_input {
  decimals: smallint
  image_url: String
  mint_acct: String
  name: String
  supply: bigint
  symbol: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type tokens_sum_fields {
  decimals: smallint
  supply: bigint
}

"""
update columns of table "tokens"
"""
enum tokens_update_column {
  """column name"""
  decimals

  """column name"""
  image_url

  """column name"""
  mint_acct

  """column name"""
  name

  """column name"""
  supply

  """column name"""
  symbol

  """column name"""
  updated_at
}

input tokens_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tokens_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tokens_set_input

  """filter the rows which have to be updated"""
  where: tokens_bool_exp!
}

"""aggregate var_pop on columns"""
type tokens_var_pop_fields {
  decimals: Float
  supply: Float
}

"""aggregate var_samp on columns"""
type tokens_var_samp_fields {
  decimals: Float
  supply: Float
}

"""aggregate variance on columns"""
type tokens_variance_fields {
  decimals: Float
  supply: Float
}

"""
columns and relationships of "transaction_watcher_transactions"
"""
type transaction_watcher_transactions {
  slot: bigint!

  """An object relationship"""
  transaction: transactions!

  """An object relationship"""
  transaction_watcher: transaction_watchers!
  tx_sig: String!
  watcher_acct: String!
}

"""
aggregated selection of "transaction_watcher_transactions"
"""
type transaction_watcher_transactions_aggregate {
  aggregate: transaction_watcher_transactions_aggregate_fields
  nodes: [transaction_watcher_transactions!]!
}

input transaction_watcher_transactions_aggregate_bool_exp {
  count: transaction_watcher_transactions_aggregate_bool_exp_count
}

input transaction_watcher_transactions_aggregate_bool_exp_count {
  arguments: [transaction_watcher_transactions_select_column!]
  distinct: Boolean
  filter: transaction_watcher_transactions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "transaction_watcher_transactions"
"""
type transaction_watcher_transactions_aggregate_fields {
  avg: transaction_watcher_transactions_avg_fields
  count(columns: [transaction_watcher_transactions_select_column!], distinct: Boolean): Int!
  max: transaction_watcher_transactions_max_fields
  min: transaction_watcher_transactions_min_fields
  stddev: transaction_watcher_transactions_stddev_fields
  stddev_pop: transaction_watcher_transactions_stddev_pop_fields
  stddev_samp: transaction_watcher_transactions_stddev_samp_fields
  sum: transaction_watcher_transactions_sum_fields
  var_pop: transaction_watcher_transactions_var_pop_fields
  var_samp: transaction_watcher_transactions_var_samp_fields
  variance: transaction_watcher_transactions_variance_fields
}

"""
order by aggregate values of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_aggregate_order_by {
  avg: transaction_watcher_transactions_avg_order_by
  count: order_by
  max: transaction_watcher_transactions_max_order_by
  min: transaction_watcher_transactions_min_order_by
  stddev: transaction_watcher_transactions_stddev_order_by
  stddev_pop: transaction_watcher_transactions_stddev_pop_order_by
  stddev_samp: transaction_watcher_transactions_stddev_samp_order_by
  sum: transaction_watcher_transactions_sum_order_by
  var_pop: transaction_watcher_transactions_var_pop_order_by
  var_samp: transaction_watcher_transactions_var_samp_order_by
  variance: transaction_watcher_transactions_variance_order_by
}

"""
input type for inserting array relation for remote table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_arr_rel_insert_input {
  data: [transaction_watcher_transactions_insert_input!]!

  """upsert condition"""
  on_conflict: transaction_watcher_transactions_on_conflict
}

"""aggregate avg on columns"""
type transaction_watcher_transactions_avg_fields {
  slot: Float
}

"""
order by avg() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_avg_order_by {
  slot: order_by
}

"""
Boolean expression to filter rows from the table "transaction_watcher_transactions". All fields are combined with a logical 'AND'.
"""
input transaction_watcher_transactions_bool_exp {
  _and: [transaction_watcher_transactions_bool_exp!]
  _not: transaction_watcher_transactions_bool_exp
  _or: [transaction_watcher_transactions_bool_exp!]
  slot: bigint_comparison_exp
  transaction: transactions_bool_exp
  transaction_watcher: transaction_watchers_bool_exp
  tx_sig: String_comparison_exp
  watcher_acct: String_comparison_exp
}

"""
unique or primary key constraints on table "transaction_watcher_transactions"
"""
enum transaction_watcher_transactions_constraint {
  """
  unique or primary key constraint on columns "watcher_acct", "tx_sig"
  """
  transaction_watcher_transactions_watcher_acct_tx_sig_pk
}

"""
input type for incrementing numeric columns in table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_inc_input {
  slot: bigint
}

"""
input type for inserting data into table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_insert_input {
  slot: bigint
  transaction: transactions_obj_rel_insert_input
  transaction_watcher: transaction_watchers_obj_rel_insert_input
  tx_sig: String
  watcher_acct: String
}

"""aggregate max on columns"""
type transaction_watcher_transactions_max_fields {
  slot: bigint
  tx_sig: String
  watcher_acct: String
}

"""
order by max() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_max_order_by {
  slot: order_by
  tx_sig: order_by
  watcher_acct: order_by
}

"""aggregate min on columns"""
type transaction_watcher_transactions_min_fields {
  slot: bigint
  tx_sig: String
  watcher_acct: String
}

"""
order by min() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_min_order_by {
  slot: order_by
  tx_sig: order_by
  watcher_acct: order_by
}

"""
response of any mutation on the table "transaction_watcher_transactions"
"""
type transaction_watcher_transactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [transaction_watcher_transactions!]!
}

"""
on_conflict condition type for table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_on_conflict {
  constraint: transaction_watcher_transactions_constraint!
  update_columns: [transaction_watcher_transactions_update_column!]! = []
  where: transaction_watcher_transactions_bool_exp
}

"""
Ordering options when selecting data from "transaction_watcher_transactions".
"""
input transaction_watcher_transactions_order_by {
  slot: order_by
  transaction: transactions_order_by
  transaction_watcher: transaction_watchers_order_by
  tx_sig: order_by
  watcher_acct: order_by
}

"""primary key columns input for table: transaction_watcher_transactions"""
input transaction_watcher_transactions_pk_columns_input {
  tx_sig: String!
  watcher_acct: String!
}

"""
select columns of table "transaction_watcher_transactions"
"""
enum transaction_watcher_transactions_select_column {
  """column name"""
  slot

  """column name"""
  tx_sig

  """column name"""
  watcher_acct
}

"""
input type for updating data in table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_set_input {
  slot: bigint
  tx_sig: String
  watcher_acct: String
}

"""aggregate stddev on columns"""
type transaction_watcher_transactions_stddev_fields {
  slot: Float
}

"""
order by stddev() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_stddev_order_by {
  slot: order_by
}

"""aggregate stddev_pop on columns"""
type transaction_watcher_transactions_stddev_pop_fields {
  slot: Float
}

"""
order by stddev_pop() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_stddev_pop_order_by {
  slot: order_by
}

"""aggregate stddev_samp on columns"""
type transaction_watcher_transactions_stddev_samp_fields {
  slot: Float
}

"""
order by stddev_samp() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_stddev_samp_order_by {
  slot: order_by
}

"""
Streaming cursor of the table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: transaction_watcher_transactions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input transaction_watcher_transactions_stream_cursor_value_input {
  slot: bigint
  tx_sig: String
  watcher_acct: String
}

"""aggregate sum on columns"""
type transaction_watcher_transactions_sum_fields {
  slot: bigint
}

"""
order by sum() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_sum_order_by {
  slot: order_by
}

"""
update columns of table "transaction_watcher_transactions"
"""
enum transaction_watcher_transactions_update_column {
  """column name"""
  slot

  """column name"""
  tx_sig

  """column name"""
  watcher_acct
}

input transaction_watcher_transactions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: transaction_watcher_transactions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: transaction_watcher_transactions_set_input

  """filter the rows which have to be updated"""
  where: transaction_watcher_transactions_bool_exp!
}

"""aggregate var_pop on columns"""
type transaction_watcher_transactions_var_pop_fields {
  slot: Float
}

"""
order by var_pop() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_var_pop_order_by {
  slot: order_by
}

"""aggregate var_samp on columns"""
type transaction_watcher_transactions_var_samp_fields {
  slot: Float
}

"""
order by var_samp() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_var_samp_order_by {
  slot: order_by
}

"""aggregate variance on columns"""
type transaction_watcher_transactions_variance_fields {
  slot: Float
}

"""
order by variance() on columns of table "transaction_watcher_transactions"
"""
input transaction_watcher_transactions_variance_order_by {
  slot: order_by
}

"""
columns and relationships of "transaction_watchers"
"""
type transaction_watchers {
  acct: String!
  checked_up_to_slot: bigint!
  description: String!
  failure_log: String
  first_tx_sig: String
  latest_tx_sig: String
  serializer_logic_version: smallint!
  status: String!

  """An object relationship"""
  transaction: transactions

  """An object relationship"""
  transactionByLatestTxSig: transactions

  """An array relationship"""
  transaction_watcher_transactions(
    """distinct select on columns"""
    distinct_on: [transaction_watcher_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watcher_transactions_order_by!]

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): [transaction_watcher_transactions!]!

  """An aggregate relationship"""
  transaction_watcher_transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_watcher_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watcher_transactions_order_by!]

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): transaction_watcher_transactions_aggregate!
  updated_at: timestamptz
}

"""
aggregated selection of "transaction_watchers"
"""
type transaction_watchers_aggregate {
  aggregate: transaction_watchers_aggregate_fields
  nodes: [transaction_watchers!]!
}

input transaction_watchers_aggregate_bool_exp {
  count: transaction_watchers_aggregate_bool_exp_count
}

input transaction_watchers_aggregate_bool_exp_count {
  arguments: [transaction_watchers_select_column!]
  distinct: Boolean
  filter: transaction_watchers_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "transaction_watchers"
"""
type transaction_watchers_aggregate_fields {
  avg: transaction_watchers_avg_fields
  count(columns: [transaction_watchers_select_column!], distinct: Boolean): Int!
  max: transaction_watchers_max_fields
  min: transaction_watchers_min_fields
  stddev: transaction_watchers_stddev_fields
  stddev_pop: transaction_watchers_stddev_pop_fields
  stddev_samp: transaction_watchers_stddev_samp_fields
  sum: transaction_watchers_sum_fields
  var_pop: transaction_watchers_var_pop_fields
  var_samp: transaction_watchers_var_samp_fields
  variance: transaction_watchers_variance_fields
}

"""
order by aggregate values of table "transaction_watchers"
"""
input transaction_watchers_aggregate_order_by {
  avg: transaction_watchers_avg_order_by
  count: order_by
  max: transaction_watchers_max_order_by
  min: transaction_watchers_min_order_by
  stddev: transaction_watchers_stddev_order_by
  stddev_pop: transaction_watchers_stddev_pop_order_by
  stddev_samp: transaction_watchers_stddev_samp_order_by
  sum: transaction_watchers_sum_order_by
  var_pop: transaction_watchers_var_pop_order_by
  var_samp: transaction_watchers_var_samp_order_by
  variance: transaction_watchers_variance_order_by
}

"""
input type for inserting array relation for remote table "transaction_watchers"
"""
input transaction_watchers_arr_rel_insert_input {
  data: [transaction_watchers_insert_input!]!

  """upsert condition"""
  on_conflict: transaction_watchers_on_conflict
}

"""aggregate avg on columns"""
type transaction_watchers_avg_fields {
  checked_up_to_slot: Float
  serializer_logic_version: Float
}

"""
order by avg() on columns of table "transaction_watchers"
"""
input transaction_watchers_avg_order_by {
  checked_up_to_slot: order_by
  serializer_logic_version: order_by
}

"""
Boolean expression to filter rows from the table "transaction_watchers". All fields are combined with a logical 'AND'.
"""
input transaction_watchers_bool_exp {
  _and: [transaction_watchers_bool_exp!]
  _not: transaction_watchers_bool_exp
  _or: [transaction_watchers_bool_exp!]
  acct: String_comparison_exp
  checked_up_to_slot: bigint_comparison_exp
  description: String_comparison_exp
  failure_log: String_comparison_exp
  first_tx_sig: String_comparison_exp
  latest_tx_sig: String_comparison_exp
  serializer_logic_version: smallint_comparison_exp
  status: String_comparison_exp
  transaction: transactions_bool_exp
  transactionByLatestTxSig: transactions_bool_exp
  transaction_watcher_transactions: transaction_watcher_transactions_bool_exp
  transaction_watcher_transactions_aggregate: transaction_watcher_transactions_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "transaction_watchers"
"""
enum transaction_watchers_constraint {
  """
  unique or primary key constraint on columns "acct"
  """
  transaction_watchers_pkey
}

"""
input type for incrementing numeric columns in table "transaction_watchers"
"""
input transaction_watchers_inc_input {
  checked_up_to_slot: bigint
  serializer_logic_version: smallint
}

"""
input type for inserting data into table "transaction_watchers"
"""
input transaction_watchers_insert_input {
  acct: String
  checked_up_to_slot: bigint
  description: String
  failure_log: String
  first_tx_sig: String
  latest_tx_sig: String
  serializer_logic_version: smallint
  status: String
  transaction: transactions_obj_rel_insert_input
  transactionByLatestTxSig: transactions_obj_rel_insert_input
  transaction_watcher_transactions: transaction_watcher_transactions_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type transaction_watchers_max_fields {
  acct: String
  checked_up_to_slot: bigint
  description: String
  failure_log: String
  first_tx_sig: String
  latest_tx_sig: String
  serializer_logic_version: smallint
  status: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "transaction_watchers"
"""
input transaction_watchers_max_order_by {
  acct: order_by
  checked_up_to_slot: order_by
  description: order_by
  failure_log: order_by
  first_tx_sig: order_by
  latest_tx_sig: order_by
  serializer_logic_version: order_by
  status: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type transaction_watchers_min_fields {
  acct: String
  checked_up_to_slot: bigint
  description: String
  failure_log: String
  first_tx_sig: String
  latest_tx_sig: String
  serializer_logic_version: smallint
  status: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "transaction_watchers"
"""
input transaction_watchers_min_order_by {
  acct: order_by
  checked_up_to_slot: order_by
  description: order_by
  failure_log: order_by
  first_tx_sig: order_by
  latest_tx_sig: order_by
  serializer_logic_version: order_by
  status: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "transaction_watchers"
"""
type transaction_watchers_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [transaction_watchers!]!
}

"""
input type for inserting object relation for remote table "transaction_watchers"
"""
input transaction_watchers_obj_rel_insert_input {
  data: transaction_watchers_insert_input!

  """upsert condition"""
  on_conflict: transaction_watchers_on_conflict
}

"""
on_conflict condition type for table "transaction_watchers"
"""
input transaction_watchers_on_conflict {
  constraint: transaction_watchers_constraint!
  update_columns: [transaction_watchers_update_column!]! = []
  where: transaction_watchers_bool_exp
}

"""Ordering options when selecting data from "transaction_watchers"."""
input transaction_watchers_order_by {
  acct: order_by
  checked_up_to_slot: order_by
  description: order_by
  failure_log: order_by
  first_tx_sig: order_by
  latest_tx_sig: order_by
  serializer_logic_version: order_by
  status: order_by
  transaction: transactions_order_by
  transactionByLatestTxSig: transactions_order_by
  transaction_watcher_transactions_aggregate: transaction_watcher_transactions_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: transaction_watchers"""
input transaction_watchers_pk_columns_input {
  acct: String!
}

"""
select columns of table "transaction_watchers"
"""
enum transaction_watchers_select_column {
  """column name"""
  acct

  """column name"""
  checked_up_to_slot

  """column name"""
  description

  """column name"""
  failure_log

  """column name"""
  first_tx_sig

  """column name"""
  latest_tx_sig

  """column name"""
  serializer_logic_version

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "transaction_watchers"
"""
input transaction_watchers_set_input {
  acct: String
  checked_up_to_slot: bigint
  description: String
  failure_log: String
  first_tx_sig: String
  latest_tx_sig: String
  serializer_logic_version: smallint
  status: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type transaction_watchers_stddev_fields {
  checked_up_to_slot: Float
  serializer_logic_version: Float
}

"""
order by stddev() on columns of table "transaction_watchers"
"""
input transaction_watchers_stddev_order_by {
  checked_up_to_slot: order_by
  serializer_logic_version: order_by
}

"""aggregate stddev_pop on columns"""
type transaction_watchers_stddev_pop_fields {
  checked_up_to_slot: Float
  serializer_logic_version: Float
}

"""
order by stddev_pop() on columns of table "transaction_watchers"
"""
input transaction_watchers_stddev_pop_order_by {
  checked_up_to_slot: order_by
  serializer_logic_version: order_by
}

"""aggregate stddev_samp on columns"""
type transaction_watchers_stddev_samp_fields {
  checked_up_to_slot: Float
  serializer_logic_version: Float
}

"""
order by stddev_samp() on columns of table "transaction_watchers"
"""
input transaction_watchers_stddev_samp_order_by {
  checked_up_to_slot: order_by
  serializer_logic_version: order_by
}

"""
Streaming cursor of the table "transaction_watchers"
"""
input transaction_watchers_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: transaction_watchers_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input transaction_watchers_stream_cursor_value_input {
  acct: String
  checked_up_to_slot: bigint
  description: String
  failure_log: String
  first_tx_sig: String
  latest_tx_sig: String
  serializer_logic_version: smallint
  status: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type transaction_watchers_sum_fields {
  checked_up_to_slot: bigint
  serializer_logic_version: smallint
}

"""
order by sum() on columns of table "transaction_watchers"
"""
input transaction_watchers_sum_order_by {
  checked_up_to_slot: order_by
  serializer_logic_version: order_by
}

"""
update columns of table "transaction_watchers"
"""
enum transaction_watchers_update_column {
  """column name"""
  acct

  """column name"""
  checked_up_to_slot

  """column name"""
  description

  """column name"""
  failure_log

  """column name"""
  first_tx_sig

  """column name"""
  latest_tx_sig

  """column name"""
  serializer_logic_version

  """column name"""
  status

  """column name"""
  updated_at
}

input transaction_watchers_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: transaction_watchers_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: transaction_watchers_set_input

  """filter the rows which have to be updated"""
  where: transaction_watchers_bool_exp!
}

"""aggregate var_pop on columns"""
type transaction_watchers_var_pop_fields {
  checked_up_to_slot: Float
  serializer_logic_version: Float
}

"""
order by var_pop() on columns of table "transaction_watchers"
"""
input transaction_watchers_var_pop_order_by {
  checked_up_to_slot: order_by
  serializer_logic_version: order_by
}

"""aggregate var_samp on columns"""
type transaction_watchers_var_samp_fields {
  checked_up_to_slot: Float
  serializer_logic_version: Float
}

"""
order by var_samp() on columns of table "transaction_watchers"
"""
input transaction_watchers_var_samp_order_by {
  checked_up_to_slot: order_by
  serializer_logic_version: order_by
}

"""aggregate variance on columns"""
type transaction_watchers_variance_fields {
  checked_up_to_slot: Float
  serializer_logic_version: Float
}

"""
order by variance() on columns of table "transaction_watchers"
"""
input transaction_watchers_variance_order_by {
  checked_up_to_slot: order_by
  serializer_logic_version: order_by
}

"""
columns and relationships of "transactions"
"""
type transactions {
  block_time: timestamptz!
  failed: Boolean!

  """An array relationship"""
  indexer_account_dependencies(
    """distinct select on columns"""
    distinct_on: [indexer_account_dependencies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_account_dependencies_order_by!]

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): [indexer_account_dependencies!]!

  """An aggregate relationship"""
  indexer_account_dependencies_aggregate(
    """distinct select on columns"""
    distinct_on: [indexer_account_dependencies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [indexer_account_dependencies_order_by!]

    """filter the rows returned"""
    where: indexer_account_dependencies_bool_exp
  ): indexer_account_dependencies_aggregate!
  main_ix_type: String

  """An object relationship"""
  order: orders
  payload: String!
  serializer_logic_version: smallint!
  slot: bigint!

  """An array relationship"""
  transactionWatchersByLatestTxSig(
    """distinct select on columns"""
    distinct_on: [transaction_watchers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watchers_order_by!]

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): [transaction_watchers!]!

  """An aggregate relationship"""
  transactionWatchersByLatestTxSig_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_watchers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watchers_order_by!]

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): transaction_watchers_aggregate!

  """An array relationship"""
  transaction_watcher_transactions(
    """distinct select on columns"""
    distinct_on: [transaction_watcher_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watcher_transactions_order_by!]

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): [transaction_watcher_transactions!]!

  """An aggregate relationship"""
  transaction_watcher_transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_watcher_transactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watcher_transactions_order_by!]

    """filter the rows returned"""
    where: transaction_watcher_transactions_bool_exp
  ): transaction_watcher_transactions_aggregate!

  """An array relationship"""
  transaction_watchers(
    """distinct select on columns"""
    distinct_on: [transaction_watchers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watchers_order_by!]

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): [transaction_watchers!]!

  """An aggregate relationship"""
  transaction_watchers_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_watchers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_watchers_order_by!]

    """filter the rows returned"""
    where: transaction_watchers_bool_exp
  ): transaction_watchers_aggregate!
  tx_sig: String!
}

"""
aggregated selection of "transactions"
"""
type transactions_aggregate {
  aggregate: transactions_aggregate_fields
  nodes: [transactions!]!
}

"""
aggregate fields of "transactions"
"""
type transactions_aggregate_fields {
  avg: transactions_avg_fields
  count(columns: [transactions_select_column!], distinct: Boolean): Int!
  max: transactions_max_fields
  min: transactions_min_fields
  stddev: transactions_stddev_fields
  stddev_pop: transactions_stddev_pop_fields
  stddev_samp: transactions_stddev_samp_fields
  sum: transactions_sum_fields
  var_pop: transactions_var_pop_fields
  var_samp: transactions_var_samp_fields
  variance: transactions_variance_fields
}

"""aggregate avg on columns"""
type transactions_avg_fields {
  serializer_logic_version: Float
  slot: Float
}

"""
Boolean expression to filter rows from the table "transactions". All fields are combined with a logical 'AND'.
"""
input transactions_bool_exp {
  _and: [transactions_bool_exp!]
  _not: transactions_bool_exp
  _or: [transactions_bool_exp!]
  block_time: timestamptz_comparison_exp
  failed: Boolean_comparison_exp
  indexer_account_dependencies: indexer_account_dependencies_bool_exp
  indexer_account_dependencies_aggregate: indexer_account_dependencies_aggregate_bool_exp
  main_ix_type: String_comparison_exp
  order: orders_bool_exp
  payload: String_comparison_exp
  serializer_logic_version: smallint_comparison_exp
  slot: bigint_comparison_exp
  transactionWatchersByLatestTxSig: transaction_watchers_bool_exp
  transactionWatchersByLatestTxSig_aggregate: transaction_watchers_aggregate_bool_exp
  transaction_watcher_transactions: transaction_watcher_transactions_bool_exp
  transaction_watcher_transactions_aggregate: transaction_watcher_transactions_aggregate_bool_exp
  transaction_watchers: transaction_watchers_bool_exp
  transaction_watchers_aggregate: transaction_watchers_aggregate_bool_exp
  tx_sig: String_comparison_exp
}

"""
unique or primary key constraints on table "transactions"
"""
enum transactions_constraint {
  """
  unique or primary key constraint on columns "tx_sig"
  """
  transactions_pkey
}

"""
input type for incrementing numeric columns in table "transactions"
"""
input transactions_inc_input {
  serializer_logic_version: smallint
  slot: bigint
}

"""
input type for inserting data into table "transactions"
"""
input transactions_insert_input {
  block_time: timestamptz
  failed: Boolean
  indexer_account_dependencies: indexer_account_dependencies_arr_rel_insert_input
  main_ix_type: String
  order: orders_obj_rel_insert_input
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  transactionWatchersByLatestTxSig: transaction_watchers_arr_rel_insert_input
  transaction_watcher_transactions: transaction_watcher_transactions_arr_rel_insert_input
  transaction_watchers: transaction_watchers_arr_rel_insert_input
  tx_sig: String
}

"""aggregate max on columns"""
type transactions_max_fields {
  block_time: timestamptz
  main_ix_type: String
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""aggregate min on columns"""
type transactions_min_fields {
  block_time: timestamptz
  main_ix_type: String
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""
response of any mutation on the table "transactions"
"""
type transactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [transactions!]!
}

"""
input type for inserting object relation for remote table "transactions"
"""
input transactions_obj_rel_insert_input {
  data: transactions_insert_input!

  """upsert condition"""
  on_conflict: transactions_on_conflict
}

"""
on_conflict condition type for table "transactions"
"""
input transactions_on_conflict {
  constraint: transactions_constraint!
  update_columns: [transactions_update_column!]! = []
  where: transactions_bool_exp
}

"""Ordering options when selecting data from "transactions"."""
input transactions_order_by {
  block_time: order_by
  failed: order_by
  indexer_account_dependencies_aggregate: indexer_account_dependencies_aggregate_order_by
  main_ix_type: order_by
  order: orders_order_by
  payload: order_by
  serializer_logic_version: order_by
  slot: order_by
  transactionWatchersByLatestTxSig_aggregate: transaction_watchers_aggregate_order_by
  transaction_watcher_transactions_aggregate: transaction_watcher_transactions_aggregate_order_by
  transaction_watchers_aggregate: transaction_watchers_aggregate_order_by
  tx_sig: order_by
}

"""primary key columns input for table: transactions"""
input transactions_pk_columns_input {
  tx_sig: String!
}

"""
select columns of table "transactions"
"""
enum transactions_select_column {
  """column name"""
  block_time

  """column name"""
  failed

  """column name"""
  main_ix_type

  """column name"""
  payload

  """column name"""
  serializer_logic_version

  """column name"""
  slot

  """column name"""
  tx_sig
}

"""
input type for updating data in table "transactions"
"""
input transactions_set_input {
  block_time: timestamptz
  failed: Boolean
  main_ix_type: String
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""aggregate stddev on columns"""
type transactions_stddev_fields {
  serializer_logic_version: Float
  slot: Float
}

"""aggregate stddev_pop on columns"""
type transactions_stddev_pop_fields {
  serializer_logic_version: Float
  slot: Float
}

"""aggregate stddev_samp on columns"""
type transactions_stddev_samp_fields {
  serializer_logic_version: Float
  slot: Float
}

"""
Streaming cursor of the table "transactions"
"""
input transactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: transactions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input transactions_stream_cursor_value_input {
  block_time: timestamptz
  failed: Boolean
  main_ix_type: String
  payload: String
  serializer_logic_version: smallint
  slot: bigint
  tx_sig: String
}

"""aggregate sum on columns"""
type transactions_sum_fields {
  serializer_logic_version: smallint
  slot: bigint
}

"""
update columns of table "transactions"
"""
enum transactions_update_column {
  """column name"""
  block_time

  """column name"""
  failed

  """column name"""
  main_ix_type

  """column name"""
  payload

  """column name"""
  serializer_logic_version

  """column name"""
  slot

  """column name"""
  tx_sig
}

input transactions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: transactions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: transactions_set_input

  """filter the rows which have to be updated"""
  where: transactions_bool_exp!
}

"""aggregate var_pop on columns"""
type transactions_var_pop_fields {
  serializer_logic_version: Float
  slot: Float
}

"""aggregate var_samp on columns"""
type transactions_var_samp_fields {
  serializer_logic_version: Float
  slot: Float
}

"""aggregate variance on columns"""
type transactions_variance_fields {
  serializer_logic_version: Float
  slot: Float
}

"""
columns and relationships of "twap_chart_data"
"""
type twap_chart_data {
  interv: timestamptz

  """An object relationship"""
  market: markets
  market_acct: String
  token_amount: bigint
}

"""
aggregated selection of "twap_chart_data"
"""
type twap_chart_data_aggregate {
  aggregate: twap_chart_data_aggregate_fields
  nodes: [twap_chart_data!]!
}

"""
aggregate fields of "twap_chart_data"
"""
type twap_chart_data_aggregate_fields {
  avg: twap_chart_data_avg_fields
  count(columns: [twap_chart_data_select_column!], distinct: Boolean): Int!
  max: twap_chart_data_max_fields
  min: twap_chart_data_min_fields
  stddev: twap_chart_data_stddev_fields
  stddev_pop: twap_chart_data_stddev_pop_fields
  stddev_samp: twap_chart_data_stddev_samp_fields
  sum: twap_chart_data_sum_fields
  var_pop: twap_chart_data_var_pop_fields
  var_samp: twap_chart_data_var_samp_fields
  variance: twap_chart_data_variance_fields
}

"""aggregate avg on columns"""
type twap_chart_data_avg_fields {
  token_amount: Float
}

"""
Boolean expression to filter rows from the table "twap_chart_data". All fields are combined with a logical 'AND'.
"""
input twap_chart_data_bool_exp {
  _and: [twap_chart_data_bool_exp!]
  _not: twap_chart_data_bool_exp
  _or: [twap_chart_data_bool_exp!]
  interv: timestamptz_comparison_exp
  market: markets_bool_exp
  market_acct: String_comparison_exp
  token_amount: bigint_comparison_exp
}

"""aggregate max on columns"""
type twap_chart_data_max_fields {
  interv: timestamptz
  market_acct: String
  token_amount: bigint
}

"""aggregate min on columns"""
type twap_chart_data_min_fields {
  interv: timestamptz
  market_acct: String
  token_amount: bigint
}

"""Ordering options when selecting data from "twap_chart_data"."""
input twap_chart_data_order_by {
  interv: order_by
  market: markets_order_by
  market_acct: order_by
  token_amount: order_by
}

"""
select columns of table "twap_chart_data"
"""
enum twap_chart_data_select_column {
  """column name"""
  interv

  """column name"""
  market_acct

  """column name"""
  token_amount
}

"""aggregate stddev on columns"""
type twap_chart_data_stddev_fields {
  token_amount: Float
}

"""aggregate stddev_pop on columns"""
type twap_chart_data_stddev_pop_fields {
  token_amount: Float
}

"""aggregate stddev_samp on columns"""
type twap_chart_data_stddev_samp_fields {
  token_amount: Float
}

"""
Streaming cursor of the table "twap_chart_data"
"""
input twap_chart_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: twap_chart_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input twap_chart_data_stream_cursor_value_input {
  interv: timestamptz
  market_acct: String
  token_amount: bigint
}

"""aggregate sum on columns"""
type twap_chart_data_sum_fields {
  token_amount: bigint
}

"""aggregate var_pop on columns"""
type twap_chart_data_var_pop_fields {
  token_amount: Float
}

"""aggregate var_samp on columns"""
type twap_chart_data_var_samp_fields {
  token_amount: Float
}

"""aggregate variance on columns"""
type twap_chart_data_variance_fields {
  token_amount: Float
}

"""
columns and relationships of "twaps"
"""
type twaps {
  created_at: timestamptz!
  last_observation: numeric
  last_price: numeric

  """An object relationship"""
  market: markets!
  market_acct: String!
  observation_agg: numeric!

  """An object relationship"""
  proposal: proposals!
  proposal_acct: String!
  token_amount: bigint!
  updated_slot: bigint!
}

"""
aggregated selection of "twaps"
"""
type twaps_aggregate {
  aggregate: twaps_aggregate_fields
  nodes: [twaps!]!
}

input twaps_aggregate_bool_exp {
  count: twaps_aggregate_bool_exp_count
}

input twaps_aggregate_bool_exp_count {
  arguments: [twaps_select_column!]
  distinct: Boolean
  filter: twaps_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "twaps"
"""
type twaps_aggregate_fields {
  avg: twaps_avg_fields
  count(columns: [twaps_select_column!], distinct: Boolean): Int!
  max: twaps_max_fields
  min: twaps_min_fields
  stddev: twaps_stddev_fields
  stddev_pop: twaps_stddev_pop_fields
  stddev_samp: twaps_stddev_samp_fields
  sum: twaps_sum_fields
  var_pop: twaps_var_pop_fields
  var_samp: twaps_var_samp_fields
  variance: twaps_variance_fields
}

"""
order by aggregate values of table "twaps"
"""
input twaps_aggregate_order_by {
  avg: twaps_avg_order_by
  count: order_by
  max: twaps_max_order_by
  min: twaps_min_order_by
  stddev: twaps_stddev_order_by
  stddev_pop: twaps_stddev_pop_order_by
  stddev_samp: twaps_stddev_samp_order_by
  sum: twaps_sum_order_by
  var_pop: twaps_var_pop_order_by
  var_samp: twaps_var_samp_order_by
  variance: twaps_variance_order_by
}

"""
input type for inserting array relation for remote table "twaps"
"""
input twaps_arr_rel_insert_input {
  data: [twaps_insert_input!]!

  """upsert condition"""
  on_conflict: twaps_on_conflict
}

"""aggregate avg on columns"""
type twaps_avg_fields {
  last_observation: Float
  last_price: Float
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
order by avg() on columns of table "twaps"
"""
input twaps_avg_order_by {
  last_observation: order_by
  last_price: order_by
  observation_agg: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""
Boolean expression to filter rows from the table "twaps". All fields are combined with a logical 'AND'.
"""
input twaps_bool_exp {
  _and: [twaps_bool_exp!]
  _not: twaps_bool_exp
  _or: [twaps_bool_exp!]
  created_at: timestamptz_comparison_exp
  last_observation: numeric_comparison_exp
  last_price: numeric_comparison_exp
  market: markets_bool_exp
  market_acct: String_comparison_exp
  observation_agg: numeric_comparison_exp
  proposal: proposals_bool_exp
  proposal_acct: String_comparison_exp
  token_amount: bigint_comparison_exp
  updated_slot: bigint_comparison_exp
}

"""
unique or primary key constraints on table "twaps"
"""
enum twaps_constraint {
  """
  unique or primary key constraint on columns "updated_slot", "market_acct"
  """
  twaps_updated_slot_market_acct_pk
}

"""
input type for incrementing numeric columns in table "twaps"
"""
input twaps_inc_input {
  last_observation: numeric
  last_price: numeric
  observation_agg: numeric
  token_amount: bigint
  updated_slot: bigint
}

"""
input type for inserting data into table "twaps"
"""
input twaps_insert_input {
  created_at: timestamptz
  last_observation: numeric
  last_price: numeric
  market: markets_obj_rel_insert_input
  market_acct: String
  observation_agg: numeric
  proposal: proposals_obj_rel_insert_input
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""aggregate max on columns"""
type twaps_max_fields {
  created_at: timestamptz
  last_observation: numeric
  last_price: numeric
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""
order by max() on columns of table "twaps"
"""
input twaps_max_order_by {
  created_at: order_by
  last_observation: order_by
  last_price: order_by
  market_acct: order_by
  observation_agg: order_by
  proposal_acct: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""aggregate min on columns"""
type twaps_min_fields {
  created_at: timestamptz
  last_observation: numeric
  last_price: numeric
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""
order by min() on columns of table "twaps"
"""
input twaps_min_order_by {
  created_at: order_by
  last_observation: order_by
  last_price: order_by
  market_acct: order_by
  observation_agg: order_by
  proposal_acct: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""
response of any mutation on the table "twaps"
"""
type twaps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [twaps!]!
}

"""
on_conflict condition type for table "twaps"
"""
input twaps_on_conflict {
  constraint: twaps_constraint!
  update_columns: [twaps_update_column!]! = []
  where: twaps_bool_exp
}

"""Ordering options when selecting data from "twaps"."""
input twaps_order_by {
  created_at: order_by
  last_observation: order_by
  last_price: order_by
  market: markets_order_by
  market_acct: order_by
  observation_agg: order_by
  proposal: proposals_order_by
  proposal_acct: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""primary key columns input for table: twaps"""
input twaps_pk_columns_input {
  market_acct: String!
  updated_slot: bigint!
}

"""
select columns of table "twaps"
"""
enum twaps_select_column {
  """column name"""
  created_at

  """column name"""
  last_observation

  """column name"""
  last_price

  """column name"""
  market_acct

  """column name"""
  observation_agg

  """column name"""
  proposal_acct

  """column name"""
  token_amount

  """column name"""
  updated_slot
}

"""
input type for updating data in table "twaps"
"""
input twaps_set_input {
  created_at: timestamptz
  last_observation: numeric
  last_price: numeric
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""aggregate stddev on columns"""
type twaps_stddev_fields {
  last_observation: Float
  last_price: Float
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
order by stddev() on columns of table "twaps"
"""
input twaps_stddev_order_by {
  last_observation: order_by
  last_price: order_by
  observation_agg: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""aggregate stddev_pop on columns"""
type twaps_stddev_pop_fields {
  last_observation: Float
  last_price: Float
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
order by stddev_pop() on columns of table "twaps"
"""
input twaps_stddev_pop_order_by {
  last_observation: order_by
  last_price: order_by
  observation_agg: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""aggregate stddev_samp on columns"""
type twaps_stddev_samp_fields {
  last_observation: Float
  last_price: Float
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
order by stddev_samp() on columns of table "twaps"
"""
input twaps_stddev_samp_order_by {
  last_observation: order_by
  last_price: order_by
  observation_agg: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""
Streaming cursor of the table "twaps"
"""
input twaps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: twaps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input twaps_stream_cursor_value_input {
  created_at: timestamptz
  last_observation: numeric
  last_price: numeric
  market_acct: String
  observation_agg: numeric
  proposal_acct: String
  token_amount: bigint
  updated_slot: bigint
}

"""aggregate sum on columns"""
type twaps_sum_fields {
  last_observation: numeric
  last_price: numeric
  observation_agg: numeric
  token_amount: bigint
  updated_slot: bigint
}

"""
order by sum() on columns of table "twaps"
"""
input twaps_sum_order_by {
  last_observation: order_by
  last_price: order_by
  observation_agg: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""
update columns of table "twaps"
"""
enum twaps_update_column {
  """column name"""
  created_at

  """column name"""
  last_observation

  """column name"""
  last_price

  """column name"""
  market_acct

  """column name"""
  observation_agg

  """column name"""
  proposal_acct

  """column name"""
  token_amount

  """column name"""
  updated_slot
}

input twaps_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: twaps_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: twaps_set_input

  """filter the rows which have to be updated"""
  where: twaps_bool_exp!
}

"""aggregate var_pop on columns"""
type twaps_var_pop_fields {
  last_observation: Float
  last_price: Float
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
order by var_pop() on columns of table "twaps"
"""
input twaps_var_pop_order_by {
  last_observation: order_by
  last_price: order_by
  observation_agg: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""aggregate var_samp on columns"""
type twaps_var_samp_fields {
  last_observation: Float
  last_price: Float
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
order by var_samp() on columns of table "twaps"
"""
input twaps_var_samp_order_by {
  last_observation: order_by
  last_price: order_by
  observation_agg: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""aggregate variance on columns"""
type twaps_variance_fields {
  last_observation: Float
  last_price: Float
  observation_agg: Float
  token_amount: Float
  updated_slot: Float
}

"""
order by variance() on columns of table "twaps"
"""
input twaps_variance_order_by {
  last_observation: order_by
  last_price: order_by
  observation_agg: order_by
  token_amount: order_by
  updated_slot: order_by
}

"""
columns and relationships of "users"
"""
type users {
  created_at: timestamptz!

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """An aggregate relationship"""
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!
  user_acct: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  created_at: timestamptz_comparison_exp
  sessions: sessions_bool_exp
  sessions_aggregate: sessions_aggregate_bool_exp
  user_acct: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "user_acct"
  """
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  created_at: timestamptz
  sessions: sessions_arr_rel_insert_input
  user_acct: String
}

"""aggregate max on columns"""
type users_max_fields {
  created_at: timestamptz
  user_acct: String
}

"""aggregate min on columns"""
type users_min_fields {
  created_at: timestamptz
  user_acct: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  created_at: order_by
  sessions_aggregate: sessions_aggregate_order_by
  user_acct: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  user_acct: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  created_at

  """column name"""
  user_acct
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  created_at: timestamptz
  user_acct: String
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  created_at: timestamptz
  user_acct: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  created_at

  """column name"""
  user_acct
}

input users_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input

  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}